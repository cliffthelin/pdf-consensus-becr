{
  "total_functions": 897,
  "tested_functions": 92,
  "untested_functions": 805,
  "coverage_percentage": 10.256410256410255,
  "untested_by_module": {
    "compareblocks.analytics.dashboard": [
      {
        "function_name": "AnalyticsDashboard.__init__",
        "class": "AnalyticsDashboard",
        "module": "compareblocks.analytics.dashboard",
        "test_file": "tests/unit/test_dashboard.py",
        "description": "Initialize analytics dashboard.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "AnalyticsDashboard.create_optimization_dashboard",
        "class": "AnalyticsDashboard",
        "module": "compareblocks.analytics.dashboard",
        "test_file": "tests/unit/test_dashboard.py",
        "description": "Create an optimization insights dashboard.",
        "parameters": [
          "self",
          "metrics",
          "recent_reports"
        ]
      },
      {
        "function_name": "AnalyticsDashboard.create_performance_dashboard",
        "class": "AnalyticsDashboard",
        "module": "compareblocks.analytics.dashboard",
        "test_file": "tests/unit/test_dashboard.py",
        "description": "Create a performance dashboard view.",
        "parameters": [
          "self",
          "metrics"
        ]
      },
      {
        "function_name": "AnalyticsDashboard.create_quality_dashboard",
        "class": "AnalyticsDashboard",
        "module": "compareblocks.analytics.dashboard",
        "test_file": "tests/unit/test_dashboard.py",
        "description": "Create a quality metrics dashboard view.",
        "parameters": [
          "self",
          "variation_scores",
          "consensus_decisions"
        ]
      },
      {
        "function_name": "create_performance_dashboard",
        "class": null,
        "module": "compareblocks.analytics.dashboard",
        "test_file": "tests/unit/test_dashboard.py",
        "description": "Convenience function to create a performance dashboard.",
        "parameters": [
          "metrics"
        ]
      },
      {
        "function_name": "create_quality_dashboard",
        "class": null,
        "module": "compareblocks.analytics.dashboard",
        "test_file": "tests/unit/test_dashboard.py",
        "description": "Convenience function to create a quality dashboard.",
        "parameters": [
          "variation_scores",
          "consensus_decisions"
        ]
      }
    ],
    "compareblocks.analytics.export": [
      {
        "function_name": "AnalyticsExporter.__init__",
        "class": "AnalyticsExporter",
        "module": "compareblocks.analytics.export",
        "test_file": "tests/unit/test_export.py",
        "description": "Initialize analytics exporter.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "AnalyticsExporter.create_export_summary",
        "class": "AnalyticsExporter",
        "module": "compareblocks.analytics.export",
        "test_file": "tests/unit/test_export.py",
        "description": "Create a summary of exported files.",
        "parameters": [
          "self",
          "exported_files"
        ]
      },
      {
        "function_name": "AnalyticsExporter.export_analytics_report",
        "class": "AnalyticsExporter",
        "module": "compareblocks.analytics.export",
        "test_file": "tests/unit/test_export.py",
        "description": "Export analytics report in specified format.",
        "parameters": [
          "self",
          "report",
          "format_type",
          "output_path"
        ]
      },
      {
        "function_name": "AnalyticsExporter.export_batch_metrics",
        "class": "AnalyticsExporter",
        "module": "compareblocks.analytics.export",
        "test_file": "tests/unit/test_export.py",
        "description": "Export multiple sets of engine metrics for batch analysis.",
        "parameters": [
          "self",
          "metrics_list",
          "output_path"
        ]
      },
      {
        "function_name": "AnalyticsExporter.export_comparison_data",
        "class": "AnalyticsExporter",
        "module": "compareblocks.analytics.export",
        "test_file": "tests/unit/test_export.py",
        "description": "Export comparison data for trend analysis.",
        "parameters": [
          "self",
          "comparison_data",
          "output_path"
        ]
      },
      {
        "function_name": "AnalyticsExporter.export_dashboard_data",
        "class": "AnalyticsExporter",
        "module": "compareblocks.analytics.export",
        "test_file": "tests/unit/test_export.py",
        "description": "Export dashboard data for external visualization tools.",
        "parameters": [
          "self",
          "dashboard_data",
          "output_path"
        ]
      },
      {
        "function_name": "AnalyticsExporter.export_engine_metrics_csv",
        "class": "AnalyticsExporter",
        "module": "compareblocks.analytics.export",
        "test_file": "tests/unit/test_export.py",
        "description": "Export engine metrics to CSV format.",
        "parameters": [
          "self",
          "metrics",
          "output_path"
        ]
      },
      {
        "function_name": "AnalyticsExporter.export_engine_metrics_json",
        "class": "AnalyticsExporter",
        "module": "compareblocks.analytics.export",
        "test_file": "tests/unit/test_export.py",
        "description": "Export engine metrics to JSON format.",
        "parameters": [
          "self",
          "metrics",
          "output_path"
        ]
      },
      {
        "function_name": "AnalyticsExporter.export_engine_metrics_ndjson",
        "class": "AnalyticsExporter",
        "module": "compareblocks.analytics.export",
        "test_file": "tests/unit/test_export.py",
        "description": "Export engine metrics to NDJSON format.",
        "parameters": [
          "self",
          "metrics",
          "output_path"
        ]
      },
      {
        "function_name": "export_analytics_report",
        "class": null,
        "module": "compareblocks.analytics.export",
        "test_file": "tests/unit/test_export.py",
        "description": "Convenience function to export analytics report.",
        "parameters": [
          "report",
          "format_type",
          "output_path"
        ]
      },
      {
        "function_name": "export_engine_metrics",
        "class": null,
        "module": "compareblocks.analytics.export",
        "test_file": "tests/unit/test_export.py",
        "description": "Convenience function to export engine metrics.",
        "parameters": [
          "metrics",
          "format_type",
          "output_path"
        ]
      }
    ],
    "compareblocks.analytics.report_generator": [
      {
        "function_name": "AnalyticsReport.to_dict",
        "class": "AnalyticsReport",
        "module": "compareblocks.analytics.report_generator",
        "test_file": "tests/unit/test_report_generator.py",
        "description": "Convert to dictionary format.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "ReportGenerator.__init__",
        "class": "ReportGenerator",
        "module": "compareblocks.analytics.report_generator",
        "test_file": "tests/unit/test_report_generator.py",
        "description": "Initialize report generator.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "ReportGenerator.generate_comparison_report",
        "class": "ReportGenerator",
        "module": "compareblocks.analytics.report_generator",
        "test_file": "tests/unit/test_report_generator.py",
        "description": "Generate a comparison report from multiple analytics reports.",
        "parameters": [
          "self",
          "reports"
        ]
      },
      {
        "function_name": "ReportGenerator.generate_comprehensive_report",
        "class": "ReportGenerator",
        "module": "compareblocks.analytics.report_generator",
        "test_file": "tests/unit/test_report_generator.py",
        "description": "Generate a comprehensive analytics report.",
        "parameters": [
          "self",
          "engine_results",
          "consensus_decisions",
          "variation_scores",
          "pdf_path"
        ]
      },
      {
        "function_name": "ReportGenerator.generate_decision_analysis_report",
        "class": "ReportGenerator",
        "module": "compareblocks.analytics.report_generator",
        "test_file": "tests/unit/test_report_generator.py",
        "description": "Generate a report focused on consensus decision analysis.",
        "parameters": [
          "self",
          "consensus_decisions"
        ]
      },
      {
        "function_name": "ReportGenerator.generate_engine_performance_report",
        "class": "ReportGenerator",
        "module": "compareblocks.analytics.report_generator",
        "test_file": "tests/unit/test_report_generator.py",
        "description": "Generate a report focused on engine performance.",
        "parameters": [
          "self",
          "engine_results"
        ]
      },
      {
        "function_name": "ReportGenerator.load_report",
        "class": "ReportGenerator",
        "module": "compareblocks.analytics.report_generator",
        "test_file": "tests/unit/test_report_generator.py",
        "description": "Load analytics report from file.",
        "parameters": [
          "self",
          "file_path"
        ]
      },
      {
        "function_name": "ReportGenerator.save_report",
        "class": "ReportGenerator",
        "module": "compareblocks.analytics.report_generator",
        "test_file": "tests/unit/test_report_generator.py",
        "description": "Save analytics report to file.",
        "parameters": [
          "self",
          "report",
          "output_path"
        ]
      },
      {
        "function_name": "generate_analytics_report",
        "class": null,
        "module": "compareblocks.analytics.report_generator",
        "test_file": "tests/unit/test_report_generator.py",
        "description": "Convenience function to generate a comprehensive analytics report.",
        "parameters": [
          "engine_results",
          "consensus_decisions",
          "variation_scores",
          "pdf_path"
        ]
      },
      {
        "function_name": "save_analytics_report",
        "class": null,
        "module": "compareblocks.analytics.report_generator",
        "test_file": "tests/unit/test_report_generator.py",
        "description": "Convenience function to save an analytics report.",
        "parameters": [
          "report",
          "output_path"
        ]
      }
    ],
    "src.compareblocks.io.writer": [
      {
        "function_name": "AnalyticsWriter.__init__",
        "class": "AnalyticsWriter",
        "module": "src.compareblocks.io.writer",
        "test_file": "tests/unit/test_io_validation.py",
        "description": "Initialize analytics writer with flexible schema validation",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "AnalyticsWriter.write_analytics_report",
        "class": "AnalyticsWriter",
        "module": "src.compareblocks.io.writer",
        "test_file": "tests/unit/test_io_validation.py",
        "description": "Write analytics report to NDJSON format",
        "parameters": [
          "self",
          "analytics_data: Dict[str, Any]",
          "file_path: Path",
          "overwrite: bool = False"
        ]
      },
      {
        "function_name": "NDJSONWriter.__init__",
        "class": "NDJSONWriter",
        "module": "src.compareblocks.io.writer",
        "test_file": "tests/unit/test_io_validation.py",
        "description": "Initialize NDJSON writer with optional output validation",
        "parameters": [
          "self",
          "validate_output: bool = True"
        ]
      },
      {
        "function_name": "NDJSONWriter._format_validation_error",
        "class": "NDJSONWriter",
        "module": "src.compareblocks.io.writer",
        "test_file": "tests/unit/test_io_validation.py",
        "description": "Format a jsonschema ValidationError into a clear error message",
        "parameters": [
          "self",
          "error: ValidationError"
        ]
      },
      {
        "function_name": "NDJSONWriter._normalize_consensus_record",
        "class": "NDJSONWriter",
        "module": "src.compareblocks.io.writer",
        "test_file": "tests/unit/test_io_validation.py",
        "description": "Normalize consensus record fields for consistent output",
        "parameters": [
          "self",
          "record: Dict[str, Any]"
        ]
      },
      {
        "function_name": "NDJSONWriter.validate_consensus_record",
        "class": "NDJSONWriter",
        "module": "src.compareblocks.io.writer",
        "test_file": "tests/unit/test_io_validation.py",
        "description": "Validate a consensus record against the output schema",
        "parameters": [
          "self",
          "record: Dict[str, Any]"
        ]
      },
      {
        "function_name": "NDJSONWriter.write_file",
        "class": "NDJSONWriter",
        "module": "src.compareblocks.io.writer",
        "test_file": "tests/unit/test_io_validation.py",
        "description": "Write consensus records to an NDJSON file",
        "parameters": [
          "self",
          "records: List[Dict[str, Any]]",
          "file_path",
          "overwrite: bool = False"
        ]
      },
      {
        "function_name": "NDJSONWriter.write_stream",
        "class": "NDJSONWriter",
        "module": "src.compareblocks.io.writer",
        "test_file": "tests/unit/test_io_validation.py",
        "description": "Write consensus records to a stream",
        "parameters": [
          "self",
          "records: List[Dict[str, Any]]",
          "stream: TextIO"
        ]
      },
      {
        "function_name": "write_analytics_file",
        "class": null,
        "module": "src.compareblocks.io.writer",
        "test_file": "tests/unit/test_io_validation.py",
        "description": "Convenience function to write analytics data to NDJSON file",
        "parameters": [
          "analytics_data: Dict[str, Any]",
          "file_path: Path",
          "overwrite: bool = False"
        ]
      },
      {
        "function_name": "write_consensus_file",
        "class": null,
        "module": "src.compareblocks.io.writer",
        "test_file": "tests/unit/test_io_validation.py",
        "description": "Convenience function to write consensus records to NDJSON file",
        "parameters": [
          "records: List[Dict[str, Any]]",
          "file_path: Path",
          "overwrite: bool = False"
        ]
      }
    ],
    "src.compareblocks.features.anomaly": [
      {
        "function_name": "AnomalyDetector.__init__",
        "class": "AnomalyDetector",
        "module": "src.compareblocks.features.anomaly",
        "test_file": "tests/unit/test_features_anomalies.py",
        "description": "Initialize the anomaly detector.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "AnomalyDetector.calculate_char_per_line_ratio",
        "class": "AnomalyDetector",
        "module": "src.compareblocks.features.anomaly",
        "test_file": "tests/unit/test_features_anomalies.py",
        "description": "Calculate average characters per line.",
        "parameters": [
          "self",
          "text"
        ]
      },
      {
        "function_name": "AnomalyDetector.calculate_digit_ratio",
        "class": "AnomalyDetector",
        "module": "src.compareblocks.features.anomaly",
        "test_file": "tests/unit/test_features_anomalies.py",
        "description": "Calculate ratio of digit characters to total characters.",
        "parameters": [
          "self",
          "text"
        ]
      },
      {
        "function_name": "AnomalyDetector.calculate_entropy",
        "class": "AnomalyDetector",
        "module": "src.compareblocks.features.anomaly",
        "test_file": "tests/unit/test_features_anomalies.py",
        "description": "Calculate Shannon entropy of text.",
        "parameters": [
          "self",
          "text"
        ]
      },
      {
        "function_name": "AnomalyDetector.calculate_repetition_score",
        "class": "AnomalyDetector",
        "module": "src.compareblocks.features.anomaly",
        "test_file": "tests/unit/test_features_anomalies.py",
        "description": "Calculate repetition score based on repeated patterns.",
        "parameters": [
          "self",
          "text"
        ]
      },
      {
        "function_name": "AnomalyDetector.calculate_space_ratio",
        "class": "AnomalyDetector",
        "module": "src.compareblocks.features.anomaly",
        "test_file": "tests/unit/test_features_anomalies.py",
        "description": "Calculate ratio of whitespace characters to total characters.",
        "parameters": [
          "self",
          "text"
        ]
      },
      {
        "function_name": "AnomalyDetector.calculate_special_char_ratio",
        "class": "AnomalyDetector",
        "module": "src.compareblocks.features.anomaly",
        "test_file": "tests/unit/test_features_anomalies.py",
        "description": "Calculate ratio of special characters (non-alphanumeric, non-space).",
        "parameters": [
          "self",
          "text"
        ]
      },
      {
        "function_name": "AnomalyDetector.detect_specific_patterns",
        "class": "AnomalyDetector",
        "module": "src.compareblocks.features.anomaly",
        "test_file": "tests/unit/test_features_anomalies.py",
        "description": "Detect specific anomaly patterns in text.",
        "parameters": [
          "self",
          "text"
        ]
      },
      {
        "function_name": "AnomalyDetector.extract_anomaly_features",
        "class": "AnomalyDetector",
        "module": "src.compareblocks.features.anomaly",
        "test_file": "tests/unit/test_features_anomalies.py",
        "description": "Extract anomaly detection features from text.",
        "parameters": [
          "self",
          "text"
        ]
      },
      {
        "function_name": "AnomalyDetector.extract_features_for_variations",
        "class": "AnomalyDetector",
        "module": "src.compareblocks.features.anomaly",
        "test_file": "tests/unit/test_features_anomalies.py",
        "description": "Extract anomaly features for multiple variations.",
        "parameters": [
          "self",
          "variations"
        ]
      },
      {
        "function_name": "AnomalyDetector.get_anomaly_statistics",
        "class": "AnomalyDetector",
        "module": "src.compareblocks.features.anomaly",
        "test_file": "tests/unit/test_features_anomalies.py",
        "description": "Get anomaly statistics for a set of variations.",
        "parameters": [
          "self",
          "variations"
        ]
      },
      {
        "function_name": "AnomalyDetector.is_anomalous",
        "class": "AnomalyDetector",
        "module": "src.compareblocks.features.anomaly",
        "test_file": "tests/unit/test_features_anomalies.py",
        "description": "Check if text is anomalous based on threshold.",
        "parameters": [
          "self",
          "text",
          "threshold"
        ]
      },
      {
        "function_name": "AnomalyDetector.rank_by_anomaly_score",
        "class": "AnomalyDetector",
        "module": "src.compareblocks.features.anomaly",
        "test_file": "tests/unit/test_features_anomalies.py",
        "description": "Rank variations by anomaly score (lower is better).",
        "parameters": [
          "self",
          "variations"
        ]
      },
      {
        "function_name": "calculate_entropy",
        "class": null,
        "module": "src.compareblocks.features.anomaly",
        "test_file": "tests/unit/test_features_anomalies.py",
        "description": "Calculate Shannon entropy of text.",
        "parameters": [
          "self",
          "text"
        ]
      },
      {
        "function_name": "extract_anomaly_features",
        "class": null,
        "module": "src.compareblocks.features.anomaly",
        "test_file": "tests/unit/test_features_anomalies.py",
        "description": "Extract anomaly detection features from text.",
        "parameters": [
          "self",
          "text"
        ]
      }
    ],
    "compareblocks.features.anomaly": [
      {
        "function_name": "AnomalyFeatures.to_dict",
        "class": "AnomalyFeatures",
        "module": "compareblocks.features.anomaly",
        "test_file": "tests/unit/test_anomaly.py",
        "description": "Convert features to dictionary format.",
        "parameters": [
          "self"
        ]
      }
    ],
    "compareblocks.association.manager": [
      {
        "function_name": "AssociationManager.__init__",
        "class": "AssociationManager",
        "module": "compareblocks.association.manager",
        "test_file": "tests/unit/test_manager.py",
        "description": "Initialize association manager.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "AssociationManager.get_association_summary",
        "class": "AssociationManager",
        "module": "compareblocks.association.manager",
        "test_file": "tests/unit/test_manager.py",
        "description": "Get summary of associations for a PDF.",
        "parameters": [
          "self",
          "pdf_path"
        ]
      },
      {
        "function_name": "AssociationManager.get_associations",
        "class": "AssociationManager",
        "module": "compareblocks.association.manager",
        "test_file": "tests/unit/test_manager.py",
        "description": "Get cached associations for a PDF.",
        "parameters": [
          "self",
          "pdf_path"
        ]
      },
      {
        "function_name": "AssociationManager.load_associations_for_pdf",
        "class": "AssociationManager",
        "module": "compareblocks.association.manager",
        "test_file": "tests/unit/test_manager.py",
        "description": "Load all associations for a PDF file.",
        "parameters": [
          "self",
          "pdf_path"
        ]
      },
      {
        "function_name": "AssociationManager.refresh_associations",
        "class": "AssociationManager",
        "module": "compareblocks.association.manager",
        "test_file": "tests/unit/test_manager.py",
        "description": "Refresh associations for a PDF (reload from disk).",
        "parameters": [
          "self",
          "pdf_path"
        ]
      },
      {
        "function_name": "track_association_metadata",
        "class": null,
        "module": "compareblocks.association.manager",
        "test_file": "tests/unit/test_manager.py",
        "description": "Convenience function to get association metadata.",
        "parameters": [
          "pdf_path"
        ]
      }
    ],
    "compareblocks.gui.app": [
      {
        "function_name": "BECRMainWindow.__init__",
        "class": "BECRMainWindow",
        "module": "compareblocks.gui.app",
        "test_file": "tests/unit/test_app.py",
        "description": "Function description",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "BECRMainWindow.add_pdf_configuration",
        "class": "BECRMainWindow",
        "module": "compareblocks.gui.app",
        "test_file": "tests/unit/test_app.py",
        "description": "Add PDF-specific configuration for an engine.",
        "parameters": [
          "self",
          "engine_name"
        ]
      },
      {
        "function_name": "BECRMainWindow.create_individual_config_files",
        "class": "BECRMainWindow",
        "module": "compareblocks.gui.app",
        "test_file": "tests/unit/test_app.py",
        "description": "Create individual configuration files for each engine.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "BECRMainWindow.setup_menus",
        "class": "BECRMainWindow",
        "module": "compareblocks.gui.app",
        "test_file": "tests/unit/test_app.py",
        "description": "Setup application menus.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "BECRMainWindow.setup_ui",
        "class": "BECRMainWindow",
        "module": "compareblocks.gui.app",
        "test_file": "tests/unit/test_app.py",
        "description": "Setup the main UI.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "BECRMainWindow.show_engine_statistics",
        "class": "BECRMainWindow",
        "module": "compareblocks.gui.app",
        "test_file": "tests/unit/test_app.py",
        "description": "Show comprehensive engine statistics.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "DebugImageWidget.__init__",
        "class": "DebugImageWidget",
        "module": "compareblocks.gui.app",
        "test_file": "tests/unit/test_app.py",
        "description": "Function description",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "DebugImageWidget.create_block_widget",
        "class": "DebugImageWidget",
        "module": "compareblocks.gui.app",
        "test_file": "tests/unit/test_app.py",
        "description": "Create a widget for displaying a single block's debug information.",
        "parameters": [
          "self",
          "region",
          "tesseract_results",
          "block_index"
        ]
      },
      {
        "function_name": "DebugImageWidget.create_image_label",
        "class": "DebugImageWidget",
        "module": "compareblocks.gui.app",
        "test_file": "tests/unit/test_app.py",
        "description": "Create a label widget for displaying an image.",
        "parameters": [
          "self",
          "image_path",
          "title",
          "max_size"
        ]
      },
      {
        "function_name": "DebugImageWidget.display_debug_results",
        "class": "DebugImageWidget",
        "module": "compareblocks.gui.app",
        "test_file": "tests/unit/test_app.py",
        "description": "Display the debug results in the UI.",
        "parameters": [
          "self",
          "result"
        ]
      },
      {
        "function_name": "DebugImageWidget.extract_debug_images",
        "class": "DebugImageWidget",
        "module": "compareblocks.gui.app",
        "test_file": "tests/unit/test_app.py",
        "description": "Extract debug images for the selected page.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "DebugImageWidget.load_tesseract_results",
        "class": "DebugImageWidget",
        "module": "compareblocks.gui.app",
        "test_file": "tests/unit/test_app.py",
        "description": "Load Tesseract results for the page.",
        "parameters": [
          "self",
          "page_num"
        ]
      },
      {
        "function_name": "DebugImageWidget.setup_ui",
        "class": "DebugImageWidget",
        "module": "compareblocks.gui.app",
        "test_file": "tests/unit/test_app.py",
        "description": "Setup the debug image UI.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "run_cli_mode",
        "class": null,
        "module": "compareblocks.gui.app",
        "test_file": "tests/unit/test_app.py",
        "description": "Run the CLI version of the application.",
        "parameters": []
      },
      {
        "function_name": "run_gui_mode",
        "class": null,
        "module": "compareblocks.gui.app",
        "test_file": "tests/unit/test_app.py",
        "description": "Run the GUI application.",
        "parameters": []
      }
    ],
    "compareblocks.gbg.ids": [
      {
        "function_name": "BlockIDGenerator.extract_coordinates_from_id_string",
        "class": "BlockIDGenerator",
        "module": "compareblocks.gbg.ids",
        "test_file": "tests/unit/test_ids.py",
        "description": "Extract page and normalized coordinates from the ID string (for debugging).",
        "parameters": [
          "id_string"
        ]
      },
      {
        "function_name": "BlockIDGenerator.generate_block_id",
        "class": "BlockIDGenerator",
        "module": "compareblocks.gbg.ids",
        "test_file": "tests/unit/test_ids.py",
        "description": "Generate a stable block ID using hash of page number and normalized coordinates.",
        "parameters": [
          "page",
          "bbox",
          "page_width",
          "page_height"
        ]
      },
      {
        "function_name": "BlockIDGenerator.validate_block_id",
        "class": "BlockIDGenerator",
        "module": "compareblocks.gbg.ids",
        "test_file": "tests/unit/test_ids.py",
        "description": "Validate that a block ID follows the expected format.",
        "parameters": [
          "block_id"
        ]
      }
    ],
    "src.compareblocks.gbg.types": [
      {
        "function_name": "BoundingBox.__post_init__",
        "class": "BoundingBox",
        "module": "src.compareblocks.gbg.types",
        "test_file": "tests/unit/test_mapping_iou.py",
        "description": "Validate bounding box coordinates ensuring width/height are positive and coordinates are non-negative",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "BoundingBox.area",
        "class": "BoundingBox",
        "module": "src.compareblocks.gbg.types",
        "test_file": "tests/unit/test_mapping_iou.py",
        "description": "Calculate the area of the bounding box",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "BoundingBox.center",
        "class": "BoundingBox",
        "module": "src.compareblocks.gbg.types",
        "test_file": "tests/unit/test_mapping_iou.py",
        "description": "Get the center point of the bounding box",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "BoundingBox.normalize_coordinates",
        "class": "BoundingBox",
        "module": "src.compareblocks.gbg.types",
        "test_file": "tests/unit/test_io_validation.py",
        "description": "Normalize coordinates to 0-1 range based on page dimensions",
        "parameters": [
          "self",
          "page_width: float",
          "page_height: float"
        ]
      },
      {
        "function_name": "OrientationHints.__post_init__",
        "class": "OrientationHints",
        "module": "src.compareblocks.gbg.types",
        "test_file": "tests/unit/test_io_validation.py",
        "description": "Validate orientation hints ensuring confidence is between 0 and 1",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "SeedBlock.__post_init__",
        "class": "SeedBlock",
        "module": "src.compareblocks.gbg.types",
        "test_file": "tests/integration/test_gbg_seed.py",
        "description": "Validate seed block data ensuring page number is non-negative and block ID is not empty",
        "parameters": [
          "self"
        ]
      }
    ],
    "compareblocks.association.parsers": [
      {
        "function_name": "CSVParser.get_format_type",
        "class": "CSVParser",
        "module": "compareblocks.association.parsers",
        "test_file": "tests/unit/test_parsers.py",
        "description": "Function description",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "CSVParser.parse",
        "class": "CSVParser",
        "module": "compareblocks.association.parsers",
        "test_file": "tests/unit/test_parsers.py",
        "description": "Parse CSV content and extract tabular data.",
        "parameters": [
          "self",
          "content",
          "file_path"
        ]
      },
      {
        "function_name": "FormatParser.get_format_type",
        "class": "FormatParser",
        "module": "compareblocks.association.parsers",
        "test_file": "tests/unit/test_parsers.py",
        "description": "Return the format type this parser handles.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "FormatParser.parse",
        "class": "FormatParser",
        "module": "compareblocks.association.parsers",
        "test_file": "tests/unit/test_parsers.py",
        "description": "Parse content and extract meaningful text.",
        "parameters": [
          "self",
          "content",
          "file_path"
        ]
      },
      {
        "function_name": "HTMLParser.get_format_type",
        "class": "HTMLParser",
        "module": "compareblocks.association.parsers",
        "test_file": "tests/unit/test_parsers.py",
        "description": "Function description",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "HTMLParser.parse",
        "class": "HTMLParser",
        "module": "compareblocks.association.parsers",
        "test_file": "tests/unit/test_parsers.py",
        "description": "Parse HTML content and extract meaningful text.",
        "parameters": [
          "self",
          "content",
          "file_path"
        ]
      },
      {
        "function_name": "JSONParser.get_format_type",
        "class": "JSONParser",
        "module": "compareblocks.association.parsers",
        "test_file": "tests/unit/test_parsers.py",
        "description": "Function description",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "JSONParser.parse",
        "class": "JSONParser",
        "module": "compareblocks.association.parsers",
        "test_file": "tests/unit/test_parsers.py",
        "description": "Parse JSON content and extract structured data.",
        "parameters": [
          "self",
          "content",
          "file_path"
        ]
      },
      {
        "function_name": "MarkdownParser.get_format_type",
        "class": "MarkdownParser",
        "module": "compareblocks.association.parsers",
        "test_file": "tests/unit/test_parsers.py",
        "description": "Function description",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "MarkdownParser.parse",
        "class": "MarkdownParser",
        "module": "compareblocks.association.parsers",
        "test_file": "tests/unit/test_parsers.py",
        "description": "Parse Markdown content and extract structured text.",
        "parameters": [
          "self",
          "content",
          "file_path"
        ]
      },
      {
        "function_name": "TextParser.get_format_type",
        "class": "TextParser",
        "module": "compareblocks.association.parsers",
        "test_file": "tests/unit/test_parsers.py",
        "description": "Function description",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "TextParser.parse",
        "class": "TextParser",
        "module": "compareblocks.association.parsers",
        "test_file": "tests/unit/test_parsers.py",
        "description": "Parse plain text content.",
        "parameters": [
          "self",
          "content",
          "file_path"
        ]
      },
      {
        "function_name": "detect_format",
        "class": null,
        "module": "compareblocks.association.parsers",
        "test_file": "tests/unit/test_parsers.py",
        "description": "Detect format from file extension.",
        "parameters": [
          "file_path"
        ]
      },
      {
        "function_name": "get_available_parsers",
        "class": null,
        "module": "compareblocks.association.parsers",
        "test_file": "tests/unit/test_parsers.py",
        "description": "Get all available parsers.",
        "parameters": []
      },
      {
        "function_name": "parse_association_file",
        "class": null,
        "module": "compareblocks.association.parsers",
        "test_file": "tests/unit/test_parsers.py",
        "description": "Parse an association file using the appropriate format parser.",
        "parameters": [
          "file_path",
          "content"
        ]
      },
      {
        "function_name": "register_parser",
        "class": null,
        "module": "compareblocks.association.parsers",
        "test_file": "tests/unit/test_parsers.py",
        "description": "Register a new parser for a format type.",
        "parameters": [
          "format_type",
          "parser"
        ]
      }
    ],
    "functions.enhance_catalog_fields": [
      {
        "function_name": "CatalogFieldEnhancer.add_performance_attributes",
        "class": "CatalogFieldEnhancer",
        "module": "functions.enhance_catalog_fields",
        "test_file": "tests/unit/test_catalog_enhancement.py",
        "description": "Add performance-related attributes",
        "parameters": [
          "self",
          "func_entry: Dict[str, Any]"
        ]
      },
      {
        "function_name": "CatalogFieldEnhancer.analyze_function_signature",
        "class": "CatalogFieldEnhancer",
        "module": "functions.enhance_catalog_fields",
        "test_file": "tests/unit/test_catalog_enhancement.py",
        "description": "Analyze function signature to extract parameter information",
        "parameters": [
          "self",
          "func_entry: Dict[str, Any]"
        ]
      },
      {
        "function_name": "CatalogFieldEnhancer.enhance_function_entry",
        "class": "CatalogFieldEnhancer",
        "module": "functions.enhance_catalog_fields",
        "test_file": "tests/unit/test_catalog_enhancement.py",
        "description": "Enhance a single function entry with comprehensive field attributes",
        "parameters": [
          "self",
          "func_entry: Dict[str, Any]"
        ]
      },
      {
        "function_name": "CatalogFieldEnhancer.enhance_return_value_attributes",
        "class": "CatalogFieldEnhancer",
        "module": "functions.enhance_catalog_fields",
        "test_file": "tests/unit/test_catalog_enhancement.py",
        "description": "Enhance return value attributes based on return type and function purpose",
        "parameters": [
          "self",
          "func_entry: Dict[str, Any]"
        ]
      },
      {
        "function_name": "CatalogFieldEnhancer.infer_dependencies",
        "class": "CatalogFieldEnhancer",
        "module": "functions.enhance_catalog_fields",
        "test_file": "tests/unit/test_catalog_enhancement.py",
        "description": "Infer dependencies based on function characteristics",
        "parameters": [
          "self",
          "func_entry: Dict[str, Any]"
        ]
      },
      {
        "function_name": "CatalogFieldEnhancer.infer_side_effects",
        "class": "CatalogFieldEnhancer",
        "module": "functions.enhance_catalog_fields",
        "test_file": "tests/unit/test_catalog_enhancement.py",
        "description": "Infer side effects based on function characteristics",
        "parameters": [
          "self",
          "func_entry: Dict[str, Any]"
        ]
      },
      {
        "function_name": "CatalogFieldEnhancer.needs_enhancement",
        "class": "CatalogFieldEnhancer",
        "module": "functions.enhance_catalog_fields",
        "test_file": "tests/unit/test_catalog_enhancement.py",
        "description": "Check if function entry needs field enhancement",
        "parameters": [
          "self",
          "func_entry: Dict[str, Any]"
        ]
      },
      {
        "function_name": "CatalogFieldEnhancer.process_catalog",
        "class": "CatalogFieldEnhancer",
        "module": "functions.enhance_catalog_fields",
        "test_file": "tests/unit/test_catalog_enhancement.py",
        "description": "Process the entire function catalog",
        "parameters": [
          "self",
          "catalog_path: Path"
        ]
      }
    ],
    "src.compareblocks.features.consistency": [
      {
        "function_name": "CharacterConsistency.to_dict",
        "class": "CharacterConsistency",
        "module": "src.compareblocks.features.consistency",
        "test_file": "tests/integration/test_consistency.py",
        "description": "Convert to dictionary format.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "CharacterConsistencyTracker.add_override_terms",
        "class": "CharacterConsistencyTracker",
        "module": "src.compareblocks.features.consistency",
        "test_file": "tests/integration/test_consistency.py",
        "description": "Add terms where consistency trumps spelling.",
        "parameters": [
          "self",
          "terms: Any"
        ]
      },
      {
        "function_name": "CharacterConsistencyTracker.calculate_character_consistency",
        "class": "CharacterConsistencyTracker",
        "module": "src.compareblocks.features.consistency",
        "test_file": "tests/integration/test_consistency.py",
        "description": "Calculate character-by-character consistency across variations for a single block.",
        "parameters": [
          "self",
          "variations: Any",
          "normalize_for_comparison: Any",
          "include_multiple_methods: Any"
        ]
      },
      {
        "function_name": "CharacterConsistencyTracker.calculate_spelling_accuracy",
        "class": "CharacterConsistencyTracker",
        "module": "src.compareblocks.features.consistency",
        "test_file": "tests/integration/test_consistency.py",
        "description": "Calculate spelling accuracy score based on word consistency.",
        "parameters": [
          "self",
          "word_details: Any"
        ]
      },
      {
        "function_name": "CharacterConsistencyTracker.calculate_word_consistency",
        "class": "CharacterConsistencyTracker",
        "module": "src.compareblocks.features.consistency",
        "test_file": "tests/integration/test_consistency.py",
        "description": "Calculate word-level consistency with spelling accuracy.",
        "parameters": [
          "self",
          "variations: Any"
        ]
      },
      {
        "function_name": "CharacterConsistencyTracker.is_override_term",
        "class": "CharacterConsistencyTracker",
        "module": "src.compareblocks.features.consistency",
        "test_file": "tests/integration/test_consistency.py",
        "description": "Check if word is an override term (acronym/domain term).",
        "parameters": [
          "self",
          "word: Any"
        ]
      },
      {
        "function_name": "CharacterConsistencyTracker.track_consistency_for_block",
        "class": "CharacterConsistencyTracker",
        "module": "src.compareblocks.features.consistency",
        "test_file": "tests/integration/test_consistency.py",
        "description": "Track comprehensive consistency metrics for a block.",
        "parameters": [
          "self",
          "block_id: Any",
          "variations: Any"
        ]
      },
      {
        "function_name": "CharacterConsistencyTracker.track_consistency_for_block_with_context",
        "class": "CharacterConsistencyTracker",
        "module": "src.compareblocks.features.consistency",
        "test_file": "tests/integration/test_consistency.py",
        "description": "Track consistency for a block with optional surrounding block context.",
        "parameters": [
          "self",
          "block_id: Any",
          "variations: Any",
          "surrounding_blocks: Any"
        ]
      },
      {
        "function_name": "CharacterConsistencyTracker.update_consistency_with_new_files",
        "class": "CharacterConsistencyTracker",
        "module": "src.compareblocks.features.consistency",
        "test_file": "tests/integration/test_consistency.py",
        "description": "Update consistency metrics when new associated files are added.",
        "parameters": [
          "self",
          "existing_consistency: Any",
          "new_variations: Any"
        ]
      },
      {
        "function_name": "ConsistencyOverrideManager.add_acronyms",
        "class": "ConsistencyOverrideManager",
        "module": "src.compareblocks.features.consistency",
        "test_file": "tests/integration/test_consistency.py",
        "description": "Add known acronyms.",
        "parameters": [
          "self",
          "acronyms: Any"
        ]
      },
      {
        "function_name": "ConsistencyOverrideManager.add_custom_overrides",
        "class": "ConsistencyOverrideManager",
        "module": "src.compareblocks.features.consistency",
        "test_file": "tests/integration/test_consistency.py",
        "description": "Add custom override terms.",
        "parameters": [
          "self",
          "terms: Any"
        ]
      },
      {
        "function_name": "ConsistencyOverrideManager.add_domain_terms",
        "class": "ConsistencyOverrideManager",
        "module": "src.compareblocks.features.consistency",
        "test_file": "tests/integration/test_consistency.py",
        "description": "Add domain-specific terms.",
        "parameters": [
          "self",
          "terms: Any"
        ]
      },
      {
        "function_name": "ConsistencyOverrideManager.get_all_override_terms",
        "class": "ConsistencyOverrideManager",
        "module": "src.compareblocks.features.consistency",
        "test_file": "tests/integration/test_consistency.py",
        "description": "Get all override terms.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "ConsistencyOverrideManager.should_override_spelling",
        "class": "ConsistencyOverrideManager",
        "module": "src.compareblocks.features.consistency",
        "test_file": "tests/integration/test_consistency.py",
        "description": "Determine if consistency should trump spelling for a word.",
        "parameters": [
          "self",
          "word: Any",
          "consistency_score: Any",
          "spelling_score: Any"
        ]
      },
      {
        "function_name": "calculate_block_consistency_for_json",
        "class": null,
        "module": "src.compareblocks.features.consistency",
        "test_file": "tests/integration/test_consistency.py",
        "description": "Calculate consistency metrics for a block formatted for JSON output.",
        "parameters": [
          "block_id: Any",
          "variations: Any",
          "override_terms: Any",
          "normalize_for_comparison: Any"
        ]
      },
      {
        "function_name": "track_character_consistency",
        "class": null,
        "module": "src.compareblocks.features.consistency",
        "test_file": "tests/integration/test_consistency.py",
        "description": "Convenience function to track character consistency for a block.",
        "parameters": [
          "block_id: Any",
          "variations: Any",
          "override_terms: Any"
        ]
      }
    ],
    "compareblocks.engines.comprehensive_engine_gbg_processor": [
      {
        "function_name": "ComprehensiveEngineGBGProcessor.__init__",
        "class": "ComprehensiveEngineGBGProcessor",
        "module": "compareblocks.engines.comprehensive_engine_gbg_processor",
        "test_file": "tests/unit/test_comprehensive_engine_gbg_processor.py",
        "description": "Initialize the comprehensive processor.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "ComprehensiveEngineGBGProcessor.check_existing_extraction_results",
        "class": "ComprehensiveEngineGBGProcessor",
        "module": "compareblocks.engines.comprehensive_engine_gbg_processor",
        "test_file": "tests/unit/test_comprehensive_engine_gbg_processor.py",
        "description": "Check if extraction results already exist for this engine and configuration.",
        "parameters": [
          "self",
          "engine_name",
          "config_result",
          "pdf_path"
        ]
      },
      {
        "function_name": "ComprehensiveEngineGBGProcessor.check_existing_results",
        "class": "ComprehensiveEngineGBGProcessor",
        "module": "compareblocks.engines.comprehensive_engine_gbg_processor",
        "test_file": "tests/unit/test_comprehensive_engine_gbg_processor.py",
        "description": "Check for existing results with same engine and configuration.",
        "parameters": [
          "self",
          "gbg_analysis",
          "engine_name",
          "config_hash"
        ]
      },
      {
        "function_name": "ComprehensiveEngineGBGProcessor.create_processing_summary",
        "class": "ComprehensiveEngineGBGProcessor",
        "module": "compareblocks.engines.comprehensive_engine_gbg_processor",
        "test_file": "tests/unit/test_comprehensive_engine_gbg_processor.py",
        "description": "Create processing summary.",
        "parameters": [
          "self",
          "engine_results",
          "total_time"
        ]
      },
      {
        "function_name": "ComprehensiveEngineGBGProcessor.enhance_engine_output_with_configuration",
        "class": "ComprehensiveEngineGBGProcessor",
        "module": "compareblocks.engines.comprehensive_engine_gbg_processor",
        "test_file": "tests/unit/test_comprehensive_engine_gbg_processor.py",
        "description": "Enhance engine output file with configuration metadata.",
        "parameters": [
          "self",
          "output_path",
          "config_result",
          "processing_time"
        ]
      },
      {
        "function_name": "ComprehensiveEngineGBGProcessor.enhance_output_with_configuration_metadata",
        "class": "ComprehensiveEngineGBGProcessor",
        "module": "compareblocks.engines.comprehensive_engine_gbg_processor",
        "test_file": "tests/unit/test_comprehensive_engine_gbg_processor.py",
        "description": "Enhance engine output file with configuration metadata.",
        "parameters": [
          "self",
          "output_path",
          "configuration",
          "config_hash",
          "processing_timestamp"
        ]
      },
      {
        "function_name": "ComprehensiveEngineGBGProcessor.generate_config_hash",
        "class": "ComprehensiveEngineGBGProcessor",
        "module": "compareblocks.engines.comprehensive_engine_gbg_processor",
        "test_file": "tests/unit/test_comprehensive_engine_gbg_processor.py",
        "description": "Generate hash for configuration to detect duplicates.",
        "parameters": [
          "self",
          "configuration"
        ]
      },
      {
        "function_name": "ComprehensiveEngineGBGProcessor.get_available_engines",
        "class": "ComprehensiveEngineGBGProcessor",
        "module": "compareblocks.engines.comprehensive_engine_gbg_processor",
        "test_file": "tests/unit/test_comprehensive_engine_gbg_processor.py",
        "description": "Get list of available extraction engines.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "ComprehensiveEngineGBGProcessor.get_configuration_hash",
        "class": "ComprehensiveEngineGBGProcessor",
        "module": "compareblocks.engines.comprehensive_engine_gbg_processor",
        "test_file": "tests/unit/test_comprehensive_engine_gbg_processor.py",
        "description": "Generate hash for configuration to detect duplicates.",
        "parameters": [
          "self",
          "configuration"
        ]
      },
      {
        "function_name": "ComprehensiveEngineGBGProcessor.get_engine_configuration",
        "class": "ComprehensiveEngineGBGProcessor",
        "module": "compareblocks.engines.comprehensive_engine_gbg_processor",
        "test_file": "tests/unit/test_comprehensive_engine_gbg_processor.py",
        "description": "Get optimized or default configuration for an engine.",
        "parameters": [
          "self",
          "engine_name",
          "pdf_path"
        ]
      },
      {
        "function_name": "ComprehensiveEngineGBGProcessor.get_pdf_hash_for_configuration",
        "class": "ComprehensiveEngineGBGProcessor",
        "module": "compareblocks.engines.comprehensive_engine_gbg_processor",
        "test_file": "tests/unit/test_comprehensive_engine_gbg_processor.py",
        "description": "Get PDF hash for configuration lookup.",
        "parameters": [
          "self",
          "pdf_path"
        ]
      },
      {
        "function_name": "ComprehensiveEngineGBGProcessor.load_existing_gbg_analysis",
        "class": "ComprehensiveEngineGBGProcessor",
        "module": "compareblocks.engines.comprehensive_engine_gbg_processor",
        "test_file": "tests/unit/test_comprehensive_engine_gbg_processor.py",
        "description": "Load existing GBG analysis file.",
        "parameters": [
          "self",
          "gbg_analysis_path"
        ]
      },
      {
        "function_name": "ComprehensiveEngineGBGProcessor.process_all_engines_comprehensive",
        "class": "ComprehensiveEngineGBGProcessor",
        "module": "compareblocks.engines.comprehensive_engine_gbg_processor",
        "test_file": "tests/unit/test_comprehensive_engine_gbg_processor.py",
        "description": "Process all available engines with optimized configurations and integrate into GBG analysis.",
        "parameters": [
          "self",
          "pdf_path",
          "gbg_analysis_path",
          "overwrite_mode"
        ]
      },
      {
        "function_name": "ComprehensiveEngineGBGProcessor.process_engine_with_configuration",
        "class": "ComprehensiveEngineGBGProcessor",
        "module": "compareblocks.engines.comprehensive_engine_gbg_processor",
        "test_file": "tests/unit/test_comprehensive_engine_gbg_processor.py",
        "description": "Process a single engine with its configuration.",
        "parameters": [
          "self",
          "engine_name",
          "config_result",
          "pdf_path",
          "overwrite_mode"
        ]
      },
      {
        "function_name": "ComprehensiveEngineGBGProcessor.process_specific_engines",
        "class": "ComprehensiveEngineGBGProcessor",
        "module": "compareblocks.engines.comprehensive_engine_gbg_processor",
        "test_file": "tests/unit/test_comprehensive_engine_gbg_processor.py",
        "description": "Process specific engines with optimized configurations.",
        "parameters": [
          "self",
          "engine_names",
          "pdf_path",
          "gbg_analysis_path",
          "overwrite_mode"
        ]
      },
      {
        "function_name": "ComprehensiveEngineGBGProcessor.save_updated_gbg_analysis",
        "class": "ComprehensiveEngineGBGProcessor",
        "module": "compareblocks.engines.comprehensive_engine_gbg_processor",
        "test_file": "tests/unit/test_comprehensive_engine_gbg_processor.py",
        "description": "Save updated GBG analysis to file.",
        "parameters": [
          "self",
          "gbg_analysis",
          "output_path"
        ]
      },
      {
        "function_name": "ComprehensiveEngineGBGProcessor.should_process_engine",
        "class": "ComprehensiveEngineGBGProcessor",
        "module": "compareblocks.engines.comprehensive_engine_gbg_processor",
        "test_file": "tests/unit/test_comprehensive_engine_gbg_processor.py",
        "description": "Determine if engine should be processed based on overwrite mode and existing results.",
        "parameters": [
          "self",
          "engine_name",
          "overwrite_mode",
          "existing_found",
          "existing_path"
        ]
      },
      {
        "function_name": "ComprehensiveEngineGBGProcessor.should_skip_processing",
        "class": "ComprehensiveEngineGBGProcessor",
        "module": "compareblocks.engines.comprehensive_engine_gbg_processor",
        "test_file": "tests/unit/test_comprehensive_engine_gbg_processor.py",
        "description": "Determine if processing should be skipped based on existing results and overwrite mode.",
        "parameters": [
          "self",
          "gbg_analysis",
          "engine_name",
          "config_hash"
        ]
      },
      {
        "function_name": "ComprehensiveEngineGBGProcessor.update_gbg_analysis_with_engine_results",
        "class": "ComprehensiveEngineGBGProcessor",
        "module": "compareblocks.engines.comprehensive_engine_gbg_processor",
        "test_file": "tests/unit/test_comprehensive_engine_gbg_processor.py",
        "description": "Update GBG analysis with engine results.",
        "parameters": [
          "self",
          "gbg_analysis",
          "engine_results"
        ]
      },
      {
        "function_name": "ComprehensiveEngineGBGProcessor.validate_gbg_analysis_structure",
        "class": "ComprehensiveEngineGBGProcessor",
        "module": "compareblocks.engines.comprehensive_engine_gbg_processor",
        "test_file": "tests/unit/test_comprehensive_engine_gbg_processor.py",
        "description": "Validate GBG analysis structure.",
        "parameters": [
          "self",
          "analysis"
        ]
      },
      {
        "function_name": "get_available_engines_for_gbg_integration",
        "class": null,
        "module": "compareblocks.engines.comprehensive_engine_gbg_processor",
        "test_file": "tests/unit/test_comprehensive_engine_gbg_processor.py",
        "description": "Get list of available engines for GBG integration.",
        "parameters": []
      },
      {
        "function_name": "process_all_engines_with_gbg_integration",
        "class": null,
        "module": "compareblocks.engines.comprehensive_engine_gbg_processor",
        "test_file": "tests/unit/test_comprehensive_engine_gbg_processor.py",
        "description": "Process all engines with optimized configurations and integrate into GBG analysis.",
        "parameters": [
          "pdf_path",
          "gbg_analysis_path"
        ]
      }
    ],
    "compareblocks.gui.config_forms": [
      {
        "function_name": "ConfigurationManagerWidget.__init__",
        "class": "ConfigurationManagerWidget",
        "module": "compareblocks.gui.config_forms",
        "test_file": "tests/unit/test_config_forms.py",
        "description": "Function description",
        "parameters": [
          "self",
          "config_manager"
        ]
      },
      {
        "function_name": "ConfigurationManagerWidget.add_pdf_override_tab",
        "class": "ConfigurationManagerWidget",
        "module": "compareblocks.gui.config_forms",
        "test_file": "tests/unit/test_config_forms.py",
        "description": "Add a tab for PDF-specific overrides.",
        "parameters": [
          "self",
          "engine_name",
          "pdf_path"
        ]
      },
      {
        "function_name": "ConfigurationManagerWidget.on_configuration_changed",
        "class": "ConfigurationManagerWidget",
        "module": "compareblocks.gui.config_forms",
        "test_file": "tests/unit/test_config_forms.py",
        "description": "Handle configuration changes.",
        "parameters": [
          "self",
          "engine_name",
          "settings"
        ]
      },
      {
        "function_name": "ConfigurationManagerWidget.on_override_created",
        "class": "ConfigurationManagerWidget",
        "module": "compareblocks.gui.config_forms",
        "test_file": "tests/unit/test_config_forms.py",
        "description": "Handle PDF override creation.",
        "parameters": [
          "self",
          "engine_name",
          "pdf_path",
          "overrides"
        ]
      },
      {
        "function_name": "ConfigurationManagerWidget.on_proposal_approved",
        "class": "ConfigurationManagerWidget",
        "module": "compareblocks.gui.config_forms",
        "test_file": "tests/unit/test_config_forms.py",
        "description": "Handle proposal approval.",
        "parameters": [
          "self",
          "proposal_id"
        ]
      },
      {
        "function_name": "ConfigurationManagerWidget.on_proposal_rejected",
        "class": "ConfigurationManagerWidget",
        "module": "compareblocks.gui.config_forms",
        "test_file": "tests/unit/test_config_forms.py",
        "description": "Handle proposal rejection.",
        "parameters": [
          "self",
          "proposal_id"
        ]
      },
      {
        "function_name": "ConfigurationManagerWidget.setup_ui",
        "class": "ConfigurationManagerWidget",
        "module": "compareblocks.gui.config_forms",
        "test_file": "tests/unit/test_config_forms.py",
        "description": "Setup the main configuration management UI.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "EngineConfigurationForm.__init__",
        "class": "EngineConfigurationForm",
        "module": "compareblocks.gui.config_forms",
        "test_file": "tests/unit/test_config_forms.py",
        "description": "Function description",
        "parameters": [
          "self",
          "config_manager",
          "engine_name"
        ]
      },
      {
        "function_name": "EngineConfigurationForm.apply_changes",
        "class": "EngineConfigurationForm",
        "module": "compareblocks.gui.config_forms",
        "test_file": "tests/unit/test_config_forms.py",
        "description": "Apply configuration changes.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "EngineConfigurationForm.load_configuration",
        "class": "EngineConfigurationForm",
        "module": "compareblocks.gui.config_forms",
        "test_file": "tests/unit/test_config_forms.py",
        "description": "Load current configuration for the engine.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "EngineConfigurationForm.reset_to_defaults",
        "class": "EngineConfigurationForm",
        "module": "compareblocks.gui.config_forms",
        "test_file": "tests/unit/test_config_forms.py",
        "description": "Reset all parameters to default values.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "EngineConfigurationForm.setup_ui",
        "class": "EngineConfigurationForm",
        "module": "compareblocks.gui.config_forms",
        "test_file": "tests/unit/test_config_forms.py",
        "description": "Setup the configuration form UI.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "OptimizationProposalWidget.__init__",
        "class": "OptimizationProposalWidget",
        "module": "compareblocks.gui.config_forms",
        "test_file": "tests/unit/test_config_forms.py",
        "description": "Function description",
        "parameters": [
          "self",
          "config_manager"
        ]
      },
      {
        "function_name": "OptimizationProposalWidget.approve_proposal",
        "class": "OptimizationProposalWidget",
        "module": "compareblocks.gui.config_forms",
        "test_file": "tests/unit/test_config_forms.py",
        "description": "Approve an optimization proposal.",
        "parameters": [
          "self",
          "proposal_id"
        ]
      },
      {
        "function_name": "OptimizationProposalWidget.load_proposals",
        "class": "OptimizationProposalWidget",
        "module": "compareblocks.gui.config_forms",
        "test_file": "tests/unit/test_config_forms.py",
        "description": "Load optimization proposals from configuration.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "OptimizationProposalWidget.reject_proposal",
        "class": "OptimizationProposalWidget",
        "module": "compareblocks.gui.config_forms",
        "test_file": "tests/unit/test_config_forms.py",
        "description": "Reject an optimization proposal.",
        "parameters": [
          "self",
          "proposal_id"
        ]
      },
      {
        "function_name": "OptimizationProposalWidget.setup_ui",
        "class": "OptimizationProposalWidget",
        "module": "compareblocks.gui.config_forms",
        "test_file": "tests/unit/test_config_forms.py",
        "description": "Setup the optimization proposal UI.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "OptimizationProposalWidget.show_proposal_details",
        "class": "OptimizationProposalWidget",
        "module": "compareblocks.gui.config_forms",
        "test_file": "tests/unit/test_config_forms.py",
        "description": "Show detailed information about a proposal.",
        "parameters": [
          "self",
          "proposal"
        ]
      },
      {
        "function_name": "PDFOverrideForm.__init__",
        "class": "PDFOverrideForm",
        "module": "compareblocks.gui.config_forms",
        "test_file": "tests/unit/test_config_forms.py",
        "description": "Function description",
        "parameters": [
          "self",
          "config_manager",
          "engine_name",
          "pdf_path"
        ]
      },
      {
        "function_name": "PDFOverrideForm.add_override_parameter",
        "class": "PDFOverrideForm",
        "module": "compareblocks.gui.config_forms",
        "test_file": "tests/unit/test_config_forms.py",
        "description": "Add a new override parameter.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "PDFOverrideForm.add_override_widget",
        "class": "PDFOverrideForm",
        "module": "compareblocks.gui.config_forms",
        "test_file": "tests/unit/test_config_forms.py",
        "description": "Add widget for override parameter.",
        "parameters": [
          "self",
          "param_name",
          "value"
        ]
      },
      {
        "function_name": "PDFOverrideForm.get_override_values",
        "class": "PDFOverrideForm",
        "module": "compareblocks.gui.config_forms",
        "test_file": "tests/unit/test_config_forms.py",
        "description": "Get current override values from widgets.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "PDFOverrideForm.load_current_overrides",
        "class": "PDFOverrideForm",
        "module": "compareblocks.gui.config_forms",
        "test_file": "tests/unit/test_config_forms.py",
        "description": "Load current PDF-specific overrides.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "PDFOverrideForm.remove_override_widget",
        "class": "PDFOverrideForm",
        "module": "compareblocks.gui.config_forms",
        "test_file": "tests/unit/test_config_forms.py",
        "description": "Remove override parameter widget.",
        "parameters": [
          "self",
          "param_name"
        ]
      },
      {
        "function_name": "PDFOverrideForm.save_overrides",
        "class": "PDFOverrideForm",
        "module": "compareblocks.gui.config_forms",
        "test_file": "tests/unit/test_config_forms.py",
        "description": "Save PDF-specific overrides.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "PDFOverrideForm.setup_ui",
        "class": "PDFOverrideForm",
        "module": "compareblocks.gui.config_forms",
        "test_file": "tests/unit/test_config_forms.py",
        "description": "Setup the PDF override form UI.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "PDFOverrideForm.update_effective_config_display",
        "class": "PDFOverrideForm",
        "module": "compareblocks.gui.config_forms",
        "test_file": "tests/unit/test_config_forms.py",
        "description": "Update the effective configuration display.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "ParameterWidget.__init__",
        "class": "ParameterWidget",
        "module": "compareblocks.gui.config_forms",
        "test_file": "tests/unit/test_config_forms.py",
        "description": "Function description",
        "parameters": [
          "self",
          "parameter",
          "current_value"
        ]
      },
      {
        "function_name": "ParameterWidget.get_value",
        "class": "ParameterWidget",
        "module": "compareblocks.gui.config_forms",
        "test_file": "tests/unit/test_config_forms.py",
        "description": "Get the current value of the parameter.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "ParameterWidget.set_value",
        "class": "ParameterWidget",
        "module": "compareblocks.gui.config_forms",
        "test_file": "tests/unit/test_config_forms.py",
        "description": "Set the current value of the parameter.",
        "parameters": [
          "self",
          "value"
        ]
      },
      {
        "function_name": "ParameterWidget.setup_ui",
        "class": "ParameterWidget",
        "module": "compareblocks.gui.config_forms",
        "test_file": "tests/unit/test_config_forms.py",
        "description": "Setup the parameter editing UI.",
        "parameters": [
          "self"
        ]
      }
    ],
    "src.compareblocks.consensus.policy": [
      {
        "function_name": "ConsensusDecision.to_dict",
        "class": "ConsensusDecision",
        "module": "src.compareblocks.consensus.policy",
        "test_file": "tests/unit/test_consensus_policy.py",
        "description": "Convert to dictionary format.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "DecisionPolicyEngine.__init__",
        "class": "DecisionPolicyEngine",
        "module": "src.compareblocks.consensus.policy",
        "test_file": "tests/unit/test_consensus_policy.py",
        "description": "Initialize the decision policy engine.",
        "parameters": [
          "self",
          "guard",
          "policy_thresholds"
        ]
      },
      {
        "function_name": "DecisionPolicyEngine.batch_decisions",
        "class": "DecisionPolicyEngine",
        "module": "src.compareblocks.consensus.policy",
        "test_file": "tests/unit/test_consensus_policy.py",
        "description": "Make decisions for multiple batches of variations.",
        "parameters": [
          "self",
          "variation_batches",
          "context_texts"
        ]
      },
      {
        "function_name": "DecisionPolicyEngine.get_decision_statistics",
        "class": "DecisionPolicyEngine",
        "module": "src.compareblocks.consensus.policy",
        "test_file": "tests/unit/test_consensus_policy.py",
        "description": "Get statistics for a set of decisions.",
        "parameters": [
          "self",
          "decisions"
        ]
      },
      {
        "function_name": "DecisionPolicyEngine.get_policy_configuration",
        "class": "DecisionPolicyEngine",
        "module": "src.compareblocks.consensus.policy",
        "test_file": "tests/unit/test_consensus_policy.py",
        "description": "Get current policy configuration.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "DecisionPolicyEngine.make_decision",
        "class": "DecisionPolicyEngine",
        "module": "src.compareblocks.consensus.policy",
        "test_file": "tests/unit/test_consensus_policy.py",
        "description": "Make a consensus decision for the given variations.",
        "parameters": [
          "self",
          "variations",
          "context_texts"
        ]
      },
      {
        "function_name": "DecisionPolicyEngine.update_policy_thresholds",
        "class": "DecisionPolicyEngine",
        "module": "src.compareblocks.consensus.policy",
        "test_file": "tests/unit/test_consensus_policy.py",
        "description": "Update policy thresholds.",
        "parameters": [
          "self",
          "new_thresholds"
        ]
      },
      {
        "function_name": "batch_consensus_decisions",
        "class": null,
        "module": "src.compareblocks.consensus.policy",
        "test_file": "tests/unit/test_consensus_policy.py",
        "description": "Make consensus decisions for multiple batches of variations.",
        "parameters": [
          "variation_batches",
          "thresholds"
        ]
      },
      {
        "function_name": "create_conservative_policy_thresholds",
        "class": null,
        "module": "src.compareblocks.consensus.policy",
        "test_file": "tests/unit/test_consensus_policy.py",
        "description": "Create conservative policy thresholds that favor manual review.",
        "parameters": []
      },
      {
        "function_name": "create_default_policy_thresholds",
        "class": null,
        "module": "src.compareblocks.consensus.policy",
        "test_file": "tests/unit/test_consensus_policy.py",
        "description": "Create default policy thresholds for decision making.",
        "parameters": []
      },
      {
        "function_name": "make_consensus_decision",
        "class": null,
        "module": "src.compareblocks.consensus.policy",
        "test_file": "tests/unit/test_consensus_policy.py",
        "description": "Make a consensus decision for a set of variations.",
        "parameters": [
          "variations",
          "scores",
          "thresholds"
        ]
      },
      {
        "function_name": "make_decision",
        "class": null,
        "module": "src.compareblocks.consensus.policy",
        "test_file": "tests/unit/test_consensus_policy.py",
        "description": "Make a consensus decision for the given variations.",
        "parameters": [
          "self",
          "variations",
          "context_texts"
        ]
      }
    ],
    "src.compareblocks.consensus.score": [
      {
        "function_name": "ConsensusScorer.__init__",
        "class": "ConsensusScorer",
        "module": "src.compareblocks.consensus.score",
        "test_file": "tests/unit/test_consensus_score.py",
        "description": "Initialize the consensus scorer.",
        "parameters": [
          "self",
          "weights",
          "thresholds"
        ]
      },
      {
        "function_name": "ConsensusScorer.get_best_variation",
        "class": "ConsensusScorer",
        "module": "src.compareblocks.consensus.score",
        "test_file": "tests/unit/test_consensus_score.py",
        "description": "Get the best scoring variation.",
        "parameters": [
          "self",
          "variations",
          "context_texts"
        ]
      },
      {
        "function_name": "ConsensusScorer.get_configuration",
        "class": "ConsensusScorer",
        "module": "src.compareblocks.consensus.score",
        "test_file": "tests/unit/test_consensus_score.py",
        "description": "Get current scorer configuration.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "ConsensusScorer.get_scoring_statistics",
        "class": "ConsensusScorer",
        "module": "src.compareblocks.consensus.score",
        "test_file": "tests/unit/test_consensus_score.py",
        "description": "Get scoring statistics for a set of variations.",
        "parameters": [
          "self",
          "variations",
          "context_texts"
        ]
      },
      {
        "function_name": "ConsensusScorer.rank_variations",
        "class": "ConsensusScorer",
        "module": "src.compareblocks.consensus.score",
        "test_file": "tests/unit/test_consensus_score.py",
        "description": "Rank variations by score (best first).",
        "parameters": [
          "self",
          "variations",
          "context_texts"
        ]
      },
      {
        "function_name": "ConsensusScorer.score_variation",
        "class": "ConsensusScorer",
        "module": "src.compareblocks.consensus.score",
        "test_file": "tests/unit/test_consensus_score.py",
        "description": "Score a single text variation.",
        "parameters": [
          "self",
          "variation_text",
          "engine_name",
          "variation_index",
          "all_variations",
          "expected_orientation",
          "actual_orientation",
          "context_texts"
        ]
      },
      {
        "function_name": "ConsensusScorer.score_variations",
        "class": "ConsensusScorer",
        "module": "src.compareblocks.consensus.score",
        "test_file": "tests/unit/test_consensus_score.py",
        "description": "Score multiple text variations.",
        "parameters": [
          "self",
          "variations",
          "context_texts"
        ]
      },
      {
        "function_name": "ConsensusScorer.update_thresholds",
        "class": "ConsensusScorer",
        "module": "src.compareblocks.consensus.score",
        "test_file": "tests/unit/test_consensus_score.py",
        "description": "Update scoring thresholds.",
        "parameters": [
          "self",
          "new_thresholds"
        ]
      },
      {
        "function_name": "ConsensusScorer.update_weights",
        "class": "ConsensusScorer",
        "module": "src.compareblocks.consensus.score",
        "test_file": "tests/unit/test_consensus_score.py",
        "description": "Update scoring weights.",
        "parameters": [
          "self",
          "new_weights"
        ]
      },
      {
        "function_name": "ScoringWeights.normalize",
        "class": "ScoringWeights",
        "module": "src.compareblocks.consensus.score",
        "test_file": "tests/unit/test_consensus_score.py",
        "description": "Normalize weights to sum to 1.0.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "VariationScore.to_dict",
        "class": "VariationScore",
        "module": "src.compareblocks.consensus.score",
        "test_file": "tests/unit/test_consensus_score.py",
        "description": "Convert to dictionary format.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "calculate_median_length_consistency",
        "class": null,
        "module": "src.compareblocks.consensus.score",
        "test_file": "tests/unit/test_consensus_score.py",
        "description": "Calculate length consistency score based on median variation length.",
        "parameters": [
          "variations"
        ]
      },
      {
        "function_name": "calculate_orientation_penalty",
        "class": null,
        "module": "src.compareblocks.consensus.score",
        "test_file": "tests/unit/test_consensus_score.py",
        "description": "Calculate orientation penalty for a variation.",
        "parameters": [
          "variation",
          "expected_orientation"
        ]
      },
      {
        "function_name": "get_best_variation",
        "class": null,
        "module": "src.compareblocks.consensus.score",
        "test_file": "tests/unit/test_consensus_score.py",
        "description": "Get the best scoring variation.",
        "parameters": [
          "self",
          "variations",
          "context_texts"
        ]
      },
      {
        "function_name": "get_scoring_statistics",
        "class": null,
        "module": "src.compareblocks.consensus.score",
        "test_file": "tests/unit/test_consensus_score.py",
        "description": "Calculate statistics for a set of variation scores.",
        "parameters": [
          "scores"
        ]
      },
      {
        "function_name": "get_scoring_statistics",
        "class": null,
        "module": "src.compareblocks.consensus.score",
        "test_file": "tests/unit/test_consensus_score.py",
        "description": "Get scoring statistics for a set of variations.",
        "parameters": [
          "self",
          "variations",
          "context_texts"
        ]
      },
      {
        "function_name": "normalize",
        "class": null,
        "module": "src.compareblocks.consensus.score",
        "test_file": "tests/unit/test_consensus_score.py",
        "description": "Normalize weights to sum to 1.0.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "rank_variations",
        "class": null,
        "module": "src.compareblocks.consensus.score",
        "test_file": "tests/unit/test_consensus_score.py",
        "description": "Rank variations by score (best first).",
        "parameters": [
          "self",
          "variations",
          "context_texts"
        ]
      },
      {
        "function_name": "score_variation",
        "class": null,
        "module": "src.compareblocks.consensus.score",
        "test_file": "tests/unit/test_consensus_score.py",
        "description": "Score a single text variation.",
        "parameters": [
          "self",
          "variation_text",
          "engine_name",
          "variation_index",
          "all_variations",
          "expected_orientation",
          "actual_orientation",
          "context_texts"
        ]
      },
      {
        "function_name": "score_variations",
        "class": null,
        "module": "src.compareblocks.consensus.score",
        "test_file": "tests/unit/test_consensus_score.py",
        "description": "Score multiple text variations.",
        "parameters": [
          "self",
          "variations",
          "context_texts"
        ]
      }
    ],
    "src.compareblocks.features.consistency_integration": [
      {
        "function_name": "ConsistencyIntegrationManager.apply_consistency_overrides",
        "class": "ConsistencyIntegrationManager",
        "module": "src.compareblocks.features.consistency_integration",
        "test_file": "tests/integration/test_consistency_integration.py",
        "description": "Apply consistency overrides for specific terms in a block.",
        "parameters": [
          "self",
          "block_id: Any",
          "override_terms: Any"
        ]
      },
      {
        "function_name": "ConsistencyIntegrationManager.get_consistency_summary_for_pdf",
        "class": "ConsistencyIntegrationManager",
        "module": "src.compareblocks.features.consistency_integration",
        "test_file": "tests/integration/test_consistency_integration.py",
        "description": "Get comprehensive consistency summary for a PDF.",
        "parameters": [
          "self",
          "pdf_path: Any"
        ]
      },
      {
        "function_name": "ConsistencyIntegrationManager.get_dynamic_consistency_percentages",
        "class": "ConsistencyIntegrationManager",
        "module": "src.compareblocks.features.consistency_integration",
        "test_file": "tests/integration/test_consistency_integration.py",
        "description": "Get dynamic consistency percentages for all blocks in a PDF.",
        "parameters": [
          "self",
          "pdf_path: Any"
        ]
      },
      {
        "function_name": "ConsistencyIntegrationManager.track_block_consistency_with_associations",
        "class": "ConsistencyIntegrationManager",
        "module": "src.compareblocks.features.consistency_integration",
        "test_file": "tests/integration/test_consistency_integration.py",
        "description": "Track block consistency including all associated files for the PDF.",
        "parameters": [
          "self",
          "pdf_path: Any",
          "block_id: Any",
          "block_variations: Any",
          "block_position: Any"
        ]
      },
      {
        "function_name": "ConsistencyIntegrationManager.track_block_consistency_with_surrounding_context",
        "class": "ConsistencyIntegrationManager",
        "module": "src.compareblocks.features.consistency_integration",
        "test_file": "tests/integration/test_consistency_integration.py",
        "description": "Track block consistency with surrounding block context when needed.",
        "parameters": [
          "self",
          "pdf_path: Any",
          "block_id: Any",
          "block_variations: Any",
          "surrounding_blocks: Any"
        ]
      },
      {
        "function_name": "ConsistencyIntegrationManager.update_consistency_with_new_association",
        "class": "ConsistencyIntegrationManager",
        "module": "src.compareblocks.features.consistency_integration",
        "test_file": "tests/integration/test_consistency_integration.py",
        "description": "Update block consistency when a new associated file is added.",
        "parameters": [
          "self",
          "pdf_path: Any",
          "block_id: Any",
          "new_file_path: Any"
        ]
      },
      {
        "function_name": "ConsistencyIntegrationManager.validate_consistency_state",
        "class": "ConsistencyIntegrationManager",
        "module": "src.compareblocks.features.consistency_integration",
        "test_file": "tests/integration/test_consistency_integration.py",
        "description": "Validate consistency state for a PDF and identify issues.",
        "parameters": [
          "self",
          "pdf_path: Any"
        ]
      },
      {
        "function_name": "create_consistency_integration_manager",
        "class": null,
        "module": "src.compareblocks.features.consistency_integration",
        "test_file": "tests/integration/test_consistency_integration.py",
        "description": "Create a new consistency integration manager with default settings.",
        "parameters": []
      },
      {
        "function_name": "track_pdf_consistency",
        "class": null,
        "module": "src.compareblocks.features.consistency_integration",
        "test_file": "tests/integration/test_consistency_integration.py",
        "description": "Convenience function to track consistency for all blocks in a PDF.",
        "parameters": [
          "pdf_path: Any",
          "block_variations: Any"
        ]
      }
    ],
    "compareblocks.association.alignment": [
      {
        "function_name": "ContentAligner.__init__",
        "class": "ContentAligner",
        "module": "compareblocks.association.alignment",
        "test_file": "tests/unit/test_alignment.py",
        "description": "Initialize content aligner.",
        "parameters": [
          "self",
          "similarity_threshold"
        ]
      },
      {
        "function_name": "ContentAligner.align_to_blocks",
        "class": "ContentAligner",
        "module": "compareblocks.association.alignment",
        "test_file": "tests/unit/test_alignment.py",
        "description": "Align content to blocks using fuzzy matching.",
        "parameters": [
          "self",
          "content",
          "blocks"
        ]
      },
      {
        "function_name": "align_content_to_blocks",
        "class": null,
        "module": "compareblocks.association.alignment",
        "test_file": "tests/unit/test_alignment.py",
        "description": "Convenience function for content alignment.",
        "parameters": [
          "content",
          "blocks",
          "threshold"
        ]
      }
    ],
    "compareblocks.features.context": [
      {
        "function_name": "ContextFeatures.to_dict",
        "class": "ContextFeatures",
        "module": "compareblocks.features.context",
        "test_file": "tests/unit/test_context.py",
        "description": "Convert features to dictionary format.",
        "parameters": [
          "self"
        ]
      }
    ],
    "src.compareblocks.features.context": [
      {
        "function_name": "ContextSimilarityExtractor.__init__",
        "class": "ContextSimilarityExtractor",
        "module": "src.compareblocks.features.context",
        "test_file": "tests/unit/test_features_context.py",
        "description": "Initialize the context similarity extractor.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "ContextSimilarityExtractor.compare_context_relevance",
        "class": "ContextSimilarityExtractor",
        "module": "src.compareblocks.features.context",
        "test_file": "tests/unit/test_features_context.py",
        "description": "Compare context relevance scores across variations.",
        "parameters": [
          "self",
          "variations",
          "context_texts"
        ]
      },
      {
        "function_name": "ContextSimilarityExtractor.extract_context_features",
        "class": "ContextSimilarityExtractor",
        "module": "src.compareblocks.features.context",
        "test_file": "tests/unit/test_features_context.py",
        "description": "Extract context similarity features from text.",
        "parameters": [
          "self",
          "text",
          "context_texts"
        ]
      },
      {
        "function_name": "ContextSimilarityExtractor.extract_features_for_variations",
        "class": "ContextSimilarityExtractor",
        "module": "src.compareblocks.features.context",
        "test_file": "tests/unit/test_features_context.py",
        "description": "Extract context features for multiple variations.",
        "parameters": [
          "self",
          "variations",
          "context_texts"
        ]
      },
      {
        "function_name": "ContextSimilarityExtractor.get_context_statistics",
        "class": "ContextSimilarityExtractor",
        "module": "src.compareblocks.features.context",
        "test_file": "tests/unit/test_features_context.py",
        "description": "Get context statistics for a set of variations.",
        "parameters": [
          "self",
          "variations",
          "context_texts"
        ]
      },
      {
        "function_name": "ContextSimilarityExtractor.rank_by_context_relevance",
        "class": "ContextSimilarityExtractor",
        "module": "src.compareblocks.features.context",
        "test_file": "tests/unit/test_features_context.py",
        "description": "Rank variations by context relevance score.",
        "parameters": [
          "self",
          "variations",
          "context_texts"
        ]
      },
      {
        "function_name": "extract_context_features",
        "class": null,
        "module": "src.compareblocks.features.context",
        "test_file": "tests/unit/test_features_context.py",
        "description": "Extract context similarity features from text.",
        "parameters": [
          "self",
          "text",
          "context_texts"
        ]
      }
    ],
    "src.compareblocks.features.core": [
      {
        "function_name": "CoreFeatureExtractor.__init__",
        "class": "CoreFeatureExtractor",
        "module": "src.compareblocks.features.core",
        "test_file": "tests/unit/test_features_lengths.py",
        "description": "Initialize the core feature extractor.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "CoreFeatureExtractor.compute_consistency_score",
        "class": "CoreFeatureExtractor",
        "module": "src.compareblocks.features.core",
        "test_file": "tests/unit/test_features_lengths.py",
        "description": "Compute length consistency scores for variations based on median length.",
        "parameters": [
          "self",
          "variations"
        ]
      },
      {
        "function_name": "CoreFeatureExtractor.extract_features_for_variations",
        "class": "CoreFeatureExtractor",
        "module": "src.compareblocks.features.core",
        "test_file": "tests/unit/test_features_lengths.py",
        "description": "Extract features for multiple variations and compute consistency scores.",
        "parameters": [
          "self",
          "variations"
        ]
      },
      {
        "function_name": "CoreFeatureExtractor.extract_length_features",
        "class": "CoreFeatureExtractor",
        "module": "src.compareblocks.features.core",
        "test_file": "tests/unit/test_features_lengths.py",
        "description": "Extract length and line features from a single text variation.",
        "parameters": [
          "self",
          "text"
        ]
      },
      {
        "function_name": "CoreFeatureExtractor.get_variation_statistics",
        "class": "CoreFeatureExtractor",
        "module": "src.compareblocks.features.core",
        "test_file": "tests/unit/test_features_lengths.py",
        "description": "Get summary statistics for a set of variations.",
        "parameters": [
          "self",
          "variations"
        ]
      },
      {
        "function_name": "extract_length_features",
        "class": null,
        "module": "src.compareblocks.features.core",
        "test_file": "tests/unit/test_features_lengths.py",
        "description": "Extract length and line features from a single text variation.",
        "parameters": [
          "self",
          "text"
        ]
      }
    ],
    "compareblocks.testing.coverage_tracker": [
      {
        "function_name": "CoverageTracker.__init__",
        "class": "CoverageTracker",
        "module": "compareblocks.testing.coverage_tracker",
        "test_file": "tests/unit/test_coverage_tracker.py",
        "description": "Initialize coverage tracker.",
        "parameters": [
          "self",
          "db_path"
        ]
      },
      {
        "function_name": "CoverageTracker.export_coverage_data",
        "class": "CoverageTracker",
        "module": "compareblocks.testing.coverage_tracker",
        "test_file": "tests/unit/test_coverage_tracker.py",
        "description": "Export coverage data to JSON file.",
        "parameters": [
          "self",
          "output_path"
        ]
      },
      {
        "function_name": "CoverageTracker.generate_coverage_report",
        "class": "CoverageTracker",
        "module": "compareblocks.testing.coverage_tracker",
        "test_file": "tests/unit/test_coverage_tracker.py",
        "description": "Generate comprehensive coverage report.",
        "parameters": [
          "self",
          "engine_name"
        ]
      },
      {
        "function_name": "CoverageTracker.get_file_type_coverage",
        "class": "CoverageTracker",
        "module": "compareblocks.testing.coverage_tracker",
        "test_file": "tests/unit/test_coverage_tracker.py",
        "description": "Get file type coverage for an engine.",
        "parameters": [
          "self",
          "engine_name"
        ]
      },
      {
        "function_name": "CoverageTracker.get_parameter_coverage",
        "class": "CoverageTracker",
        "module": "compareblocks.testing.coverage_tracker",
        "test_file": "tests/unit/test_coverage_tracker.py",
        "description": "Get parameter coverage for a specific function.",
        "parameters": [
          "self",
          "engine_name",
          "function_name"
        ]
      },
      {
        "function_name": "CoverageTracker.identify_coverage_gaps",
        "class": "CoverageTracker",
        "module": "compareblocks.testing.coverage_tracker",
        "test_file": "tests/unit/test_coverage_tracker.py",
        "description": "Identify coverage gaps for an engine.",
        "parameters": [
          "self",
          "engine_name"
        ]
      },
      {
        "function_name": "CoverageTracker.record_file_type_test",
        "class": "CoverageTracker",
        "module": "compareblocks.testing.coverage_tracker",
        "test_file": "tests/unit/test_coverage_tracker.py",
        "description": "Record a file type test result.",
        "parameters": [
          "self",
          "record"
        ]
      },
      {
        "function_name": "CoverageTracker.record_parameter_test",
        "class": "CoverageTracker",
        "module": "compareblocks.testing.coverage_tracker",
        "test_file": "tests/unit/test_coverage_tracker.py",
        "description": "Record a parameter test result.",
        "parameters": [
          "self",
          "record"
        ]
      },
      {
        "function_name": "track_file_type_test",
        "class": null,
        "module": "compareblocks.testing.coverage_tracker",
        "test_file": "tests/unit/test_coverage_tracker.py",
        "description": "Track a file type test result.",
        "parameters": [
          "engine_name",
          "file_type",
          "file_path",
          "test_success",
          "extraction_time",
          "output_quality_score",
          "error_message"
        ]
      },
      {
        "function_name": "track_parameter_test",
        "class": null,
        "module": "compareblocks.testing.coverage_tracker",
        "test_file": "tests/unit/test_coverage_tracker.py",
        "description": "Track a parameter test result.",
        "parameters": [
          "engine_name",
          "function_name",
          "parameter_set",
          "test_success",
          "execution_time",
          "pdf_file",
          "test_output_size",
          "error_message"
        ]
      }
    ],
    "compareblocks.engines.docling_engine": [
      {
        "function_name": "DoclingEngine.__init__",
        "class": "DoclingEngine",
        "module": "compareblocks.engines.docling_engine",
        "test_file": "tests/unit/test_docling_engine.py",
        "description": "Initialize Docling engine.",
        "parameters": [
          "self",
          "pipeline",
          "export_format"
        ]
      },
      {
        "function_name": "DoclingEngine.extract_pdf",
        "class": "DoclingEngine",
        "module": "compareblocks.engines.docling_engine",
        "test_file": "tests/unit/test_docling_engine.py",
        "description": "Extract text from PDF using Docling.",
        "parameters": [
          "self",
          "pdf_path"
        ]
      },
      {
        "function_name": "DoclingEngine.is_available",
        "class": "DoclingEngine",
        "module": "compareblocks.engines.docling_engine",
        "test_file": "tests/unit/test_docling_engine.py",
        "description": "Check if Docling is available.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "DoclingEngine.save_extraction",
        "class": "DoclingEngine",
        "module": "compareblocks.engines.docling_engine",
        "test_file": "tests/unit/test_docling_engine.py",
        "description": "Extract and save Docling data.",
        "parameters": [
          "self",
          "pdf_path",
          "output_path"
        ]
      },
      {
        "function_name": "extract_docling",
        "class": null,
        "module": "compareblocks.engines.docling_engine",
        "test_file": "tests/unit/test_docling_engine.py",
        "description": "Extract text using Docling.",
        "parameters": [
          "pdf_path",
          "pipeline",
          "export_format"
        ]
      },
      {
        "function_name": "save_docling_extraction",
        "class": null,
        "module": "compareblocks.engines.docling_engine",
        "test_file": "tests/unit/test_docling_engine.py",
        "description": "Extract and save Docling data.",
        "parameters": [
          "pdf_path",
          "output_path",
          "pipeline",
          "export_format"
        ]
      }
    ],
    "compareblocks.engines.dual_output_processor": [
      {
        "function_name": "DualOutputEngineProcessor.__init__",
        "class": "DualOutputEngineProcessor",
        "module": "compareblocks.engines.dual_output_processor",
        "test_file": "tests/unit/test_dual_output_processor.py",
        "description": "Initialize the dual-output processor.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "DualOutputEngineProcessor.process_all_engines_dual_output",
        "class": "DualOutputEngineProcessor",
        "module": "compareblocks.engines.dual_output_processor",
        "test_file": "tests/unit/test_dual_output_processor.py",
        "description": "Process PDF with all available engines producing dual outputs.",
        "parameters": [
          "self",
          "pdf_path"
        ]
      },
      {
        "function_name": "DualOutputEngineProcessor.process_engine_dual_output",
        "class": "DualOutputEngineProcessor",
        "module": "compareblocks.engines.dual_output_processor",
        "test_file": "tests/unit/test_dual_output_processor.py",
        "description": "Process PDF with a single engine producing both markdown and JSON outputs.",
        "parameters": [
          "self",
          "engine_name",
          "pdf_path"
        ]
      },
      {
        "function_name": "process_engine_dual_output",
        "class": null,
        "module": "compareblocks.engines.dual_output_processor",
        "test_file": "tests/unit/test_dual_output_processor.py",
        "description": "Process single engine with dual output.",
        "parameters": [
          "engine_name",
          "pdf_path"
        ]
      }
    ],
    "src.compareblocks.processing.dynamic_reprocessor": [
      {
        "function_name": "DynamicReprocessor.cleanup_old_versions",
        "class": "DynamicReprocessor",
        "module": "src.compareblocks.processing.dynamic_reprocessor",
        "test_file": "tests/unit/test_dynamic_reprocessor.py",
        "description": "Clean up old processing versions, keeping only the most recent.",
        "parameters": [
          "self",
          "pdf_path: Any",
          "keep_count: Any"
        ]
      },
      {
        "function_name": "DynamicReprocessor.create_processing_version",
        "class": "DynamicReprocessor",
        "module": "src.compareblocks.processing.dynamic_reprocessor",
        "test_file": "tests/unit/test_dynamic_reprocessor.py",
        "description": "Create a new processing version.",
        "parameters": [
          "self",
          "pdf_path: Any",
          "processing_mode: Any",
          "storage_mode: Any",
          "engines_used: Any",
          "parent_version_id: Any",
          "description: Any"
        ]
      },
      {
        "function_name": "DynamicReprocessor.create_reprocessing_trigger",
        "class": "DynamicReprocessor",
        "module": "src.compareblocks.processing.dynamic_reprocessor",
        "test_file": "tests/unit/test_dynamic_reprocessor.py",
        "description": "Create a reprocessing trigger.",
        "parameters": [
          "self",
          "trigger_type: Any",
          "trigger_data: Any",
          "requires_full_rebuild: Any"
        ]
      },
      {
        "function_name": "DynamicReprocessor.detect_configuration_changes",
        "class": "DynamicReprocessor",
        "module": "src.compareblocks.processing.dynamic_reprocessor",
        "test_file": "tests/unit/test_dynamic_reprocessor.py",
        "description": "Detect if configuration has changed since last processing.",
        "parameters": [
          "self",
          "pdf_path: Any"
        ]
      },
      {
        "function_name": "DynamicReprocessor.detect_new_associated_files",
        "class": "DynamicReprocessor",
        "module": "src.compareblocks.processing.dynamic_reprocessor",
        "test_file": "tests/unit/test_dynamic_reprocessor.py",
        "description": "Detect if new associated files have been added.",
        "parameters": [
          "self",
          "pdf_path: Any"
        ]
      },
      {
        "function_name": "DynamicReprocessor.generate_configuration_hash",
        "class": "DynamicReprocessor",
        "module": "src.compareblocks.processing.dynamic_reprocessor",
        "test_file": "tests/unit/test_dynamic_reprocessor.py",
        "description": "Generate hash for configuration to detect changes.",
        "parameters": [
          "self",
          "configuration: Any"
        ]
      },
      {
        "function_name": "DynamicReprocessor.get_current_configuration",
        "class": "DynamicReprocessor",
        "module": "src.compareblocks.processing.dynamic_reprocessor",
        "test_file": "tests/unit/test_dynamic_reprocessor.py",
        "description": "Get current effective configuration for all engines.",
        "parameters": [
          "self",
          "pdf_path: Any",
          "include_timestamp: Any"
        ]
      },
      {
        "function_name": "DynamicReprocessor.get_latest_version",
        "class": "DynamicReprocessor",
        "module": "src.compareblocks.processing.dynamic_reprocessor",
        "test_file": "tests/unit/test_dynamic_reprocessor.py",
        "description": "Get the latest processing version for a PDF.",
        "parameters": [
          "self",
          "pdf_path: Any"
        ]
      },
      {
        "function_name": "DynamicReprocessor.get_processing_history",
        "class": "DynamicReprocessor",
        "module": "src.compareblocks.processing.dynamic_reprocessor",
        "test_file": "tests/unit/test_dynamic_reprocessor.py",
        "description": "Get processing history for a PDF.",
        "parameters": [
          "self",
          "pdf_path: Any"
        ]
      },
      {
        "function_name": "DynamicReprocessor.incremental_processing",
        "class": "DynamicReprocessor",
        "module": "src.compareblocks.processing.dynamic_reprocessor",
        "test_file": "tests/unit/test_dynamic_reprocessor.py",
        "description": "Process only new associated files incrementally.",
        "parameters": [
          "self",
          "pdf_path: Any",
          "new_files: Any",
          "base_version_id: Any"
        ]
      },
      {
        "function_name": "DynamicReprocessor.load_processing_versions",
        "class": "DynamicReprocessor",
        "module": "src.compareblocks.processing.dynamic_reprocessor",
        "test_file": "tests/unit/test_dynamic_reprocessor.py",
        "description": "Load all processing versions.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "DynamicReprocessor.rebuild_all_comparisons",
        "class": "DynamicReprocessor",
        "module": "src.compareblocks.processing.dynamic_reprocessor",
        "test_file": "tests/unit/test_dynamic_reprocessor.py",
        "description": "Rebuild all comparisons from scratch.",
        "parameters": [
          "self",
          "pdf_path: Any",
          "storage_mode: Any",
          "description: Any"
        ]
      },
      {
        "function_name": "DynamicReprocessor.save_processing_version",
        "class": "DynamicReprocessor",
        "module": "src.compareblocks.processing.dynamic_reprocessor",
        "test_file": "tests/unit/test_dynamic_reprocessor.py",
        "description": "Save processing version to storage.",
        "parameters": [
          "self",
          "version: Any"
        ]
      },
      {
        "function_name": "DynamicReprocessor.update_consistency_percentages",
        "class": "DynamicReprocessor",
        "module": "src.compareblocks.processing.dynamic_reprocessor",
        "test_file": "tests/unit/test_dynamic_reprocessor.py",
        "description": "Update consistency percentages without full reprocessing.",
        "parameters": [
          "self",
          "pdf_path: Any"
        ]
      },
      {
        "function_name": "detect_reprocessing_needs",
        "class": null,
        "module": "src.compareblocks.processing.dynamic_reprocessor",
        "test_file": "tests/unit/test_dynamic_reprocessor.py",
        "description": "Detect if reprocessing is needed for a PDF.",
        "parameters": [
          "pdf_path: Any"
        ]
      },
      {
        "function_name": "incremental_processing_for_new_files",
        "class": null,
        "module": "src.compareblocks.processing.dynamic_reprocessor",
        "test_file": "tests/unit/test_dynamic_reprocessor.py",
        "description": "Process new files incrementally.",
        "parameters": [
          "pdf_path: Any",
          "new_files: Any"
        ]
      },
      {
        "function_name": "rebuild_all_comparisons",
        "class": null,
        "module": "src.compareblocks.processing.dynamic_reprocessor",
        "test_file": "tests/unit/test_dynamic_reprocessor.py",
        "description": "Rebuild all comparisons for a PDF.",
        "parameters": [
          "pdf_path: Any",
          "storage_mode: Any"
        ]
      }
    ],
    "compareblocks.analytics.engine_analytics": [
      {
        "function_name": "EngineAnalytics.__init__",
        "class": "EngineAnalytics",
        "module": "compareblocks.analytics.engine_analytics",
        "test_file": "tests/unit/test_engine_analytics.py",
        "description": "Initialize engine analytics.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "EngineAnalytics.analyze_consensus_decisions",
        "class": "EngineAnalytics",
        "module": "compareblocks.analytics.engine_analytics",
        "test_file": "tests/unit/test_engine_analytics.py",
        "description": "Analyze consensus decisions to generate engine performance metrics.",
        "parameters": [
          "self",
          "decisions"
        ]
      },
      {
        "function_name": "EngineAnalytics.analyze_engine_results",
        "class": "EngineAnalytics",
        "module": "compareblocks.analytics.engine_analytics",
        "test_file": "tests/unit/test_engine_analytics.py",
        "description": "Analyze engine extraction results and generate performance metrics.",
        "parameters": [
          "self",
          "engine_results"
        ]
      },
      {
        "function_name": "EngineAnalytics.analyze_variation_scores",
        "class": "EngineAnalytics",
        "module": "compareblocks.analytics.engine_analytics",
        "test_file": "tests/unit/test_engine_analytics.py",
        "description": "Analyze variation scores to generate engine performance metrics.",
        "parameters": [
          "self",
          "variation_scores"
        ]
      },
      {
        "function_name": "EngineAnalytics.combine_metrics",
        "class": "EngineAnalytics",
        "module": "compareblocks.analytics.engine_analytics",
        "test_file": "tests/unit/test_engine_analytics.py",
        "description": "Combine multiple engine performance metrics dictionaries.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "EngineAnalytics.get_engine_rankings",
        "class": "EngineAnalytics",
        "module": "compareblocks.analytics.engine_analytics",
        "test_file": "tests/unit/test_engine_analytics.py",
        "description": "Rank engines by overall performance score.",
        "parameters": [
          "self",
          "metrics"
        ]
      },
      {
        "function_name": "EngineAnalytics.get_performance_summary",
        "class": "EngineAnalytics",
        "module": "compareblocks.analytics.engine_analytics",
        "test_file": "tests/unit/test_engine_analytics.py",
        "description": "Generate a performance summary across all engines.",
        "parameters": [
          "self",
          "metrics"
        ]
      },
      {
        "function_name": "EngineAnalytics.load_metrics",
        "class": "EngineAnalytics",
        "module": "compareblocks.analytics.engine_analytics",
        "test_file": "tests/unit/test_engine_analytics.py",
        "description": "Load engine performance metrics from file.",
        "parameters": [
          "self",
          "file_path"
        ]
      },
      {
        "function_name": "EngineAnalytics.save_metrics",
        "class": "EngineAnalytics",
        "module": "compareblocks.analytics.engine_analytics",
        "test_file": "tests/unit/test_engine_analytics.py",
        "description": "Save engine performance metrics to file.",
        "parameters": [
          "self",
          "metrics",
          "output_path"
        ]
      },
      {
        "function_name": "EnginePerformanceMetrics.to_dict",
        "class": "EnginePerformanceMetrics",
        "module": "compareblocks.analytics.engine_analytics",
        "test_file": "tests/unit/test_engine_analytics.py",
        "description": "Convert to dictionary format.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "analyze_engine_performance",
        "class": null,
        "module": "compareblocks.analytics.engine_analytics",
        "test_file": "tests/unit/test_engine_analytics.py",
        "description": "Convenience function to analyze engine performance from various data sources.",
        "parameters": [
          "engine_results",
          "consensus_decisions",
          "variation_scores"
        ]
      },
      {
        "function_name": "get_engine_rankings",
        "class": null,
        "module": "compareblocks.analytics.engine_analytics",
        "test_file": "tests/unit/test_engine_analytics.py",
        "description": "Convenience function to get engine rankings.",
        "parameters": [
          "metrics"
        ]
      }
    ],
    "compareblocks.config.engine_config": [
      {
        "function_name": "EngineConfiguration.from_ndjson_line",
        "class": "EngineConfiguration",
        "module": "compareblocks.config.engine_config",
        "test_file": "tests/unit/test_engine_config.py",
        "description": "Create from NDJSON line.",
        "parameters": [
          "cls",
          "line"
        ]
      },
      {
        "function_name": "EngineConfiguration.to_ndjson_line",
        "class": "EngineConfiguration",
        "module": "compareblocks.config.engine_config",
        "test_file": "tests/unit/test_engine_config.py",
        "description": "Convert to NDJSON line format.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "EngineConfigurationManager.__init__",
        "class": "EngineConfigurationManager",
        "module": "compareblocks.config.engine_config",
        "test_file": "tests/unit/test_engine_config.py",
        "description": "Initialize configuration manager.",
        "parameters": [
          "self",
          "config_file"
        ]
      },
      {
        "function_name": "EngineConfigurationManager.add_engine_configuration",
        "class": "EngineConfigurationManager",
        "module": "compareblocks.config.engine_config",
        "test_file": "tests/unit/test_engine_config.py",
        "description": "Add a new engine configuration with foreign key reference.",
        "parameters": [
          "self",
          "engine_name",
          "parent_config_id"
        ]
      },
      {
        "function_name": "EngineConfigurationManager.add_pdf_override",
        "class": "EngineConfigurationManager",
        "module": "compareblocks.config.engine_config",
        "test_file": "tests/unit/test_engine_config.py",
        "description": "Add PDF-specific configuration override.",
        "parameters": [
          "self",
          "engine_name",
          "pdf_path",
          "overrides"
        ]
      },
      {
        "function_name": "EngineConfigurationManager.approve_optimization_proposal",
        "class": "EngineConfigurationManager",
        "module": "compareblocks.config.engine_config",
        "test_file": "tests/unit/test_engine_config.py",
        "description": "Approve an optimization proposal and create PDF override.",
        "parameters": [
          "self",
          "proposal_id"
        ]
      },
      {
        "function_name": "EngineConfigurationManager.archive_current_pdf_override",
        "class": "EngineConfigurationManager",
        "module": "compareblocks.config.engine_config",
        "test_file": "tests/unit/test_engine_config.py",
        "description": "Archive current PDF override as historical setting before creating new one.",
        "parameters": [
          "self",
          "engine_name",
          "pdf_path"
        ]
      },
      {
        "function_name": "EngineConfigurationManager.create_individual_config_files",
        "class": "EngineConfigurationManager",
        "module": "compareblocks.config.engine_config",
        "test_file": "tests/unit/test_engine_config.py",
        "description": "Create individual configuration files for each engine with foreign key references.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "EngineConfigurationManager.create_optimization_proposal",
        "class": "EngineConfigurationManager",
        "module": "compareblocks.config.engine_config",
        "test_file": "tests/unit/test_engine_config.py",
        "description": "Create an optimization proposal for review.",
        "parameters": [
          "self",
          "engine_name",
          "pdf_path",
          "proposed_settings"
        ]
      },
      {
        "function_name": "EngineConfigurationManager.get_auto_optimize_parameters",
        "class": "EngineConfigurationManager",
        "module": "compareblocks.config.engine_config",
        "test_file": "tests/unit/test_engine_config.py",
        "description": "Get list of parameters included in auto-optimization.",
        "parameters": [
          "self",
          "engine_name"
        ]
      },
      {
        "function_name": "EngineConfigurationManager.get_effective_configuration",
        "class": "EngineConfigurationManager",
        "module": "compareblocks.config.engine_config",
        "test_file": "tests/unit/test_engine_config.py",
        "description": "Get effective configuration by merging parent, engine, and PDF-specific settings.",
        "parameters": [
          "self",
          "engine_name",
          "pdf_path"
        ]
      },
      {
        "function_name": "EngineConfigurationManager.get_engine_configuration",
        "class": "EngineConfigurationManager",
        "module": "compareblocks.config.engine_config",
        "test_file": "tests/unit/test_engine_config.py",
        "description": "Get active engine configuration.",
        "parameters": [
          "self",
          "engine_name"
        ]
      },
      {
        "function_name": "EngineConfigurationManager.get_engine_statistics",
        "class": "EngineConfigurationManager",
        "module": "compareblocks.config.engine_config",
        "test_file": "tests/unit/test_engine_config.py",
        "description": "Get comprehensive statistics for an engine.",
        "parameters": [
          "self",
          "engine_name"
        ]
      },
      {
        "function_name": "EngineConfigurationManager.get_parameter_status",
        "class": "EngineConfigurationManager",
        "module": "compareblocks.config.engine_config",
        "test_file": "tests/unit/test_engine_config.py",
        "description": "Get parameter status information for GUI awareness.",
        "parameters": [
          "self",
          "engine_name"
        ]
      },
      {
        "function_name": "EngineConfigurationManager.get_parameter_usage_stats",
        "class": "EngineConfigurationManager",
        "module": "compareblocks.config.engine_config",
        "test_file": "tests/unit/test_engine_config.py",
        "description": "Get usage statistics for parameters across all PDF overrides.",
        "parameters": [
          "self",
          "engine_name"
        ]
      },
      {
        "function_name": "EngineConfigurationManager.get_parameters_by_category",
        "class": "EngineConfigurationManager",
        "module": "compareblocks.config.engine_config",
        "test_file": "tests/unit/test_engine_config.py",
        "description": "Get parameters grouped by category for GUI organization.",
        "parameters": [
          "self",
          "engine_name"
        ]
      },
      {
        "function_name": "EngineConfigurationManager.get_pdf_configuration_history",
        "class": "EngineConfigurationManager",
        "module": "compareblocks.config.engine_config",
        "test_file": "tests/unit/test_engine_config.py",
        "description": "Get historical configurations for a specific PDF.",
        "parameters": [
          "self",
          "engine_name",
          "pdf_path"
        ]
      },
      {
        "function_name": "EngineConfigurationManager.get_pending_optimization_proposals",
        "class": "EngineConfigurationManager",
        "module": "compareblocks.config.engine_config",
        "test_file": "tests/unit/test_engine_config.py",
        "description": "Get all pending optimization proposals.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "EngineConfigurationManager.get_tested_parameters",
        "class": "EngineConfigurationManager",
        "module": "compareblocks.config.engine_config",
        "test_file": "tests/unit/test_engine_config.py",
        "description": "Get list of tested parameters for an engine.",
        "parameters": [
          "self",
          "engine_name"
        ]
      },
      {
        "function_name": "EngineConfigurationManager.validate_parameter_value",
        "class": "EngineConfigurationManager",
        "module": "compareblocks.config.engine_config",
        "test_file": "tests/unit/test_engine_config.py",
        "description": "Validate a parameter value against its constraints.",
        "parameters": [
          "self",
          "engine_name",
          "param_name",
          "value"
        ]
      }
    ],
    "compareblocks.testing.engine_validator": [
      {
        "function_name": "EngineValidator.__init__",
        "class": "EngineValidator",
        "module": "compareblocks.testing.engine_validator",
        "test_file": "tests/unit/test_engine_validator.py",
        "description": "Initialize engine validator.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "EngineValidator.analyze_test_file",
        "class": "EngineValidator",
        "module": "compareblocks.testing.engine_validator",
        "test_file": "tests/unit/test_engine_validator.py",
        "description": "Analyze a test file to find tested functions.",
        "parameters": [
          "self",
          "test_file"
        ]
      },
      {
        "function_name": "EngineValidator.discover_engine_functions",
        "class": "EngineValidator",
        "module": "compareblocks.testing.engine_validator",
        "test_file": "tests/unit/test_engine_validator.py",
        "description": "Discover all functions in an engine.",
        "parameters": [
          "self",
          "engine_name"
        ]
      },
      {
        "function_name": "EngineValidator.find_test_files",
        "class": "EngineValidator",
        "module": "compareblocks.testing.engine_validator",
        "test_file": "tests/unit/test_engine_validator.py",
        "description": "Find all test files in the test directory.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "EngineValidator.generate_coverage_report",
        "class": "EngineValidator",
        "module": "compareblocks.testing.engine_validator",
        "test_file": "tests/unit/test_engine_validator.py",
        "description": "Generate comprehensive coverage report.",
        "parameters": [
          "self",
          "coverage_results"
        ]
      },
      {
        "function_name": "EngineValidator.run_comprehensive_validation",
        "class": "EngineValidator",
        "module": "compareblocks.testing.engine_validator",
        "test_file": "tests/unit/test_engine_validator.py",
        "description": "Run comprehensive validation of all engines.",
        "parameters": [
          "self",
          "pdf_path"
        ]
      },
      {
        "function_name": "EngineValidator.run_engine_function_tests",
        "class": "EngineValidator",
        "module": "compareblocks.testing.engine_validator",
        "test_file": "tests/unit/test_engine_validator.py",
        "description": "Run actual tests for engine functions with real PDF.",
        "parameters": [
          "self",
          "engine_name",
          "pdf_path"
        ]
      },
      {
        "function_name": "EngineValidator.validate_all_engines",
        "class": "EngineValidator",
        "module": "compareblocks.testing.engine_validator",
        "test_file": "tests/unit/test_engine_validator.py",
        "description": "Validate test coverage for all engines.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "EngineValidator.validate_engine_coverage",
        "class": "EngineValidator",
        "module": "compareblocks.testing.engine_validator",
        "test_file": "tests/unit/test_engine_validator.py",
        "description": "Validate test coverage for a specific engine.",
        "parameters": [
          "self",
          "engine_name"
        ]
      },
      {
        "function_name": "FunctionTestStatus.__post_init__",
        "class": "FunctionTestStatus",
        "module": "compareblocks.testing.engine_validator",
        "test_file": "tests/unit/test_engine_validator.py",
        "description": "Function description",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "run_comprehensive_engine_validation",
        "class": null,
        "module": "compareblocks.testing.engine_validator",
        "test_file": "tests/unit/test_engine_validator.py",
        "description": "Run comprehensive validation of all engines.",
        "parameters": [
          "pdf_path"
        ]
      }
    ],
    "compareblocks.engines.manager": [
      {
        "function_name": "ExtractionEngineManager.__init__",
        "class": "ExtractionEngineManager",
        "module": "compareblocks.engines.manager",
        "test_file": "tests/unit/test_manager.py",
        "description": "Initialize the engine manager.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "ExtractionEngineManager.create_extraction_summary",
        "class": "ExtractionEngineManager",
        "module": "compareblocks.engines.manager",
        "test_file": "tests/unit/test_manager.py",
        "description": "Create a summary of all extraction results.",
        "parameters": [
          "self",
          "results",
          "pdf_path"
        ]
      },
      {
        "function_name": "ExtractionEngineManager.extract_with_all_engines",
        "class": "ExtractionEngineManager",
        "module": "compareblocks.engines.manager",
        "test_file": "tests/unit/test_manager.py",
        "description": "Extract text using all available engines.",
        "parameters": [
          "self",
          "pdf_path",
          "parallel"
        ]
      },
      {
        "function_name": "ExtractionEngineManager.extract_with_engine",
        "class": "ExtractionEngineManager",
        "module": "compareblocks.engines.manager",
        "test_file": "tests/unit/test_manager.py",
        "description": "Extract text using a specific engine.",
        "parameters": [
          "self",
          "engine_name",
          "pdf_path"
        ]
      },
      {
        "function_name": "ExtractionEngineManager.extract_with_engines",
        "class": "ExtractionEngineManager",
        "module": "compareblocks.engines.manager",
        "test_file": "tests/unit/test_manager.py",
        "description": "Extract text using specified engines.",
        "parameters": [
          "self",
          "engine_names",
          "pdf_path",
          "parallel"
        ]
      },
      {
        "function_name": "ExtractionEngineManager.get_available_engines",
        "class": "ExtractionEngineManager",
        "module": "compareblocks.engines.manager",
        "test_file": "tests/unit/test_manager.py",
        "description": "Get list of available engine names.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "ExtractionEngineManager.save_extraction_summary",
        "class": "ExtractionEngineManager",
        "module": "compareblocks.engines.manager",
        "test_file": "tests/unit/test_manager.py",
        "description": "Save extraction summary to file.",
        "parameters": [
          "self",
          "results",
          "pdf_path",
          "output_path"
        ]
      },
      {
        "function_name": "extract_with_engines",
        "class": null,
        "module": "compareblocks.engines.manager",
        "test_file": "tests/unit/test_manager.py",
        "description": "Extract text using specified engines.",
        "parameters": [
          "engine_names",
          "pdf_path",
          "parallel"
        ]
      }
    ],
    "src.compareblocks.mcp.handlers": [
      {
        "function_name": "ExtractionHandler.__init__",
        "class": "ExtractionHandler",
        "module": "src.compareblocks.mcp.handlers",
        "test_file": "tests/unit/test_mcp_handlers.py",
        "description": "Initialize extraction handler with validator and protocol",
        "parameters": [
          "self",
          "validator: MCPValidator",
          "protocol: MCPProtocol"
        ]
      },
      {
        "function_name": "ExtractionHandler.get_session",
        "class": "ExtractionHandler",
        "module": "src.compareblocks.mcp.handlers",
        "test_file": "tests/unit/test_handlers.py",
        "description": "Get processing session by ID.",
        "parameters": [
          "self",
          "session_id: Any"
        ]
      },
      {
        "function_name": "ExtractionHandler.handle_submission",
        "class": "ExtractionHandler",
        "module": "src.compareblocks.mcp.handlers",
        "test_file": "tests/unit/test_mcp_handlers.py",
        "description": "Handle extraction submission request with validation and processing",
        "parameters": [
          "self",
          "params: Dict[str, Any]"
        ]
      },
      {
        "function_name": "ExtractionHandler.list_sessions",
        "class": "ExtractionHandler",
        "module": "src.compareblocks.mcp.handlers",
        "test_file": "tests/unit/test_handlers.py",
        "description": "List all processing sessions.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "ProcessingSession.__init__",
        "class": "ProcessingSession",
        "module": "src.compareblocks.mcp.handlers",
        "test_file": "tests/unit/test_mcp_handlers.py",
        "description": "Initialize processing session with metadata",
        "parameters": [
          "self",
          "session_id: str",
          "pdf_path: str",
          "metadata: Dict[str, Any]"
        ]
      },
      {
        "function_name": "ProcessingSession.to_dict",
        "class": "ProcessingSession",
        "module": "src.compareblocks.mcp.handlers",
        "test_file": "tests/unit/test_mcp_handlers.py",
        "description": "Convert session to dictionary representation",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "ProcessingSession.update_status",
        "class": "ProcessingSession",
        "module": "src.compareblocks.mcp.handlers",
        "test_file": "tests/unit/test_mcp_handlers.py",
        "description": "Update session status and progress",
        "parameters": [
          "self",
          "status: str",
          "progress: float = None",
          "error: str = None"
        ]
      },
      {
        "function_name": "StatusHandler.__init__",
        "class": "StatusHandler",
        "module": "src.compareblocks.mcp.handlers",
        "test_file": "tests/unit/test_mcp_handlers.py",
        "description": "Initialize status handler with extraction handler reference",
        "parameters": [
          "self",
          "extraction_handler: ExtractionHandler"
        ]
      },
      {
        "function_name": "StatusHandler.handle_results_request",
        "class": "StatusHandler",
        "module": "src.compareblocks.mcp.handlers",
        "test_file": "tests/unit/test_mcp_handlers.py",
        "description": "Handle results request for completed session",
        "parameters": [
          "self",
          "params: Dict[str, Any]"
        ]
      },
      {
        "function_name": "StatusHandler.handle_status_request",
        "class": "StatusHandler",
        "module": "src.compareblocks.mcp.handlers",
        "test_file": "tests/unit/test_mcp_handlers.py",
        "description": "Handle status request for session or system",
        "parameters": [
          "self",
          "params: Dict[str, Any]"
        ]
      }
    ],
    "src.compareblocks.config.file_manager": [
      {
        "function_name": "FileManager.__init__",
        "class": "FileManager",
        "module": "src.compareblocks.config.file_manager",
        "test_file": "tests/unit/test_configuration_manager.py",
        "description": "Initialize the file manager with default configuration",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "FileManager.__new__",
        "class": "FileManager",
        "module": "src.compareblocks.config.file_manager",
        "test_file": "tests/unit/test_configuration_manager.py",
        "description": "Singleton pattern to ensure consistent configuration across application",
        "parameters": [
          "cls"
        ]
      },
      {
        "function_name": "FileManager._generate_timestamp_suffix",
        "class": "FileManager",
        "module": "src.compareblocks.config.file_manager",
        "test_file": "tests/unit/test_configuration_manager.py",
        "description": "Generate timestamp suffix if idempotent processing is disabled",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "FileManager._get_filename_with_timestamp",
        "class": "FileManager",
        "module": "src.compareblocks.config.file_manager",
        "test_file": "tests/unit/test_configuration_manager.py",
        "description": "Get filename with timestamp suffix if needed",
        "parameters": [
          "self",
          "base_filename: str"
        ]
      },
      {
        "function_name": "FileManager._get_output_base_directory",
        "class": "FileManager",
        "module": "src.compareblocks.config.file_manager",
        "test_file": "tests/unit/test_configuration_manager.py",
        "description": "Get the base output directory based on configuration strategy",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "FileManager._get_pdf_base_directory",
        "class": "FileManager",
        "module": "src.compareblocks.config.file_manager",
        "test_file": "tests/unit/test_configuration_manager.py",
        "description": "Get the base directory where the PDF is located",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "FileManager._load_config",
        "class": "FileManager",
        "module": "src.compareblocks.config.file_manager",
        "test_file": "tests/unit/test_configuration_manager.py",
        "description": "Load configuration from default_files.json",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "FileManager.cleanup_processing_directory",
        "class": "FileManager",
        "module": "src.compareblocks.config.file_manager",
        "test_file": "tests/unit/test_configuration_manager.py",
        "description": "Clean up the processing directory after moving files to final output",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "FileManager.clear_mcp_overrides",
        "class": "FileManager",
        "module": "src.compareblocks.config.file_manager",
        "test_file": "tests/unit/test_configuration_manager.py",
        "description": "Clear all MCP overrides",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "FileManager.complete_processing_workflow",
        "class": "FileManager",
        "module": "src.compareblocks.config.file_manager",
        "test_file": "tests/unit/test_configuration_manager.py",
        "description": "Complete the processing workflow by moving files from processing to final output",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "FileManager.ensure_output_directories",
        "class": "FileManager",
        "module": "src.compareblocks.config.file_manager",
        "test_file": "tests/unit/test_configuration_manager.py",
        "description": "Ensure all output directories exist",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "FileManager.get_analytics_output_path",
        "class": "FileManager",
        "module": "src.compareblocks.config.file_manager",
        "test_file": "tests/unit/test_configuration_manager.py",
        "description": "Get the analytics output file path",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "FileManager.get_config_summary",
        "class": "FileManager",
        "module": "src.compareblocks.config.file_manager",
        "test_file": "tests/unit/test_configuration_manager.py",
        "description": "Get a summary of the current configuration",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "FileManager.get_default_encoding",
        "class": "FileManager",
        "module": "src.compareblocks.config.file_manager",
        "test_file": "tests/unit/test_configuration_manager.py",
        "description": "Get the default file encoding",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "FileManager.get_default_engines",
        "class": "FileManager",
        "module": "src.compareblocks.config.file_manager",
        "test_file": "tests/unit/test_configuration_manager.py",
        "description": "Get the list of default processing engines",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "FileManager.get_default_page_range",
        "class": "FileManager",
        "module": "src.compareblocks.config.file_manager",
        "test_file": "tests/unit/test_configuration_manager.py",
        "description": "Get the default page range for processing",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "FileManager.get_expected_pdf_blocks",
        "class": "FileManager",
        "module": "src.compareblocks.config.file_manager",
        "test_file": "tests/unit/test_configuration_manager.py",
        "description": "Get the expected number of blocks in the target PDF",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "FileManager.get_expected_pdf_pages",
        "class": "FileManager",
        "module": "src.compareblocks.config.file_manager",
        "test_file": "tests/unit/test_configuration_manager.py",
        "description": "Get the expected number of pages in the target PDF",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "FileManager.get_file_info",
        "class": "FileManager",
        "module": "src.compareblocks.config.file_manager",
        "test_file": "tests/unit/test_configuration_manager.py",
        "description": "Get complete information about a configured file",
        "parameters": [
          "self",
          "file_key: str"
        ]
      },
      {
        "function_name": "FileManager.get_final_output_directory",
        "class": "FileManager",
        "module": "src.compareblocks.config.file_manager",
        "test_file": "tests/unit/test_configuration_manager.py",
        "description": "Get the final output directory path",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "FileManager.get_gbg_analysis_output_path",
        "class": "FileManager",
        "module": "src.compareblocks.config.file_manager",
        "test_file": "tests/unit/test_configuration_manager.py",
        "description": "Get the GBG analysis output file path",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "FileManager.get_integration_test_output_path",
        "class": "FileManager",
        "module": "src.compareblocks.config.file_manager",
        "test_file": "tests/unit/test_configuration_manager.py",
        "description": "Get the integration test output file path",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "FileManager.get_mcp_overrides",
        "class": "FileManager",
        "module": "src.compareblocks.config.file_manager",
        "test_file": "tests/unit/test_configuration_manager.py",
        "description": "Get current MCP overrides",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "FileManager.get_ndjson_consensus_output_path",
        "class": "FileManager",
        "module": "src.compareblocks.config.file_manager",
        "test_file": "tests/unit/test_configuration_manager.py",
        "description": "Get the NDJSON consensus output file path",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "FileManager.get_ndjson_variations_output_path",
        "class": "FileManager",
        "module": "src.compareblocks.config.file_manager",
        "test_file": "tests/unit/test_configuration_manager.py",
        "description": "Get the NDJSON variations output file path",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "FileManager.get_output_directory",
        "class": "FileManager",
        "module": "src.compareblocks.config.file_manager",
        "test_file": "tests/unit/test_configuration_manager.py",
        "description": "Get the current output directory (processing directory)",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "FileManager.get_output_formats",
        "class": "FileManager",
        "module": "src.compareblocks.config.file_manager",
        "test_file": "tests/unit/test_configuration_manager.py",
        "description": "Get the supported output formats",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "FileManager.get_processing_directory",
        "class": "FileManager",
        "module": "src.compareblocks.config.file_manager",
        "test_file": "tests/unit/test_configuration_manager.py",
        "description": "Get the processing in-progress directory path",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "FileManager.get_target_pdf_path",
        "class": "FileManager",
        "module": "src.compareblocks.config.file_manager",
        "test_file": "tests/unit/test_configuration_manager.py",
        "description": "Get the primary target PDF file path",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "FileManager.get_test_output_directory",
        "class": "FileManager",
        "module": "src.compareblocks.config.file_manager",
        "test_file": "tests/unit/test_configuration_manager.py",
        "description": "Get the test output directory path",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "FileManager.get_timestamp_precision",
        "class": "FileManager",
        "module": "src.compareblocks.config.file_manager",
        "test_file": "tests/unit/test_configuration_manager.py",
        "description": "Get the configured timestamp precision",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "FileManager.get_unit_test_output_path",
        "class": "FileManager",
        "module": "src.compareblocks.config.file_manager",
        "test_file": "tests/unit/test_configuration_manager.py",
        "description": "Get the unit test output file path",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "FileManager.is_idempotent_processing",
        "class": "FileManager",
        "module": "src.compareblocks.config.file_manager",
        "test_file": "tests/unit/test_configuration_manager.py",
        "description": "Check if processing is idempotent (no timestamps)",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "FileManager.is_validation_enabled",
        "class": "FileManager",
        "module": "src.compareblocks.config.file_manager",
        "test_file": "tests/unit/test_configuration_manager.py",
        "description": "Check if validation is enabled by default",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "FileManager.move_to_final_output",
        "class": "FileManager",
        "module": "src.compareblocks.config.file_manager",
        "test_file": "tests/unit/test_configuration_manager.py",
        "description": "Move all files from processing directory to final output directory",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "FileManager.set_mcp_override",
        "class": "FileManager",
        "module": "src.compareblocks.config.file_manager",
        "test_file": "tests/unit/test_configuration_manager.py",
        "description": "Set an MCP override for dynamic file paths (future MCP integration)",
        "parameters": [
          "self",
          "key: str",
          "value: str"
        ]
      },
      {
        "function_name": "FileManager.supports_mcp_integration",
        "class": "FileManager",
        "module": "src.compareblocks.config.file_manager",
        "test_file": "tests/unit/test_configuration_manager.py",
        "description": "Check if configuration supports MCP integration",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "FileManager.validate_target_pdf",
        "class": "FileManager",
        "module": "src.compareblocks.config.file_manager",
        "test_file": "tests/unit/test_configuration_manager.py",
        "description": "Validate that the target PDF exists and is accessible",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "complete_processing_workflow",
        "class": null,
        "module": "src.compareblocks.config.file_manager",
        "test_file": "tests/unit/test_configuration_manager.py",
        "description": "Complete the processing workflow by moving files from processing to final output",
        "parameters": []
      },
      {
        "function_name": "get_output_directory",
        "class": null,
        "module": "src.compareblocks.config.file_manager",
        "test_file": "tests/unit/test_configuration_manager.py",
        "description": "Convenience function to get output directory",
        "parameters": []
      },
      {
        "function_name": "get_target_pdf_path",
        "class": null,
        "module": "src.compareblocks.config.file_manager",
        "test_file": "tests/unit/test_configuration_manager.py",
        "description": "Convenience function to get target PDF path",
        "parameters": []
      },
      {
        "function_name": "validate_configuration",
        "class": null,
        "module": "src.compareblocks.config.file_manager",
        "test_file": "tests/unit/test_configuration_manager.py",
        "description": "Validate the current configuration",
        "parameters": []
      }
    ],
    "compareblocks.config.file_manager": [
      {
        "function_name": "FileManager.get_image_handling_config",
        "class": "FileManager",
        "module": "compareblocks.config.file_manager",
        "test_file": "tests/unit/test_file_manager.py",
        "description": "Get the complete image handling configuration.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "FileManager.get_image_placeholder_text",
        "class": "FileManager",
        "module": "compareblocks.config.file_manager",
        "test_file": "tests/unit/test_file_manager.py",
        "description": "Get the placeholder text used for image blocks.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "FileManager.is_image_block",
        "class": "FileManager",
        "module": "compareblocks.config.file_manager",
        "test_file": "tests/unit/test_file_manager.py",
        "description": "Check if a block represents an image based on its text content.",
        "parameters": [
          "self",
          "text"
        ]
      },
      {
        "function_name": "FileManager.should_ignore_images",
        "class": "FileManager",
        "module": "compareblocks.config.file_manager",
        "test_file": "tests/unit/test_file_manager.py",
        "description": "Check if image blocks should be ignored in extraction and comparison.",
        "parameters": [
          "self",
          "pdf_path"
        ]
      }
    ],
    "src.functions.analyze_project_test_coverage": [
      {
        "function_name": "FunctionAnalyzer.visit_AsyncFunctionDef",
        "class": "FunctionAnalyzer",
        "module": "src.functions.analyze_project_test_coverage",
        "test_file": "tests/unit/test_functions_analyze_project_test_coverage.py",
        "description": "Visit async function definitions.",
        "parameters": [
          "self",
          "node: Any"
        ]
      },
      {
        "function_name": "FunctionAnalyzer.visit_ClassDef",
        "class": "FunctionAnalyzer",
        "module": "src.functions.analyze_project_test_coverage",
        "test_file": "tests/unit/test_functions_analyze_project_test_coverage.py",
        "description": "Visit class definitions.",
        "parameters": [
          "self",
          "node: Any"
        ]
      },
      {
        "function_name": "FunctionAnalyzer.visit_FunctionDef",
        "class": "FunctionAnalyzer",
        "module": "src.functions.analyze_project_test_coverage",
        "test_file": "tests/unit/test_functions_analyze_project_test_coverage.py",
        "description": "Visit function definitions.",
        "parameters": [
          "self",
          "node: Any"
        ]
      }
    ],
    "functions.detect_missing_functions": [
      {
        "function_name": "FunctionDiscovery.__init__",
        "class": "FunctionDiscovery",
        "module": "functions.detect_missing_functions",
        "test_file": "tests/unit/test_function_discovery.py",
        "description": "Initialize function discovery",
        "parameters": [
          "self",
          "src_root: str = \"src\""
        ]
      },
      {
        "function_name": "FunctionDiscovery.append_missing_functions",
        "class": "FunctionDiscovery",
        "module": "functions.detect_missing_functions",
        "test_file": "tests/unit/test_function_discovery.py",
        "description": "Append missing functions to the catalog",
        "parameters": [
          "self",
          "catalog_path: Path",
          "missing_functions: List[Dict[str, Any]]"
        ]
      },
      {
        "function_name": "FunctionDiscovery.discover_all_functions",
        "class": "FunctionDiscovery",
        "module": "functions.detect_missing_functions",
        "test_file": "tests/unit/test_function_discovery.py",
        "description": "Discover all functions in the source directory",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "FunctionDiscovery.discover_functions_from_ast",
        "class": "FunctionDiscovery",
        "module": "functions.detect_missing_functions",
        "test_file": "tests/unit/test_function_discovery.py",
        "description": "Discover functions from a Python file using AST parsing",
        "parameters": [
          "self",
          "file_path: Path"
        ]
      },
      {
        "function_name": "FunctionDiscovery.find_missing_functions",
        "class": "FunctionDiscovery",
        "module": "functions.detect_missing_functions",
        "test_file": "tests/unit/test_function_discovery.py",
        "description": "Find functions that exist in code but are missing from catalog",
        "parameters": [
          "self",
          "catalog_path: Path"
        ]
      },
      {
        "function_name": "FunctionDiscovery.generate_missing_functions_report",
        "class": "FunctionDiscovery",
        "module": "functions.detect_missing_functions",
        "test_file": "tests/unit/test_function_discovery.py",
        "description": "Generate a report of missing functions",
        "parameters": [
          "self",
          "missing_functions: List[Dict[str, Any]]"
        ]
      },
      {
        "function_name": "FunctionDiscovery.load_existing_catalog",
        "class": "FunctionDiscovery",
        "module": "functions.detect_missing_functions",
        "test_file": "tests/unit/test_function_discovery.py",
        "description": "Load existing function catalog and return set of function names",
        "parameters": [
          "self",
          "catalog_path: Path"
        ]
      }
    ],
    "analyze_missing_files_and_functions": [
      {
        "function_name": "FunctionExtractor.visit_ClassDef",
        "class": "FunctionExtractor",
        "module": "analyze_missing_files_and_functions",
        "test_file": "tests/unit/test_analyze_missing_files_and_functions.py",
        "description": "Visit class definitions.",
        "parameters": [
          "self",
          "node: Any"
        ]
      },
      {
        "function_name": "FunctionExtractor.visit_FunctionDef",
        "class": "FunctionExtractor",
        "module": "analyze_missing_files_and_functions",
        "test_file": "tests/unit/test_analyze_missing_files_and_functions.py",
        "description": "Visit function definitions.",
        "parameters": [
          "self",
          "node: Any"
        ]
      },
      {
        "function_name": "analyze_project",
        "class": null,
        "module": "analyze_missing_files_and_functions",
        "test_file": "tests/unit/test_analyze_missing_files_and_functions.py",
        "description": "Analyze the entire project for missing files and functions.",
        "parameters": []
      },
      {
        "function_name": "find_all_python_files",
        "class": null,
        "module": "analyze_missing_files_and_functions",
        "test_file": "tests/unit/test_analyze_missing_files_and_functions.py",
        "description": "Find all Python files in the project, excluding test files and __pycache__.",
        "parameters": []
      },
      {
        "function_name": "generate_function_name",
        "class": null,
        "module": "analyze_missing_files_and_functions",
        "test_file": "tests/unit/test_analyze_missing_files_and_functions.py",
        "description": "Generate function name in catalog format.",
        "parameters": [
          "func_info: Any",
          "class_name: Any",
          "module_path: Any"
        ]
      },
      {
        "function_name": "get_files_in_index",
        "class": null,
        "module": "analyze_missing_files_and_functions",
        "test_file": "tests/unit/test_analyze_missing_files_and_functions.py",
        "description": "Get files mentioned in file_index_readme.md.",
        "parameters": []
      },
      {
        "function_name": "load_function_catalog",
        "class": null,
        "module": "analyze_missing_files_and_functions",
        "test_file": "tests/unit/test_analyze_missing_files_and_functions.py",
        "description": "Load existing function catalog.",
        "parameters": []
      },
      {
        "function_name": "should_be_in_index",
        "class": null,
        "module": "analyze_missing_files_and_functions",
        "test_file": "tests/unit/test_analyze_missing_files_and_functions.py",
        "description": "Determine if a file should be in the file index.",
        "parameters": [
          "file_info: Any"
        ]
      }
    ],
    "compareblocks.engines.gbg_guided_tesseract_engine": [
      {
        "function_name": "GBGGuidedTesseractEngine.__init__",
        "class": "GBGGuidedTesseractEngine",
        "module": "compareblocks.engines.gbg_guided_tesseract_engine",
        "test_file": "tests/unit/test_gbg_guided_tesseract_engine.py",
        "description": "Initialize the GBG-guided Tesseract engine.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "GBGGuidedTesseractEngine.extract_text_with_gbg_guidance",
        "class": "GBGGuidedTesseractEngine",
        "module": "compareblocks.engines.gbg_guided_tesseract_engine",
        "test_file": "tests/unit/test_gbg_guided_tesseract_engine.py",
        "description": "Extract text using GBG guidance for optimal OCR processing.",
        "parameters": [
          "self",
          "pdf_path",
          "gbg_data"
        ]
      }
    ],
    "compareblocks.engines.gbg_integrated_processor": [
      {
        "function_name": "GBGIntegratedEngineProcessor.__init__",
        "class": "GBGIntegratedEngineProcessor",
        "module": "compareblocks.engines.gbg_integrated_processor",
        "test_file": "tests/unit/test_gbg_integrated_processor.py",
        "description": "Initialize the GBG-integrated processor.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "GBGIntegratedEngineProcessor.process_engines_with_gbg_integration",
        "class": "GBGIntegratedEngineProcessor",
        "module": "compareblocks.engines.gbg_integrated_processor",
        "test_file": "tests/unit/test_gbg_integrated_processor.py",
        "description": "Process all engines and integrate results into GBG analysis container.",
        "parameters": [
          "self",
          "pdf_path"
        ]
      }
    ],
    "src.compareblocks.gbg.processor": [
      {
        "function_name": "GBGProcessor.__init__",
        "class": "GBGProcessor",
        "module": "src.compareblocks.gbg.processor",
        "test_file": "tests/integration/test_gbg_seed.py",
        "description": "Initialize the GBG processor with all required components",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "GBGProcessor._analyze_block_geometry",
        "class": "GBGProcessor",
        "module": "src.compareblocks.gbg.processor",
        "test_file": "tests/integration/test_gbg_seed.py",
        "description": "Analyze geometric properties of a block including aspect ratio and position",
        "parameters": [
          "self",
          "block: SeedBlock",
          "page_info: Dict[str, Any]"
        ]
      },
      {
        "function_name": "GBGProcessor._categorize_size",
        "class": "GBGProcessor",
        "module": "src.compareblocks.gbg.processor",
        "test_file": "tests/integration/test_gbg_seed.py",
        "description": "Categorize block size as small, medium, or large",
        "parameters": [
          "self",
          "area: float"
        ]
      },
      {
        "function_name": "GBGProcessor._generate_summary",
        "class": "GBGProcessor",
        "module": "src.compareblocks.gbg.processor",
        "test_file": "tests/integration/test_gbg_seed.py",
        "description": "Generate summary statistics for the entire PDF",
        "parameters": [
          "self",
          "all_blocks: List[Dict]",
          "page_summaries: List[Dict]",
          "total_pages: int"
        ]
      },
      {
        "function_name": "GBGProcessor._get_timestamp",
        "class": "GBGProcessor",
        "module": "src.compareblocks.gbg.processor",
        "test_file": "tests/integration/test_gbg_seed.py",
        "description": "Get current timestamp in ISO format",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "GBGProcessor._get_total_pages",
        "class": "GBGProcessor",
        "module": "src.compareblocks.gbg.processor",
        "test_file": "tests/integration/test_gbg_seed.py",
        "description": "Get total number of pages in PDF",
        "parameters": [
          "self",
          "pdf_path: str"
        ]
      },
      {
        "function_name": "GBGProcessor._save_results",
        "class": "GBGProcessor",
        "module": "src.compareblocks.gbg.processor",
        "test_file": "tests/integration/test_gbg_seed.py",
        "description": "Save results to JSON file",
        "parameters": [
          "self",
          "results: Dict[str, Any]",
          "output_path: str"
        ]
      },
      {
        "function_name": "GBGProcessor.process_page",
        "class": "GBGProcessor",
        "module": "src.compareblocks.gbg.processor",
        "test_file": "tests/integration/test_gbg_seed.py",
        "description": "Process single page through complete GBG pipeline",
        "parameters": [
          "self",
          "pdf_path: str",
          "page_num: int"
        ]
      },
      {
        "function_name": "GBGProcessor.process_pdf",
        "class": "GBGProcessor",
        "module": "src.compareblocks.gbg.processor",
        "test_file": "tests/integration/test_gbg_seed.py",
        "description": "Process entire PDF through complete GBG pipeline",
        "parameters": [
          "self",
          "pdf_path: Optional[str] = None",
          "output_path: Optional[str] = None"
        ]
      }
    ],
    "src.compareblocks.consensus.guard": [
      {
        "function_name": "GuardDecision.to_dict",
        "class": "GuardDecision",
        "module": "src.compareblocks.consensus.guard",
        "test_file": "tests/unit/test_consensus_guard.py",
        "description": "Convert to dictionary format.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "HallucinationGuard.__init__",
        "class": "HallucinationGuard",
        "module": "src.compareblocks.consensus.guard",
        "test_file": "tests/unit/test_consensus_guard.py",
        "description": "Initialize the hallucination guard.",
        "parameters": [
          "self",
          "scorer",
          "guard_thresholds"
        ]
      },
      {
        "function_name": "HallucinationGuard.evaluate_variations",
        "class": "HallucinationGuard",
        "module": "src.compareblocks.consensus.guard",
        "test_file": "tests/unit/test_consensus_guard.py",
        "description": "Evaluate variations and make a guard decision.",
        "parameters": [
          "self",
          "variations",
          "context_texts"
        ]
      },
      {
        "function_name": "HallucinationGuard.get_anomaly_summary",
        "class": "HallucinationGuard",
        "module": "src.compareblocks.consensus.guard",
        "test_file": "tests/unit/test_consensus_guard.py",
        "description": "Get summary of anomalies detected in variations.",
        "parameters": [
          "self",
          "variations"
        ]
      },
      {
        "function_name": "HallucinationGuard.get_guard_configuration",
        "class": "HallucinationGuard",
        "module": "src.compareblocks.consensus.guard",
        "test_file": "tests/unit/test_consensus_guard.py",
        "description": "Get current guard configuration.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "HallucinationGuard.is_variation_safe_for_auto_selection",
        "class": "HallucinationGuard",
        "module": "src.compareblocks.consensus.guard",
        "test_file": "tests/unit/test_consensus_guard.py",
        "description": "Quick check if a single variation is safe for auto-selection.",
        "parameters": [
          "self",
          "variation_text",
          "engine_name"
        ]
      },
      {
        "function_name": "HallucinationGuard.update_guard_thresholds",
        "class": "HallucinationGuard",
        "module": "src.compareblocks.consensus.guard",
        "test_file": "tests/unit/test_consensus_guard.py",
        "description": "Update guard thresholds.",
        "parameters": [
          "self",
          "new_thresholds"
        ]
      },
      {
        "function_name": "check_close_competition",
        "class": null,
        "module": "src.compareblocks.consensus.guard",
        "test_file": "tests/unit/test_consensus_guard.py",
        "description": "Check if multiple variations have very close scores (close competition).",
        "parameters": [
          "scores",
          "threshold"
        ]
      },
      {
        "function_name": "create_default_guard_thresholds",
        "class": null,
        "module": "src.compareblocks.consensus.guard",
        "test_file": "tests/unit/test_consensus_guard.py",
        "description": "Create default guard thresholds for hallucination detection.",
        "parameters": []
      },
      {
        "function_name": "create_strict_guard_thresholds",
        "class": null,
        "module": "src.compareblocks.consensus.guard",
        "test_file": "tests/unit/test_consensus_guard.py",
        "description": "Create strict guard thresholds for conservative hallucination detection.",
        "parameters": []
      },
      {
        "function_name": "detect_hallucination_patterns",
        "class": null,
        "module": "src.compareblocks.consensus.guard",
        "test_file": "tests/unit/test_consensus_guard.py",
        "description": "Detect potential hallucination patterns in a text variation.",
        "parameters": [
          "variation"
        ]
      },
      {
        "function_name": "evaluate_variation_quality",
        "class": null,
        "module": "src.compareblocks.consensus.guard",
        "test_file": "tests/unit/test_consensus_guard.py",
        "description": "Evaluate the quality of a single variation for hallucination detection.",
        "parameters": [
          "variation",
          "thresholds"
        ]
      },
      {
        "function_name": "evaluate_variations",
        "class": null,
        "module": "src.compareblocks.consensus.guard",
        "test_file": "tests/unit/test_consensus_guard.py",
        "description": "Evaluate variations and make a guard decision.",
        "parameters": [
          "self",
          "variations",
          "context_texts"
        ]
      },
      {
        "function_name": "flag_for_manual_review",
        "class": null,
        "module": "src.compareblocks.consensus.guard",
        "test_file": "tests/unit/test_consensus_guard.py",
        "description": "Flag variations for manual review with detailed reasoning.",
        "parameters": [
          "variations",
          "scores",
          "reason"
        ]
      },
      {
        "function_name": "get_anomaly_summary",
        "class": null,
        "module": "src.compareblocks.consensus.guard",
        "test_file": "tests/unit/test_consensus_guard.py",
        "description": "Get summary of anomalies detected in variations.",
        "parameters": [
          "self",
          "variations"
        ]
      },
      {
        "function_name": "get_guard_configuration",
        "class": null,
        "module": "src.compareblocks.consensus.guard",
        "test_file": "tests/unit/test_consensus_guard.py",
        "description": "Get current guard configuration.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "is_variation_safe_for_auto_selection",
        "class": null,
        "module": "src.compareblocks.consensus.guard",
        "test_file": "tests/unit/test_consensus_guard.py",
        "description": "Quick check if a single variation is safe for auto-selection.",
        "parameters": [
          "self",
          "variation_text",
          "engine_name"
        ]
      },
      {
        "function_name": "update_guard_thresholds",
        "class": null,
        "module": "src.compareblocks.consensus.guard",
        "test_file": "tests/unit/test_consensus_guard.py",
        "description": "Update guard thresholds.",
        "parameters": [
          "self",
          "new_thresholds"
        ]
      }
    ],
    "compareblocks.debug.image_extractor": [
      {
        "function_name": "ImageRegionExtractor.__init__",
        "class": "ImageRegionExtractor",
        "module": "compareblocks.debug.image_extractor",
        "test_file": "tests/unit/test_image_extractor.py",
        "description": "Initialize the image extractor.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "ImageRegionExtractor.create_debug_report",
        "class": "ImageRegionExtractor",
        "module": "compareblocks.debug.image_extractor",
        "test_file": "tests/unit/test_image_extractor.py",
        "description": "Create an HTML debug report showing images and OCR results.",
        "parameters": [
          "self",
          "extracted_regions",
          "tesseract_results"
        ]
      },
      {
        "function_name": "ImageRegionExtractor.extract_page_regions",
        "class": "ImageRegionExtractor",
        "module": "compareblocks.debug.image_extractor",
        "test_file": "tests/unit/test_image_extractor.py",
        "description": "Extract image regions for the first few blocks on a page for debugging.",
        "parameters": [
          "self",
          "pdf_path",
          "page_num",
          "gbg_blocks",
          "max_blocks"
        ]
      },
      {
        "function_name": "extract_debug_images_for_page",
        "class": null,
        "module": "compareblocks.debug.image_extractor",
        "test_file": "tests/unit/test_image_extractor.py",
        "description": "Extract debug images for a specific page.",
        "parameters": [
          "pdf_path",
          "page_num",
          "max_blocks"
        ]
      }
    ],
    "compareblocks.gui.import_dialog": [
      {
        "function_name": "ImportDialog.__init__",
        "class": "ImportDialog",
        "module": "compareblocks.gui.import_dialog",
        "test_file": "tests/unit/test_import_dialog.py",
        "description": "Function description",
        "parameters": [
          "self",
          "parent"
        ]
      },
      {
        "function_name": "ImportDialog.apply_import_filters",
        "class": "ImportDialog",
        "module": "compareblocks.gui.import_dialog",
        "test_file": "tests/unit/test_import_dialog.py",
        "description": "Apply import filters to records.",
        "parameters": [
          "self",
          "records",
          "options"
        ]
      },
      {
        "function_name": "ImportDialog.browse_file",
        "class": "ImportDialog",
        "module": "compareblocks.gui.import_dialog",
        "test_file": "tests/unit/test_import_dialog.py",
        "description": "Browse for NDJSON file.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "ImportDialog.handle_duplicates",
        "class": "ImportDialog",
        "module": "compareblocks.gui.import_dialog",
        "test_file": "tests/unit/test_import_dialog.py",
        "description": "Handle duplicate records based on strategy.",
        "parameters": [
          "self",
          "records",
          "handling"
        ]
      },
      {
        "function_name": "ImportDialog.import_variations",
        "class": "ImportDialog",
        "module": "compareblocks.gui.import_dialog",
        "test_file": "tests/unit/test_import_dialog.py",
        "description": "Import the validated variations.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "ImportDialog.on_progress_update",
        "class": "ImportDialog",
        "module": "compareblocks.gui.import_dialog",
        "test_file": "tests/unit/test_import_dialog.py",
        "description": "Handle validation progress updates.",
        "parameters": [
          "self",
          "progress",
          "status"
        ]
      },
      {
        "function_name": "ImportDialog.on_validation_complete",
        "class": "ImportDialog",
        "module": "compareblocks.gui.import_dialog",
        "test_file": "tests/unit/test_import_dialog.py",
        "description": "Handle validation completion.",
        "parameters": [
          "self",
          "success",
          "message",
          "records"
        ]
      },
      {
        "function_name": "ImportDialog.setup_ui",
        "class": "ImportDialog",
        "module": "compareblocks.gui.import_dialog",
        "test_file": "tests/unit/test_import_dialog.py",
        "description": "Setup the import dialog UI.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "ImportDialog.validate_file",
        "class": "ImportDialog",
        "module": "compareblocks.gui.import_dialog",
        "test_file": "tests/unit/test_import_dialog.py",
        "description": "Validate the selected NDJSON file.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "ImportOptionsWidget.__init__",
        "class": "ImportOptionsWidget",
        "module": "compareblocks.gui.import_dialog",
        "test_file": "tests/unit/test_import_dialog.py",
        "description": "Function description",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "ImportOptionsWidget.get_import_options",
        "class": "ImportOptionsWidget",
        "module": "compareblocks.gui.import_dialog",
        "test_file": "tests/unit/test_import_dialog.py",
        "description": "Get the current import options.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "ImportOptionsWidget.set_available_engines",
        "class": "ImportOptionsWidget",
        "module": "compareblocks.gui.import_dialog",
        "test_file": "tests/unit/test_import_dialog.py",
        "description": "Set the available engines for filtering.",
        "parameters": [
          "self",
          "engines"
        ]
      },
      {
        "function_name": "ImportOptionsWidget.setup_ui",
        "class": "ImportOptionsWidget",
        "module": "compareblocks.gui.import_dialog",
        "test_file": "tests/unit/test_import_dialog.py",
        "description": "Setup the import options UI.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "NDJSONPreviewWidget.__init__",
        "class": "NDJSONPreviewWidget",
        "module": "compareblocks.gui.import_dialog",
        "test_file": "tests/unit/test_import_dialog.py",
        "description": "Function description",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "NDJSONPreviewWidget.set_records",
        "class": "NDJSONPreviewWidget",
        "module": "compareblocks.gui.import_dialog",
        "test_file": "tests/unit/test_import_dialog.py",
        "description": "Set the records to preview.",
        "parameters": [
          "self",
          "records"
        ]
      },
      {
        "function_name": "NDJSONPreviewWidget.setup_ui",
        "class": "NDJSONPreviewWidget",
        "module": "compareblocks.gui.import_dialog",
        "test_file": "tests/unit/test_import_dialog.py",
        "description": "Setup the preview UI.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "ValidationWorker.__init__",
        "class": "ValidationWorker",
        "module": "compareblocks.gui.import_dialog",
        "test_file": "tests/unit/test_import_dialog.py",
        "description": "Function description",
        "parameters": [
          "self",
          "file_path"
        ]
      },
      {
        "function_name": "ValidationWorker.run",
        "class": "ValidationWorker",
        "module": "compareblocks.gui.import_dialog",
        "test_file": "tests/unit/test_import_dialog.py",
        "description": "Run validation in background thread.",
        "parameters": [
          "self"
        ]
      }
    ],
    "visual_ocr_testing_tool": [
      {
        "function_name": "InputFeedConfig.__init__",
        "class": "InputFeedConfig",
        "module": "visual_ocr_testing_tool",
        "test_file": "tests/unit/test_visual_ocr_testing_tool.py",
        "description": "Initialize configuration for input feed sources with validation and defaults",
        "parameters": [
          {
            "name": "name",
            "type": "str",
            "description": "Unique name for the feed"
          },
          {
            "name": "type",
            "type": "str",
            "description": "Feed type (mcp, json, api, file, database, code)"
          },
          {
            "name": "source",
            "type": "str",
            "description": "Source path or URL for the feed"
          },
          {
            "name": "enabled",
            "type": "bool",
            "description": "Whether the feed is active",
            "default": true
          },
          {
            "name": "refresh_interval",
            "type": "int",
            "description": "Refresh interval in seconds",
            "default": 30
          },
          {
            "name": "parameters",
            "type": "Optional[Dict[str, Any]]",
            "description": "Additional parameters",
            "default": null
          }
        ]
      },
      {
        "function_name": "InputFeedManager.add_callback",
        "class": "InputFeedManager",
        "module": "visual_ocr_testing_tool",
        "test_file": "tests/unit/test_visual_ocr_testing_tool.py",
        "description": "Add callback for feed updates.",
        "parameters": [
          "self",
          "callback: Any"
        ]
      },
      {
        "function_name": "InputFeedManager.register_feed",
        "class": "InputFeedManager",
        "module": "visual_ocr_testing_tool",
        "test_file": "tests/unit/test_visual_ocr_tool.py",
        "description": "Register a new input feed",
        "parameters": [
          "self",
          "config: InputFeedConfig"
        ]
      },
      {
        "function_name": "InputFeedManager.start_feeds",
        "class": "InputFeedManager",
        "module": "visual_ocr_testing_tool",
        "test_file": "tests/unit/test_visual_ocr_tool.py",
        "description": "Start all enabled feeds",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "InputFeedManager.stop_feeds",
        "class": "InputFeedManager",
        "module": "visual_ocr_testing_tool",
        "test_file": "tests/unit/test_visual_ocr_tool.py",
        "description": "Stop all feeds",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "OCROptimizationEngine.__init__",
        "class": "OCROptimizationEngine",
        "module": "visual_ocr_testing_tool",
        "test_file": "tests/unit/test_visual_ocr_tool.py",
        "description": "Core OCR optimization and testing engine with multi-input feed support",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "OCROptimizationEngine.add_custom_feed",
        "class": "OCROptimizationEngine",
        "module": "visual_ocr_testing_tool",
        "test_file": "tests/unit/test_visual_ocr_testing_tool.py",
        "description": "Add a custom input feed.",
        "parameters": [
          "self",
          "config: Any"
        ]
      },
      {
        "function_name": "OCROptimizationEngine.extract_block_region",
        "class": "OCROptimizationEngine",
        "module": "visual_ocr_testing_tool",
        "test_file": "tests/unit/test_visual_ocr_tool.py",
        "description": "Extract specific block region for testing",
        "parameters": [
          "self",
          "pdf_path",
          "page_num",
          "block_index=0"
        ]
      },
      {
        "function_name": "OCROptimizationEngine.get_feed_status",
        "class": "OCROptimizationEngine",
        "module": "visual_ocr_testing_tool",
        "test_file": "tests/unit/test_visual_ocr_testing_tool.py",
        "description": "Get status of all input feeds.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "OCROptimizationEngine.load_configuration_from_feed",
        "class": "OCROptimizationEngine",
        "module": "visual_ocr_testing_tool",
        "test_file": "tests/unit/test_visual_ocr_testing_tool.py",
        "description": "Load configuration from a specific feed.",
        "parameters": [
          "self",
          "feed_name: Any"
        ]
      },
      {
        "function_name": "OCROptimizationEngine.optimize_ocr_parameters",
        "class": "OCROptimizationEngine",
        "module": "visual_ocr_testing_tool",
        "test_file": "tests/unit/test_visual_ocr_tool.py",
        "description": "Run full OCR parameter optimization",
        "parameters": [
          "self",
          "pdf_path",
          "page_num",
          "block_index"
        ]
      },
      {
        "function_name": "OCROptimizationEngine.start_feeds",
        "class": "OCROptimizationEngine",
        "module": "visual_ocr_testing_tool",
        "test_file": "tests/unit/test_visual_ocr_testing_tool.py",
        "description": "Start all input feeds.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "OCROptimizationEngine.stop_feeds",
        "class": "OCROptimizationEngine",
        "module": "visual_ocr_testing_tool",
        "test_file": "tests/unit/test_visual_ocr_testing_tool.py",
        "description": "Stop all input feeds.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "OCROptimizationEngine.test_improved_engine",
        "class": "OCROptimizationEngine",
        "module": "visual_ocr_testing_tool",
        "test_file": "tests/unit/test_visual_ocr_tool.py",
        "description": "Test the improved GBG-guided Tesseract engine",
        "parameters": [
          "self",
          "pdf_path",
          "page_num=15"
        ]
      },
      {
        "function_name": "OCROptimizationEngine.test_ocr_configuration",
        "class": "OCROptimizationEngine",
        "module": "visual_ocr_testing_tool",
        "test_file": "tests/unit/test_visual_ocr_tool.py",
        "description": "Test specific OCR configuration",
        "parameters": [
          "self",
          "region",
          "expected_text",
          "preprocessing_func",
          "tesseract_config"
        ]
      },
      {
        "function_name": "TestResult.__init__",
        "class": "TestResult",
        "module": "visual_ocr_testing_tool",
        "test_file": "tests/unit/test_visual_ocr_testing_tool.py",
        "description": "Initialize standardized test result structure for OCR testing with comprehensive metadata",
        "parameters": [
          {
            "name": "timestamp",
            "type": "datetime",
            "description": "When the test was performed"
          },
          {
            "name": "source",
            "type": "str",
            "description": "Source of the test"
          },
          {
            "name": "test_type",
            "type": "str",
            "description": "Type of test performed"
          },
          {
            "name": "page_num",
            "type": "int",
            "description": "PDF page number tested"
          },
          {
            "name": "block_index",
            "type": "int",
            "description": "Block index within the page"
          },
          {
            "name": "similarity",
            "type": "float",
            "description": "Similarity score between expected and actual text"
          },
          {
            "name": "confidence",
            "type": "float",
            "description": "OCR confidence score"
          },
          {
            "name": "extracted_text",
            "type": "str",
            "description": "Text extracted by OCR"
          },
          {
            "name": "expected_text",
            "type": "str",
            "description": "Expected text from reference"
          },
          {
            "name": "preprocessing",
            "type": "str",
            "description": "Preprocessing method used"
          },
          {
            "name": "tesseract_config",
            "type": "str",
            "description": "Tesseract configuration used"
          },
          {
            "name": "success",
            "type": "bool",
            "description": "Whether the test was successful"
          },
          {
            "name": "metadata",
            "type": "Optional[Dict[str, Any]]",
            "description": "Additional test metadata",
            "default": null
          }
        ]
      },
      {
        "function_name": "TestResultDatabase.__init__",
        "class": "TestResultDatabase",
        "module": "visual_ocr_testing_tool",
        "test_file": "tests/unit/test_visual_ocr_tool.py",
        "description": "Database for storing and retrieving test results",
        "parameters": [
          "self",
          "db_path: str = \"output/ocr_test_results.db\""
        ]
      },
      {
        "function_name": "TestResultDatabase.get_test_results",
        "class": "TestResultDatabase",
        "module": "visual_ocr_testing_tool",
        "test_file": "tests/unit/test_visual_ocr_tool.py",
        "description": "Retrieve test results from the database",
        "parameters": [
          "self",
          "limit: int = 100",
          "test_type: str = None"
        ]
      },
      {
        "function_name": "TestResultDatabase.save_feed_data",
        "class": "TestResultDatabase",
        "module": "visual_ocr_testing_tool",
        "test_file": "tests/unit/test_visual_ocr_testing_tool.py",
        "description": "Save feed data to the database.",
        "parameters": [
          "self",
          "feed_name: Any",
          "feed_type: Any",
          "data: Any"
        ]
      },
      {
        "function_name": "TestResultDatabase.save_test_result",
        "class": "TestResultDatabase",
        "module": "visual_ocr_testing_tool",
        "test_file": "tests/unit/test_visual_ocr_tool.py",
        "description": "Save a test result to the database",
        "parameters": [
          "self",
          "result: TestResult"
        ]
      },
      {
        "function_name": "VisualOCRTestingWidget.add_custom_feed",
        "class": "VisualOCRTestingWidget",
        "module": "visual_ocr_testing_tool",
        "test_file": "tests/unit/test_visual_ocr_testing_tool.py",
        "description": "Add a custom input feed with enhanced source selection.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "VisualOCRTestingWidget.apply_configuration",
        "class": "VisualOCRTestingWidget",
        "module": "visual_ocr_testing_tool",
        "test_file": "tests/unit/test_visual_ocr_testing_tool.py",
        "description": "Apply current configuration to the testing engine.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "VisualOCRTestingWidget.browse_feed_source",
        "class": "VisualOCRTestingWidget",
        "module": "visual_ocr_testing_tool",
        "test_file": "tests/unit/test_visual_ocr_testing_tool.py",
        "description": "Browse for feed source based on type.",
        "parameters": [
          "self",
          "feed_type: Any",
          "source_edit: Any"
        ]
      },
      {
        "function_name": "VisualOCRTestingWidget.browse_json_files",
        "class": "VisualOCRTestingWidget",
        "module": "visual_ocr_testing_tool",
        "test_file": "tests/unit/test_visual_ocr_testing_tool.py",
        "description": "Browse and select JSON files with enhanced filtering.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "VisualOCRTestingWidget.browse_source_docs_for_feed",
        "class": "VisualOCRTestingWidget",
        "module": "visual_ocr_testing_tool",
        "test_file": "tests/unit/test_visual_ocr_testing_tool.py",
        "description": "Browse Source_docs directory for feed source.",
        "parameters": [
          "self",
          "source_edit: Any"
        ]
      },
      {
        "function_name": "VisualOCRTestingWidget.browse_source_docs_json",
        "class": "VisualOCRTestingWidget",
        "module": "visual_ocr_testing_tool",
        "test_file": "tests/unit/test_visual_ocr_testing_tool.py",
        "description": "Browse JSON files specifically in Source_docs directory with recursive selection.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "VisualOCRTestingWidget.closeEvent",
        "class": "VisualOCRTestingWidget",
        "module": "visual_ocr_testing_tool",
        "test_file": "tests/unit/test_visual_ocr_testing_tool.py",
        "description": "Handle widget close event.",
        "parameters": [
          "self",
          "event: Any"
        ]
      },
      {
        "function_name": "VisualOCRTestingWidget.create_configuration_tab",
        "class": "VisualOCRTestingWidget",
        "module": "visual_ocr_testing_tool",
        "test_file": "tests/unit/test_visual_ocr_testing_tool.py",
        "description": "Create configuration management tab.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "VisualOCRTestingWidget.create_debug_images_tab",
        "class": "VisualOCRTestingWidget",
        "module": "visual_ocr_testing_tool",
        "test_file": "tests/unit/test_visual_ocr_testing_tool.py",
        "description": "Create debug images tab.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "VisualOCRTestingWidget.create_engine_testing_tab",
        "class": "VisualOCRTestingWidget",
        "module": "visual_ocr_testing_tool",
        "test_file": "tests/unit/test_visual_ocr_testing_tool.py",
        "description": "Create engine testing tab.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "VisualOCRTestingWidget.create_feeds_tab",
        "class": "VisualOCRTestingWidget",
        "module": "visual_ocr_testing_tool",
        "test_file": "tests/unit/test_visual_ocr_testing_tool.py",
        "description": "Create input feeds monitoring tab.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "VisualOCRTestingWidget.create_history_tab",
        "class": "VisualOCRTestingWidget",
        "module": "visual_ocr_testing_tool",
        "test_file": "tests/unit/test_visual_ocr_testing_tool.py",
        "description": "Create test results history tab.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "VisualOCRTestingWidget.create_optimization_tab",
        "class": "VisualOCRTestingWidget",
        "module": "visual_ocr_testing_tool",
        "test_file": "tests/unit/test_visual_ocr_testing_tool.py",
        "description": "Create OCR optimization testing tab.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "VisualOCRTestingWidget.discover_and_enable_feeds",
        "class": "VisualOCRTestingWidget",
        "module": "visual_ocr_testing_tool",
        "test_file": "tests/unit/test_visual_ocr_testing_tool.py",
        "description": "Discover and enable Source_docs feeds through GUI selection.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "VisualOCRTestingWidget.extract_debug_images",
        "class": "VisualOCRTestingWidget",
        "module": "visual_ocr_testing_tool",
        "test_file": "tests/unit/test_visual_ocr_testing_tool.py",
        "description": "Extract debug images.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "VisualOCRTestingWidget.load_configuration",
        "class": "VisualOCRTestingWidget",
        "module": "visual_ocr_testing_tool",
        "test_file": "tests/unit/test_visual_ocr_testing_tool.py",
        "description": "Load configuration from selected source.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "VisualOCRTestingWidget.load_json_file",
        "class": "VisualOCRTestingWidget",
        "module": "visual_ocr_testing_tool",
        "test_file": "tests/unit/test_visual_ocr_testing_tool.py",
        "description": "Load and display JSON file content in the configuration editor with comprehensive validation.",
        "parameters": [
          "self",
          "file_path: Any"
        ]
      },
      {
        "function_name": "VisualOCRTestingWidget.load_test_history",
        "class": "VisualOCRTestingWidget",
        "module": "visual_ocr_testing_tool",
        "test_file": "tests/unit/test_visual_ocr_testing_tool.py",
        "description": "Load test results history.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "VisualOCRTestingWidget.open_debug_report",
        "class": "VisualOCRTestingWidget",
        "module": "visual_ocr_testing_tool",
        "test_file": "tests/unit/test_visual_ocr_testing_tool.py",
        "description": "Open the HTML debug report.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "VisualOCRTestingWidget.populate_json_tree",
        "class": "VisualOCRTestingWidget",
        "module": "visual_ocr_testing_tool",
        "test_file": "tests/unit/test_visual_ocr_testing_tool.py",
        "description": "Populate the JSON tree with files from Source_docs directory.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "VisualOCRTestingWidget.preview_json_file",
        "class": "VisualOCRTestingWidget",
        "module": "visual_ocr_testing_tool",
        "test_file": "tests/unit/test_visual_ocr_testing_tool.py",
        "description": "Preview selected JSON file content.",
        "parameters": [
          "self",
          "item: Any",
          "column: Any"
        ]
      },
      {
        "function_name": "VisualOCRTestingWidget.refresh_feeds",
        "class": "VisualOCRTestingWidget",
        "module": "visual_ocr_testing_tool",
        "test_file": "tests/unit/test_visual_ocr_testing_tool.py",
        "description": "Refresh all input feeds.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "VisualOCRTestingWidget.run_ocr_optimization",
        "class": "VisualOCRTestingWidget",
        "module": "visual_ocr_testing_tool",
        "test_file": "tests/unit/test_visual_ocr_testing_tool.py",
        "description": "Run OCR parameter optimization.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "VisualOCRTestingWidget.save_configuration",
        "class": "VisualOCRTestingWidget",
        "module": "visual_ocr_testing_tool",
        "test_file": "tests/unit/test_visual_ocr_testing_tool.py",
        "description": "Save current configuration.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "VisualOCRTestingWidget.setup_ui",
        "class": "VisualOCRTestingWidget",
        "module": "visual_ocr_testing_tool",
        "test_file": "tests/unit/test_visual_ocr_testing_tool.py",
        "description": "Setup the visual testing UI with input feeds.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "VisualOCRTestingWidget.test_improved_engine",
        "class": "VisualOCRTestingWidget",
        "module": "visual_ocr_testing_tool",
        "test_file": "tests/unit/test_visual_ocr_testing_tool.py",
        "description": "Test the improved OCR engine.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "VisualOCRTestingWidget.update_feed_status",
        "class": "VisualOCRTestingWidget",
        "module": "visual_ocr_testing_tool",
        "test_file": "tests/unit/test_visual_ocr_testing_tool.py",
        "description": "Update the feed status display.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "VisualOCRTestingWidget.update_source_options",
        "class": "VisualOCRTestingWidget",
        "module": "visual_ocr_testing_tool",
        "test_file": "tests/unit/test_visual_ocr_testing_tool.py",
        "description": "Update source options based on feed type.",
        "parameters": [
          "self",
          "type_combo: Any",
          "source_layout: Any"
        ]
      },
      {
        "function_name": "run_cli_optimization",
        "class": null,
        "module": "visual_ocr_testing_tool",
        "test_file": "tests/unit/test_visual_ocr_tool.py",
        "description": "Run CLI OCR optimization with feed support",
        "parameters": [
          "args",
          "engine=None"
        ]
      },
      {
        "function_name": "run_debug_extraction",
        "class": null,
        "module": "visual_ocr_testing_tool",
        "test_file": "tests/unit/test_visual_ocr_tool.py",
        "description": "Run debug image extraction",
        "parameters": [
          "args"
        ]
      },
      {
        "function_name": "run_engine_test",
        "class": null,
        "module": "visual_ocr_testing_tool",
        "test_file": "tests/unit/test_visual_ocr_tool.py",
        "description": "Run improved engine test with feed support",
        "parameters": [
          "args",
          "engine=None"
        ]
      }
    ],
    "compareblocks.engines.integrated_processor": [
      {
        "function_name": "IntegratedEngineProcessor.__init__",
        "class": "IntegratedEngineProcessor",
        "module": "compareblocks.engines.integrated_processor",
        "test_file": "tests/unit/test_integrated_processor.py",
        "description": "Initialize the integrated processor.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "IntegratedEngineProcessor.process_pdf_integrated",
        "class": "IntegratedEngineProcessor",
        "module": "compareblocks.engines.integrated_processor",
        "test_file": "tests/unit/test_integrated_processor.py",
        "description": "Process PDF with integrated approach: PyMuPDF first, then align other engines.",
        "parameters": [
          "self",
          "pdf_path"
        ]
      },
      {
        "function_name": "IntegratedEngineProcessor.save_integrated_results",
        "class": "IntegratedEngineProcessor",
        "module": "compareblocks.engines.integrated_processor",
        "test_file": "tests/unit/test_integrated_processor.py",
        "description": "Save integrated processing results.",
        "parameters": [
          "self",
          "result",
          "output_path"
        ]
      },
      {
        "function_name": "process_pdf_with_integrated_engines",
        "class": null,
        "module": "compareblocks.engines.integrated_processor",
        "test_file": "tests/unit/test_integrated_processor.py",
        "description": "Process PDF with integrated engine approach.",
        "parameters": [
          "pdf_path"
        ]
      },
      {
        "function_name": "save_integrated_engine_processing",
        "class": null,
        "module": "compareblocks.engines.integrated_processor",
        "test_file": "tests/unit/test_integrated_processor.py",
        "description": "Process and save integrated engine results.",
        "parameters": [
          "pdf_path",
          "output_path"
        ]
      }
    ],
    "src.compareblocks.mapping.match": [
      {
        "function_name": "IoUMatcher.__init__",
        "class": "IoUMatcher",
        "module": "src.compareblocks.mapping.match",
        "test_file": "tests/unit/test_mapping_iou.py",
        "description": "Initialize the matcher with configuration for IoU thresholds",
        "parameters": [
          "self",
          "config: Optional[MatchConfig] = None"
        ]
      },
      {
        "function_name": "IoUMatcher.calculate_iou",
        "class": "IoUMatcher",
        "module": "src.compareblocks.mapping.match",
        "test_file": "tests/unit/test_mapping_iou.py",
        "description": "Calculate Intersection over Union (IoU) between two bounding boxes",
        "parameters": [
          "self",
          "bbox1: BoundingBox",
          "bbox2: BoundingBox"
        ]
      },
      {
        "function_name": "IoUMatcher.calculate_overlap_area",
        "class": "IoUMatcher",
        "module": "src.compareblocks.mapping.match",
        "test_file": "tests/unit/test_mapping_iou.py",
        "description": "Calculate the overlap area between two bounding boxes",
        "parameters": [
          "self",
          "bbox1: BoundingBox",
          "bbox2: BoundingBox"
        ]
      },
      {
        "function_name": "IoUMatcher.find_best_match",
        "class": "IoUMatcher",
        "module": "src.compareblocks.mapping.match",
        "test_file": "tests/unit/test_mapping_iou.py",
        "description": "Find the best matching seed block for an external bounding box",
        "parameters": [
          "self",
          "external_bbox: BoundingBox",
          "seed_blocks: List[SeedBlock]",
          "page_filter: Optional[int] = None"
        ]
      },
      {
        "function_name": "IoUMatcher.get_match_statistics",
        "class": "IoUMatcher",
        "module": "src.compareblocks.mapping.match",
        "test_file": "tests/unit/test_mapping_iou.py",
        "description": "Get statistics about matching performance across multiple external boxes",
        "parameters": [
          "self",
          "external_bboxes: List[BoundingBox]",
          "seed_blocks: List[SeedBlock]"
        ]
      },
      {
        "function_name": "IoUMatcher.handle_exact_matches",
        "class": "IoUMatcher",
        "module": "src.compareblocks.mapping.match",
        "test_file": "tests/unit/test_mapping_iou.py",
        "description": "Handle exact matches and slightly larger/smaller bounding boxes",
        "parameters": [
          "self",
          "external_bbox: BoundingBox",
          "seed_blocks: List[SeedBlock]",
          "page_filter: Optional[int] = None"
        ]
      },
      {
        "function_name": "IoUMatcher.match_to_seed_blocks",
        "class": "IoUMatcher",
        "module": "src.compareblocks.mapping.match",
        "test_file": "tests/unit/test_mapping_iou.py",
        "description": "Match an external bounding box to seed blocks using IoU",
        "parameters": [
          "self",
          "external_bbox: BoundingBox",
          "seed_blocks: List[SeedBlock]",
          "page_filter: Optional[int] = None"
        ]
      }
    ],
    "compareblocks.engines.kreuzberg_engine": [
      {
        "function_name": "KreuzbergEngine.__init__",
        "class": "KreuzbergEngine",
        "module": "compareblocks.engines.kreuzberg_engine",
        "test_file": "tests/unit/test_kreuzberg_engine.py",
        "description": "Initialize Kreuzberg engine.",
        "parameters": [
          "self",
          "ocr_backend",
          "output_format"
        ]
      },
      {
        "function_name": "KreuzbergEngine.extract_pdf",
        "class": "KreuzbergEngine",
        "module": "compareblocks.engines.kreuzberg_engine",
        "test_file": "tests/unit/test_kreuzberg_engine.py",
        "description": "Extract text from PDF using Kreuzberg.",
        "parameters": [
          "self",
          "pdf_path"
        ]
      },
      {
        "function_name": "KreuzbergEngine.is_available",
        "class": "KreuzbergEngine",
        "module": "compareblocks.engines.kreuzberg_engine",
        "test_file": "tests/unit/test_kreuzberg_engine.py",
        "description": "Check if Kreuzberg is available.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "KreuzbergEngine.save_extraction",
        "class": "KreuzbergEngine",
        "module": "compareblocks.engines.kreuzberg_engine",
        "test_file": "tests/unit/test_kreuzberg_engine.py",
        "description": "Extract and save Kreuzberg data.",
        "parameters": [
          "self",
          "pdf_path",
          "output_path"
        ]
      },
      {
        "function_name": "extract_kreuzberg",
        "class": null,
        "module": "compareblocks.engines.kreuzberg_engine",
        "test_file": "tests/unit/test_kreuzberg_engine.py",
        "description": "Extract text using Kreuzberg.",
        "parameters": [
          "pdf_path",
          "ocr_backend",
          "output_format"
        ]
      },
      {
        "function_name": "save_kreuzberg_extraction",
        "class": null,
        "module": "compareblocks.engines.kreuzberg_engine",
        "test_file": "tests/unit/test_kreuzberg_engine.py",
        "description": "Extract and save Kreuzberg data.",
        "parameters": [
          "pdf_path",
          "output_path",
          "ocr_backend",
          "output_format"
        ]
      }
    ],
    "src.compareblocks.features.language": [
      {
        "function_name": "LanguageFeatureExtractor.__init__",
        "class": "LanguageFeatureExtractor",
        "module": "src.compareblocks.features.language",
        "test_file": "tests/unit/test_features_language.py",
        "description": "Initialize the language feature extractor.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "LanguageFeatureExtractor.compare_language_fitness",
        "class": "LanguageFeatureExtractor",
        "module": "src.compareblocks.features.language",
        "test_file": "tests/unit/test_features_language.py",
        "description": "Compare language fitness scores across variations.",
        "parameters": [
          "self",
          "variations"
        ]
      },
      {
        "function_name": "LanguageFeatureExtractor.extract_features_for_variations",
        "class": "LanguageFeatureExtractor",
        "module": "src.compareblocks.features.language",
        "test_file": "tests/unit/test_features_language.py",
        "description": "Extract language features for multiple variations.",
        "parameters": [
          "self",
          "variations"
        ]
      },
      {
        "function_name": "LanguageFeatureExtractor.extract_language_features",
        "class": "LanguageFeatureExtractor",
        "module": "src.compareblocks.features.language",
        "test_file": "tests/unit/test_features_language.py",
        "description": "Extract language fitness features from text.",
        "parameters": [
          "self",
          "text"
        ]
      },
      {
        "function_name": "LanguageFeatureExtractor.get_language_statistics",
        "class": "LanguageFeatureExtractor",
        "module": "src.compareblocks.features.language",
        "test_file": "tests/unit/test_features_language.py",
        "description": "Get language statistics for a set of variations.",
        "parameters": [
          "self",
          "variations"
        ]
      },
      {
        "function_name": "extract_language_features",
        "class": null,
        "module": "src.compareblocks.features.language",
        "test_file": "tests/unit/test_features_language.py",
        "description": "Extract language fitness features from text.",
        "parameters": [
          "self",
          "text"
        ]
      }
    ],
    "compareblocks.features.language": [
      {
        "function_name": "LanguageFeatures.to_dict",
        "class": "LanguageFeatures",
        "module": "compareblocks.features.language",
        "test_file": "tests/unit/test_language.py",
        "description": "Convert features to dictionary format.",
        "parameters": [
          "self"
        ]
      }
    ],
    "compareblocks.features.core": [
      {
        "function_name": "LengthFeatures.to_dict",
        "class": "LengthFeatures",
        "module": "compareblocks.features.core",
        "test_file": "tests/unit/test_core.py",
        "description": "Convert features to dictionary format.",
        "parameters": [
          "self"
        ]
      }
    ],
    "src.compareblocks.mcp.client": [
      {
        "function_name": "MCPClient.__init__",
        "class": "MCPClient",
        "module": "src.compareblocks.mcp.client",
        "test_file": "tests/integration/test_mcp_integration.py",
        "description": "Initialize MCP client with server URL",
        "parameters": [
          "self",
          "server_url: str = 'ws://localhost:8765'"
        ]
      },
      {
        "function_name": "MCPClient.connect",
        "class": "MCPClient",
        "module": "src.compareblocks.mcp.client",
        "test_file": "tests/integration/test_mcp_integration.py",
        "description": "Connect to MCP server via WebSocket",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "MCPClient.disconnect",
        "class": "MCPClient",
        "module": "src.compareblocks.mcp.client",
        "test_file": "tests/integration/test_mcp_integration.py",
        "description": "Disconnect from MCP server",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "MCPClient.get_client_info",
        "class": "MCPClient",
        "module": "src.compareblocks.mcp.client",
        "test_file": "tests/integration/test_mcp_integration.py",
        "description": "Get client information and status",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "MCPClient.get_results",
        "class": "MCPClient",
        "module": "src.compareblocks.mcp.client",
        "test_file": "tests/integration/test_mcp_integration.py",
        "description": "Get processing results for completed session",
        "parameters": [
          "self",
          "session_id: str",
          "format_type: str = 'json'",
          "include_analytics: bool = False"
        ]
      },
      {
        "function_name": "MCPClient.get_status",
        "class": "MCPClient",
        "module": "src.compareblocks.mcp.client",
        "test_file": "tests/integration/test_mcp_integration.py",
        "description": "Get processing status for session or system",
        "parameters": [
          "self",
          "session_id: Optional[str] = None",
          "include_details: bool = False"
        ]
      },
      {
        "function_name": "MCPClient.initialize",
        "class": "MCPClient",
        "module": "src.compareblocks.mcp.client",
        "test_file": "tests/integration/test_mcp_integration.py",
        "description": "Initialize MCP connection with server",
        "parameters": [
          "self",
          "client_info: Dict[str, Any]"
        ]
      },
      {
        "function_name": "MCPClient.is_connected",
        "class": "MCPClient",
        "module": "src.compareblocks.mcp.client",
        "test_file": "tests/integration/test_mcp_integration.py",
        "description": "Check if client is connected to server",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "MCPClient.is_initialized",
        "class": "MCPClient",
        "module": "src.compareblocks.mcp.client",
        "test_file": "tests/integration/test_mcp_integration.py",
        "description": "Check if client is initialized with server",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "MCPClient.set_notification_handler",
        "class": "MCPClient",
        "module": "src.compareblocks.mcp.client",
        "test_file": "tests/integration/test_mcp_integration.py",
        "description": "Set handler for notification events",
        "parameters": [
          "self",
          "event_type: str",
          "handler: Callable[[Dict[str, Any]], None]"
        ]
      },
      {
        "function_name": "MCPClient.submit_extraction",
        "class": "MCPClient",
        "module": "src.compareblocks.mcp.client",
        "test_file": "tests/integration/test_mcp_integration.py",
        "description": "Submit extraction data for processing",
        "parameters": [
          "self",
          "pdf_path: str",
          "variations: List[Dict[str, Any]]",
          "metadata: Optional[Dict[str, Any]] = None"
        ]
      },
      {
        "function_name": "MCPClient.subscribe_updates",
        "class": "MCPClient",
        "module": "src.compareblocks.mcp.client",
        "test_file": "tests/integration/test_mcp_integration.py",
        "description": "Subscribe to event notifications",
        "parameters": [
          "self",
          "event_types: List[str]"
        ]
      },
      {
        "function_name": "MCPClient.unsubscribe_updates",
        "class": "MCPClient",
        "module": "src.compareblocks.mcp.client",
        "test_file": "tests/integration/test_mcp_integration.py",
        "description": "Unsubscribe from event notifications",
        "parameters": [
          "self",
          "event_types: List[str]"
        ]
      }
    ],
    "src.compareblocks.mcp.protocol": [
      {
        "function_name": "MCPMessage.__post_init__",
        "class": "MCPMessage",
        "module": "src.compareblocks.mcp.protocol",
        "test_file": "tests/unit/test_mcp_protocol.py",
        "description": "Initialize MCP message with auto-generated ID if not provided",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "MCPMessage.from_dict",
        "class": "MCPMessage",
        "module": "src.compareblocks.mcp.protocol",
        "test_file": "tests/unit/test_mcp_protocol.py",
        "description": "Create MCP message from dictionary data",
        "parameters": [
          "cls",
          "data: Dict[str, Any]"
        ]
      },
      {
        "function_name": "MCPMessage.from_json",
        "class": "MCPMessage",
        "module": "src.compareblocks.mcp.protocol",
        "test_file": "tests/unit/test_mcp_protocol.py",
        "description": "Create MCP message from JSON string",
        "parameters": [
          "cls",
          "json_str: str"
        ]
      },
      {
        "function_name": "MCPMessage.to_dict",
        "class": "MCPMessage",
        "module": "src.compareblocks.mcp.protocol",
        "test_file": "tests/unit/test_mcp_protocol.py",
        "description": "Convert MCP message to dictionary format excluding None values",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "MCPMessage.to_json",
        "class": "MCPMessage",
        "module": "src.compareblocks.mcp.protocol",
        "test_file": "tests/unit/test_mcp_protocol.py",
        "description": "Convert MCP message to JSON string format",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "MCPProtocol.__init__",
        "class": "MCPProtocol",
        "module": "src.compareblocks.mcp.protocol",
        "test_file": "tests/unit/test_mcp_protocol.py",
        "description": "Initialize MCP protocol handler with version and capabilities",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "MCPProtocol.create_error_response",
        "class": "MCPProtocol",
        "module": "src.compareblocks.mcp.protocol",
        "test_file": "tests/unit/test_mcp_protocol.py",
        "description": "Create an MCP error response message",
        "parameters": [
          "self",
          "request_id: str",
          "error_code: MCPErrorCode",
          "message: str",
          "data: Optional[Dict[str, Any]] = None"
        ]
      },
      {
        "function_name": "MCPProtocol.create_notification",
        "class": "MCPProtocol",
        "module": "src.compareblocks.mcp.protocol",
        "test_file": "tests/unit/test_mcp_protocol.py",
        "description": "Create an MCP notification message",
        "parameters": [
          "self",
          "method: str",
          "params: Optional[Dict[str, Any]] = None"
        ]
      },
      {
        "function_name": "MCPProtocol.create_processing_complete",
        "class": "MCPProtocol",
        "module": "src.compareblocks.mcp.protocol",
        "test_file": "tests/unit/test_mcp_protocol.py",
        "description": "Create processing complete notification message",
        "parameters": [
          "self",
          "result_data: Dict[str, Any]"
        ]
      },
      {
        "function_name": "MCPProtocol.create_request",
        "class": "MCPProtocol",
        "module": "src.compareblocks.mcp.protocol",
        "test_file": "tests/unit/test_mcp_protocol.py",
        "description": "Create an MCP request message with method and parameters",
        "parameters": [
          "self",
          "method: str",
          "params: Optional[Dict[str, Any]] = None"
        ]
      },
      {
        "function_name": "MCPProtocol.create_response",
        "class": "MCPProtocol",
        "module": "src.compareblocks.mcp.protocol",
        "test_file": "tests/unit/test_mcp_protocol.py",
        "description": "Create an MCP response message for a request",
        "parameters": [
          "self",
          "request_id: str",
          "result: Any"
        ]
      },
      {
        "function_name": "MCPProtocol.create_status_update",
        "class": "MCPProtocol",
        "module": "src.compareblocks.mcp.protocol",
        "test_file": "tests/unit/test_mcp_protocol.py",
        "description": "Create status update notification message",
        "parameters": [
          "self",
          "status_data: Dict[str, Any]"
        ]
      },
      {
        "function_name": "MCPProtocol.get_subscribers",
        "class": "MCPProtocol",
        "module": "src.compareblocks.mcp.protocol",
        "test_file": "tests/unit/test_mcp_protocol.py",
        "description": "Get list of subscribers for an event type",
        "parameters": [
          "self",
          "event_type: str"
        ]
      },
      {
        "function_name": "MCPProtocol.handle_initialize",
        "class": "MCPProtocol",
        "module": "src.compareblocks.mcp.protocol",
        "test_file": "tests/unit/test_mcp_protocol.py",
        "description": "Handle MCP initialize request with server capabilities",
        "parameters": [
          "self",
          "params: Dict[str, Any]"
        ]
      },
      {
        "function_name": "MCPProtocol.subscribe_client",
        "class": "MCPProtocol",
        "module": "src.compareblocks.mcp.protocol",
        "test_file": "tests/unit/test_mcp_protocol.py",
        "description": "Subscribe client to event notifications",
        "parameters": [
          "self",
          "client_id: str",
          "event_types: List[str]"
        ]
      },
      {
        "function_name": "MCPProtocol.unsubscribe_client",
        "class": "MCPProtocol",
        "module": "src.compareblocks.mcp.protocol",
        "test_file": "tests/unit/test_mcp_protocol.py",
        "description": "Unsubscribe client from event notifications",
        "parameters": [
          "self",
          "client_id: str",
          "event_types: List[str]"
        ]
      },
      {
        "function_name": "MCPProtocol.validate_message",
        "class": "MCPProtocol",
        "module": "src.compareblocks.mcp.protocol",
        "test_file": "tests/unit/test_mcp_protocol.py",
        "description": "Validate MCP message structure and method",
        "parameters": [
          "self",
          "message: MCPMessage"
        ]
      }
    ],
    "src.compareblocks.mcp.server": [
      {
        "function_name": "MCPServer.__init__",
        "class": "MCPServer",
        "module": "src.compareblocks.mcp.server",
        "test_file": "tests/integration/test_mcp_integration.py",
        "description": "Initialize MCP server with host, port and handlers",
        "parameters": [
          "self",
          "host: str = 'localhost'",
          "port: int = 8765"
        ]
      },
      {
        "function_name": "MCPServer.broadcast_notification",
        "class": "MCPServer",
        "module": "src.compareblocks.mcp.server",
        "test_file": "tests/integration/test_mcp_integration.py",
        "description": "Broadcast notification to subscribed clients",
        "parameters": [
          "self",
          "event_type: str",
          "data: Dict[str, Any]"
        ]
      },
      {
        "function_name": "MCPServer.get_client_info",
        "class": "MCPServer",
        "module": "src.compareblocks.mcp.server",
        "test_file": "tests/integration/test_mcp_integration.py",
        "description": "Get information about connected clients",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "MCPServer.get_server_info",
        "class": "MCPServer",
        "module": "src.compareblocks.mcp.server",
        "test_file": "tests/integration/test_mcp_integration.py",
        "description": "Get server information and status",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "MCPServer.start",
        "class": "MCPServer",
        "module": "src.compareblocks.mcp.server",
        "test_file": "tests/integration/test_mcp_integration.py",
        "description": "Start the MCP WebSocket server",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "MCPServer.stop",
        "class": "MCPServer",
        "module": "src.compareblocks.mcp.server",
        "test_file": "tests/integration/test_mcp_integration.py",
        "description": "Stop the MCP WebSocket server",
        "parameters": [
          "self"
        ]
      }
    ],
    "src.compareblocks.mcp.validation": [
      {
        "function_name": "MCPValidator.__init__",
        "class": "MCPValidator",
        "module": "src.compareblocks.mcp.validation",
        "test_file": "tests/unit/test_mcp_validation.py",
        "description": "Initialize MCP validator with message schemas",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "MCPValidator.get_schema",
        "class": "MCPValidator",
        "module": "src.compareblocks.mcp.validation",
        "test_file": "tests/unit/test_mcp_validation.py",
        "description": "Get MCP schema by name",
        "parameters": [
          "self",
          "schema_name: str"
        ]
      },
      {
        "function_name": "MCPValidator.list_schemas",
        "class": "MCPValidator",
        "module": "src.compareblocks.mcp.validation",
        "test_file": "tests/unit/test_mcp_validation.py",
        "description": "List available schema names",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "MCPValidator.sanitize_extraction_data",
        "class": "MCPValidator",
        "module": "src.compareblocks.mcp.validation",
        "test_file": "tests/unit/test_mcp_validation.py",
        "description": "Sanitize extraction data for security",
        "parameters": [
          "self",
          "data: Dict[str, Any]"
        ]
      },
      {
        "function_name": "MCPValidator.validate_consensus_output",
        "class": "MCPValidator",
        "module": "src.compareblocks.mcp.validation",
        "test_file": "tests/unit/test_validation.py",
        "description": "Validate consensus output data.",
        "parameters": [
          "self",
          "data: Any"
        ]
      },
      {
        "function_name": "MCPValidator.validate_extraction_submission",
        "class": "MCPValidator",
        "module": "src.compareblocks.mcp.validation",
        "test_file": "tests/unit/test_mcp_validation.py",
        "description": "Validate extraction submission data against schema",
        "parameters": [
          "self",
          "data: Dict[str, Any]"
        ]
      },
      {
        "function_name": "MCPValidator.validate_pdf_path",
        "class": "MCPValidator",
        "module": "src.compareblocks.mcp.validation",
        "test_file": "tests/unit/test_mcp_validation.py",
        "description": "Validate PDF file path for security and existence",
        "parameters": [
          "self",
          "pdf_path: str"
        ]
      },
      {
        "function_name": "MCPValidator.validate_results_request",
        "class": "MCPValidator",
        "module": "src.compareblocks.mcp.validation",
        "test_file": "tests/unit/test_mcp_validation.py",
        "description": "Validate results request data against schema",
        "parameters": [
          "self",
          "data: Dict[str, Any]"
        ]
      },
      {
        "function_name": "MCPValidator.validate_status_request",
        "class": "MCPValidator",
        "module": "src.compareblocks.mcp.validation",
        "test_file": "tests/unit/test_mcp_validation.py",
        "description": "Validate status request data against schema",
        "parameters": [
          "self",
          "data: Dict[str, Any]"
        ]
      },
      {
        "function_name": "MCPValidator.validate_subscription_request",
        "class": "MCPValidator",
        "module": "src.compareblocks.mcp.validation",
        "test_file": "tests/unit/test_mcp_validation.py",
        "description": "Validate subscription request data against schema",
        "parameters": [
          "self",
          "data: Dict[str, Any]"
        ]
      }
    ],
    "src.compareblocks.consensus.merge": [
      {
        "function_name": "MergeResult.to_dict",
        "class": "MergeResult",
        "module": "src.compareblocks.consensus.merge",
        "test_file": "tests/unit/test_consensus_merge.py",
        "description": "Convert to dictionary format.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "TokenLevelMerger.__init__",
        "class": "TokenLevelMerger",
        "module": "src.compareblocks.consensus.merge",
        "test_file": "tests/unit/test_consensus_merge.py",
        "description": "Initialize the token-level merger.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "TokenLevelMerger.get_merge_preview",
        "class": "TokenLevelMerger",
        "module": "src.compareblocks.consensus.merge",
        "test_file": "tests/unit/test_consensus_merge.py",
        "description": "Get a preview of what merging would produce without full processing.",
        "parameters": [
          "self",
          "variations",
          "max_differences"
        ]
      },
      {
        "function_name": "TokenLevelMerger.merge_variations",
        "class": "TokenLevelMerger",
        "module": "src.compareblocks.consensus.merge",
        "test_file": "tests/unit/test_consensus_merge.py",
        "description": "Merge multiple text variations using specified strategy.",
        "parameters": [
          "self",
          "variations",
          "variation_qualities",
          "strategy"
        ]
      },
      {
        "function_name": "TokenLevelMerger.merge_with_quality_weights",
        "class": "TokenLevelMerger",
        "module": "src.compareblocks.consensus.merge",
        "test_file": "tests/unit/test_consensus_merge.py",
        "description": "Merge variations using their quality scores as weights.",
        "parameters": [
          "self",
          "variations"
        ]
      },
      {
        "function_name": "calculate_character_alignment_score",
        "class": null,
        "module": "src.compareblocks.consensus.merge",
        "test_file": "tests/unit/test_consensus_merge.py",
        "description": "Calculate character-level alignment score between two texts.",
        "parameters": [
          "text1",
          "text2"
        ]
      },
      {
        "function_name": "calculate_merge_confidence",
        "class": null,
        "module": "src.compareblocks.consensus.merge",
        "test_file": "tests/unit/test_consensus_merge.py",
        "description": "Calculate confidence score for a merge result.",
        "parameters": [
          "texts",
          "merged_text"
        ]
      },
      {
        "function_name": "create_merge_alignment",
        "class": null,
        "module": "src.compareblocks.consensus.merge",
        "test_file": "tests/unit/test_consensus_merge.py",
        "description": "Create character-level alignment for multiple texts.",
        "parameters": [
          "texts"
        ]
      },
      {
        "function_name": "find_common_subsequence",
        "class": null,
        "module": "src.compareblocks.consensus.merge",
        "test_file": "tests/unit/test_consensus_merge.py",
        "description": "Find the longest common subsequence between two texts.",
        "parameters": [
          "text1",
          "text2"
        ]
      },
      {
        "function_name": "get_merge_preview",
        "class": null,
        "module": "src.compareblocks.consensus.merge",
        "test_file": "tests/unit/test_consensus_merge.py",
        "description": "Get a preview of what merging would produce without full processing.",
        "parameters": [
          "self",
          "variations",
          "max_differences"
        ]
      },
      {
        "function_name": "merge_by_confidence",
        "class": null,
        "module": "src.compareblocks.consensus.merge",
        "test_file": "tests/unit/test_consensus_merge.py",
        "description": "Merge texts by selecting characters based on confidence scores.",
        "parameters": [
          "texts",
          "confidences"
        ]
      },
      {
        "function_name": "merge_by_majority_vote",
        "class": null,
        "module": "src.compareblocks.consensus.merge",
        "test_file": "tests/unit/test_consensus_merge.py",
        "description": "Merge texts by character-level majority voting.",
        "parameters": [
          "texts"
        ]
      },
      {
        "function_name": "merge_variations",
        "class": null,
        "module": "src.compareblocks.consensus.merge",
        "test_file": "tests/unit/test_consensus_merge.py",
        "description": "Merge multiple text variations using specified strategy.",
        "parameters": [
          "self",
          "variations",
          "variation_qualities",
          "strategy"
        ]
      },
      {
        "function_name": "merge_with_quality_weights",
        "class": null,
        "module": "src.compareblocks.consensus.merge",
        "test_file": "tests/unit/test_consensus_merge.py",
        "description": "Merge variations using their quality scores as weights.",
        "parameters": [
          "self",
          "variations"
        ]
      },
      {
        "function_name": "validate_merge_result",
        "class": null,
        "module": "src.compareblocks.consensus.merge",
        "test_file": "tests/unit/test_consensus_merge.py",
        "description": "Validate the quality of a merge result.",
        "parameters": [
          "original_texts",
          "merged_text"
        ]
      }
    ],
    "src.compareblocks.io.loader": [
      {
        "function_name": "NDJSONLoader.__init__",
        "class": "NDJSONLoader",
        "module": "src.compareblocks.io.loader",
        "test_file": "tests/unit/test_io_validation.py",
        "description": "Initialize NDJSON loader with input schema validator",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "NDJSONLoader._format_validation_error",
        "class": "NDJSONLoader",
        "module": "src.compareblocks.io.loader",
        "test_file": "tests/unit/test_io_validation.py",
        "description": "Format a jsonschema ValidationError into a clear error message",
        "parameters": [
          "self",
          "error: ValidationError"
        ]
      },
      {
        "function_name": "NDJSONLoader._normalize_record",
        "class": "NDJSONLoader",
        "module": "src.compareblocks.io.loader",
        "test_file": "tests/unit/test_io_validation.py",
        "description": "Normalize record fields for consistent processing",
        "parameters": [
          "self",
          "record: Dict[str, Any]"
        ]
      },
      {
        "function_name": "NDJSONLoader._validate_mapping_requirements",
        "class": "NDJSONLoader",
        "module": "src.compareblocks.io.loader",
        "test_file": "tests/unit/test_io_validation.py",
        "description": "Validate that record has either block_id or bbox for mapping flexibility",
        "parameters": [
          "self",
          "record: Dict[str, Any]",
          "line_number: Optional[int] = None"
        ]
      },
      {
        "function_name": "NDJSONLoader.load_file",
        "class": "NDJSONLoader",
        "module": "src.compareblocks.io.loader",
        "test_file": "tests/unit/test_io_validation.py",
        "description": "Load and validate an entire NDJSON file",
        "parameters": [
          "self",
          "file_path"
        ]
      },
      {
        "function_name": "NDJSONLoader.load_stream",
        "class": "NDJSONLoader",
        "module": "src.compareblocks.io.loader",
        "test_file": "tests/unit/test_io_validation.py",
        "description": "Stream and validate NDJSON records one at a time",
        "parameters": [
          "self",
          "file_path: Path"
        ]
      },
      {
        "function_name": "NDJSONLoader.validate_record",
        "class": "NDJSONLoader",
        "module": "src.compareblocks.io.loader",
        "test_file": "tests/unit/test_io_validation.py",
        "description": "Validate a single record against the input schema",
        "parameters": [
          "self",
          "record: Dict[str, Any]",
          "line_number: Optional[int] = None"
        ]
      },
      {
        "function_name": "ValidationException.__init__",
        "class": "ValidationException",
        "module": "src.compareblocks.io.loader",
        "test_file": "tests/unit/test_io_validation.py",
        "description": "Initialize validation exception with message, line number, and record context",
        "parameters": [
          "self",
          "message: str",
          "line_number: Optional[int] = None",
          "record: Optional[Dict[str, Any]] = None"
        ]
      },
      {
        "function_name": "ValidationException._format_message",
        "class": "ValidationException",
        "module": "src.compareblocks.io.loader",
        "test_file": "tests/unit/test_io_validation.py",
        "description": "Format the error message with context",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "load_ndjson_file",
        "class": null,
        "module": "src.compareblocks.io.loader",
        "test_file": "tests/unit/test_io_validation.py",
        "description": "Convenience function to load and validate an NDJSON file",
        "parameters": [
          "file_path: Path"
        ]
      },
      {
        "function_name": "validate_ndjson_record",
        "class": null,
        "module": "src.compareblocks.io.loader",
        "test_file": "tests/unit/test_io_validation.py",
        "description": "Convenience function to validate a single NDJSON record",
        "parameters": [
          "record: Dict[str, Any]"
        ]
      }
    ],
    "compareblocks.io.writer": [
      {
        "function_name": "NDJSONWriter.write_consensus_records",
        "class": "NDJSONWriter",
        "module": "compareblocks.io.writer",
        "test_file": "tests/unit/test_writer.py",
        "description": "Write consensus records to NDJSON file.",
        "parameters": [
          "self",
          "records",
          "file_path"
        ]
      }
    ],
    "src.compareblocks.gbg.orientation": [
      {
        "function_name": "OrientationDetector.__init__",
        "class": "OrientationDetector",
        "module": "src.compareblocks.gbg.orientation",
        "test_file": "tests/integration/test_gbg_seed.py",
        "description": "Initialize orientation detector with OpenCV dependency check",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "OrientationDetector._rotate_image",
        "class": "OrientationDetector",
        "module": "src.compareblocks.gbg.orientation",
        "test_file": "tests/integration/test_gbg_seed.py",
        "description": "Rotate image by specified angle using OpenCV",
        "parameters": [
          "self",
          "image: np.ndarray",
          "angle: float"
        ]
      },
      {
        "function_name": "OrientationDetector.detect_block_skew",
        "class": "OrientationDetector",
        "module": "src.compareblocks.gbg.orientation",
        "test_file": "tests/integration/test_gbg_seed.py",
        "description": "Detect individual text block skew using Hough line detection",
        "parameters": [
          "self",
          "image: np.ndarray",
          "bbox_region: Optional[np.ndarray] = None"
        ]
      },
      {
        "function_name": "OrientationDetector.detect_combined_orientation",
        "class": "OrientationDetector",
        "module": "src.compareblocks.gbg.orientation",
        "test_file": "tests/integration/test_gbg_seed.py",
        "description": "Combine page-level and block-level orientation detection",
        "parameters": [
          "self",
          "image: np.ndarray",
          "bbox_region: Optional[np.ndarray] = None"
        ]
      },
      {
        "function_name": "OrientationDetector.detect_page_orientation",
        "class": "OrientationDetector",
        "module": "src.compareblocks.gbg.orientation",
        "test_file": "tests/integration/test_gbg_seed.py",
        "description": "Detect page-level orientation using projection profile analysis",
        "parameters": [
          "self",
          "image: np.ndarray"
        ]
      },
      {
        "function_name": "ProjectionProfileAnalyzer.analyze_projection_variance",
        "class": "ProjectionProfileAnalyzer",
        "module": "src.compareblocks.gbg.orientation",
        "test_file": "tests/integration/test_gbg_seed.py",
        "description": "Calculate variance of projection profile",
        "parameters": [
          "projection: np.ndarray"
        ]
      },
      {
        "function_name": "ProjectionProfileAnalyzer.calculate_horizontal_projection",
        "class": "ProjectionProfileAnalyzer",
        "module": "src.compareblocks.gbg.orientation",
        "test_file": "tests/integration/test_gbg_seed.py",
        "description": "Calculate horizontal projection profile (sum of pixels per row)",
        "parameters": [
          "image: np.ndarray"
        ]
      },
      {
        "function_name": "ProjectionProfileAnalyzer.calculate_vertical_projection",
        "class": "ProjectionProfileAnalyzer",
        "module": "src.compareblocks.gbg.orientation",
        "test_file": "tests/integration/test_gbg_seed.py",
        "description": "Calculate vertical projection profile (sum of pixels per column)",
        "parameters": [
          "image: np.ndarray"
        ]
      },
      {
        "function_name": "ProjectionProfileAnalyzer.find_text_lines",
        "class": "ProjectionProfileAnalyzer",
        "module": "src.compareblocks.gbg.orientation",
        "test_file": "tests/integration/test_gbg_seed.py",
        "description": "Find text line boundaries from horizontal projection",
        "parameters": [
          "horizontal_projection: np.ndarray",
          "threshold_ratio: float = 0.1"
        ]
      }
    ],
    "compareblocks.io.pdf_metadata": [
      {
        "function_name": "PDFMetadataExtractor.__init__",
        "class": "PDFMetadataExtractor",
        "module": "compareblocks.io.pdf_metadata",
        "test_file": "tests/unit/test_pdf_metadata.py",
        "description": "Initialize the PDF metadata extractor.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "PDFMetadataExtractor.create_root_pdf_json",
        "class": "PDFMetadataExtractor",
        "module": "compareblocks.io.pdf_metadata",
        "test_file": "tests/unit/test_pdf_metadata.py",
        "description": "Create comprehensive root PDF JSON with proper metadata.",
        "parameters": [
          "self",
          "pdf_path",
          "associated_files"
        ]
      },
      {
        "function_name": "PDFMetadataExtractor.extract_pdf_metadata",
        "class": "PDFMetadataExtractor",
        "module": "compareblocks.io.pdf_metadata",
        "test_file": "tests/unit/test_pdf_metadata.py",
        "description": "Extract comprehensive PDF metadata with proper filename normalization.",
        "parameters": [
          "self",
          "pdf_path"
        ]
      },
      {
        "function_name": "PDFMetadataExtractor.get_display_name",
        "class": "PDFMetadataExtractor",
        "module": "compareblocks.io.pdf_metadata",
        "test_file": "tests/unit/test_pdf_metadata.py",
        "description": "Get a clean display name for the PDF.",
        "parameters": [
          "self",
          "pdf_path"
        ]
      },
      {
        "function_name": "create_root_pdf_json",
        "class": null,
        "module": "compareblocks.io.pdf_metadata",
        "test_file": "tests/unit/test_pdf_metadata.py",
        "description": "Create root PDF JSON using the PDFMetadataExtractor.",
        "parameters": [
          "pdf_path",
          "associated_files"
        ]
      },
      {
        "function_name": "extract_pdf_metadata",
        "class": null,
        "module": "compareblocks.io.pdf_metadata",
        "test_file": "tests/unit/test_pdf_metadata.py",
        "description": "Extract PDF metadata using the PDFMetadataExtractor.",
        "parameters": [
          "pdf_path"
        ]
      }
    ],
    "src.compareblocks.gbg.seed": [
      {
        "function_name": "PDFPageAnalyzer.analyze_layout_structure",
        "class": "PDFPageAnalyzer",
        "module": "src.compareblocks.gbg.seed",
        "test_file": "tests/integration/test_gbg_seed.py",
        "description": "Analyze the overall layout structure of a PDF",
        "parameters": [
          "pdf_path: str"
        ]
      },
      {
        "function_name": "PDFPageAnalyzer.get_page_info",
        "class": "PDFPageAnalyzer",
        "module": "src.compareblocks.gbg.seed",
        "test_file": "tests/integration/test_gbg_seed.py",
        "description": "Get basic information about a PDF page including dimensions and text presence",
        "parameters": [
          "pdf_path: str",
          "page_num: int"
        ]
      },
      {
        "function_name": "SeedBlockDetector.__init__",
        "class": "SeedBlockDetector",
        "module": "src.compareblocks.gbg.seed",
        "test_file": "tests/integration/test_gbg_seed.py",
        "description": "Initialize the seed block detector with minimum block area and merge threshold parameters",
        "parameters": [
          "self",
          "min_block_area: float = 100.0",
          "merge_threshold: float = 10.0"
        ]
      },
      {
        "function_name": "SeedBlockDetector._detect_page_orientation",
        "class": "SeedBlockDetector",
        "module": "src.compareblocks.gbg.seed",
        "test_file": "tests/integration/test_gbg_seed.py",
        "description": "Detect page-level orientation using image analysis",
        "parameters": [
          "self",
          "page: fitz.Page"
        ]
      },
      {
        "function_name": "SeedBlockDetector._extract_text_blocks",
        "class": "SeedBlockDetector",
        "module": "src.compareblocks.gbg.seed",
        "test_file": "tests/integration/test_gbg_seed.py",
        "description": "Extract text blocks from a PyMuPDF page object",
        "parameters": [
          "self",
          "page: fitz.Page"
        ]
      },
      {
        "function_name": "SeedBlockDetector._is_multi_column_block",
        "class": "SeedBlockDetector",
        "module": "src.compareblocks.gbg.seed",
        "test_file": "tests/integration/test_gbg_seed.py",
        "description": "Determine if a block likely contains multiple columns",
        "parameters": [
          "self",
          "block: SeedBlock"
        ]
      },
      {
        "function_name": "SeedBlockDetector._separate_column_blocks",
        "class": "SeedBlockDetector",
        "module": "src.compareblocks.gbg.seed",
        "test_file": "tests/integration/test_gbg_seed.py",
        "description": "Separate blocks that span multiple columns into individual column blocks",
        "parameters": [
          "self",
          "blocks: List[SeedBlock]"
        ]
      },
      {
        "function_name": "SeedBlockDetector._split_into_columns",
        "class": "SeedBlockDetector",
        "module": "src.compareblocks.gbg.seed",
        "test_file": "tests/integration/test_gbg_seed.py",
        "description": "Split a multi-column block into separate column blocks",
        "parameters": [
          "self",
          "block: SeedBlock"
        ]
      },
      {
        "function_name": "SeedBlockDetector.extract_all_seed_blocks",
        "class": "SeedBlockDetector",
        "module": "src.compareblocks.gbg.seed",
        "test_file": "tests/integration/test_gbg_seed.py",
        "description": "Extract seed blocks from all pages in a PDF",
        "parameters": [
          "self",
          "pdf_path: str"
        ]
      },
      {
        "function_name": "SeedBlockDetector.extract_seed_blocks",
        "class": "SeedBlockDetector",
        "module": "src.compareblocks.gbg.seed",
        "test_file": "tests/integration/test_gbg_seed.py",
        "description": "Extract seed blocks from a specific PDF page using PyMuPDF",
        "parameters": [
          "self",
          "pdf_path: str",
          "page_num: int"
        ]
      }
    ],
    "compareblocks.gui.pdf_viewer": [
      {
        "function_name": "PDFPageWidget.__init__",
        "class": "PDFPageWidget",
        "module": "compareblocks.gui.pdf_viewer",
        "test_file": "tests/unit/test_pdf_viewer.py",
        "description": "Function description",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "PDFPageWidget.load_pdf",
        "class": "PDFPageWidget",
        "module": "compareblocks.gui.pdf_viewer",
        "test_file": "tests/unit/test_pdf_viewer.py",
        "description": "Load a PDF document.",
        "parameters": [
          "self",
          "pdf_path"
        ]
      },
      {
        "function_name": "PDFPageWidget.mouseMoveEvent",
        "class": "PDFPageWidget",
        "module": "compareblocks.gui.pdf_viewer",
        "test_file": "tests/unit/test_pdf_viewer.py",
        "description": "Handle mouse move events for panning.",
        "parameters": [
          "self",
          "event"
        ]
      },
      {
        "function_name": "PDFPageWidget.mousePressEvent",
        "class": "PDFPageWidget",
        "module": "compareblocks.gui.pdf_viewer",
        "test_file": "tests/unit/test_pdf_viewer.py",
        "description": "Handle mouse press events for block selection and panning.",
        "parameters": [
          "self",
          "event"
        ]
      },
      {
        "function_name": "PDFPageWidget.mouseReleaseEvent",
        "class": "PDFPageWidget",
        "module": "compareblocks.gui.pdf_viewer",
        "test_file": "tests/unit/test_pdf_viewer.py",
        "description": "Handle mouse release events.",
        "parameters": [
          "self",
          "event"
        ]
      },
      {
        "function_name": "PDFPageWidget.select_block",
        "class": "PDFPageWidget",
        "module": "compareblocks.gui.pdf_viewer",
        "test_file": "tests/unit/test_pdf_viewer.py",
        "description": "Select a specific block for highlighting.",
        "parameters": [
          "self",
          "block_id"
        ]
      },
      {
        "function_name": "PDFPageWidget.set_block_highlights",
        "class": "PDFPageWidget",
        "module": "compareblocks.gui.pdf_viewer",
        "test_file": "tests/unit/test_pdf_viewer.py",
        "description": "Set the blocks to highlight on the page.",
        "parameters": [
          "self",
          "highlights"
        ]
      },
      {
        "function_name": "PDFPageWidget.set_page",
        "class": "PDFPageWidget",
        "module": "compareblocks.gui.pdf_viewer",
        "test_file": "tests/unit/test_pdf_viewer.py",
        "description": "Set the current page to display.",
        "parameters": [
          "self",
          "page_num"
        ]
      },
      {
        "function_name": "PDFPageWidget.set_zoom",
        "class": "PDFPageWidget",
        "module": "compareblocks.gui.pdf_viewer",
        "test_file": "tests/unit/test_pdf_viewer.py",
        "description": "Set the zoom factor and re-render.",
        "parameters": [
          "self",
          "zoom_factor"
        ]
      },
      {
        "function_name": "PDFPageWidget.wheelEvent",
        "class": "PDFPageWidget",
        "module": "compareblocks.gui.pdf_viewer",
        "test_file": "tests/unit/test_pdf_viewer.py",
        "description": "Handle wheel events for zooming.",
        "parameters": [
          "self",
          "event"
        ]
      },
      {
        "function_name": "PDFViewer.__init__",
        "class": "PDFViewer",
        "module": "compareblocks.gui.pdf_viewer",
        "test_file": "tests/unit/test_pdf_viewer.py",
        "description": "Function description",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "PDFViewer.fit_width",
        "class": "PDFViewer",
        "module": "compareblocks.gui.pdf_viewer",
        "test_file": "tests/unit/test_pdf_viewer.py",
        "description": "Fit the page width to the viewer.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "PDFViewer.go_to_page",
        "class": "PDFViewer",
        "module": "compareblocks.gui.pdf_viewer",
        "test_file": "tests/unit/test_pdf_viewer.py",
        "description": "Go to a specific page (1-based).",
        "parameters": [
          "self",
          "page_num"
        ]
      },
      {
        "function_name": "PDFViewer.load_pdf",
        "class": "PDFViewer",
        "module": "compareblocks.gui.pdf_viewer",
        "test_file": "tests/unit/test_pdf_viewer.py",
        "description": "Load a PDF file.",
        "parameters": [
          "self",
          "pdf_path"
        ]
      },
      {
        "function_name": "PDFViewer.next_page",
        "class": "PDFViewer",
        "module": "compareblocks.gui.pdf_viewer",
        "test_file": "tests/unit/test_pdf_viewer.py",
        "description": "Go to the next page.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "PDFViewer.previous_page",
        "class": "PDFViewer",
        "module": "compareblocks.gui.pdf_viewer",
        "test_file": "tests/unit/test_pdf_viewer.py",
        "description": "Go to the previous page.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "PDFViewer.select_block",
        "class": "PDFViewer",
        "module": "compareblocks.gui.pdf_viewer",
        "test_file": "tests/unit/test_pdf_viewer.py",
        "description": "Select a specific block.",
        "parameters": [
          "self",
          "block_id"
        ]
      },
      {
        "function_name": "PDFViewer.set_block_highlights",
        "class": "PDFViewer",
        "module": "compareblocks.gui.pdf_viewer",
        "test_file": "tests/unit/test_pdf_viewer.py",
        "description": "Set blocks to highlight on the current page.",
        "parameters": [
          "self",
          "highlights"
        ]
      },
      {
        "function_name": "PDFViewer.set_controls_enabled",
        "class": "PDFViewer",
        "module": "compareblocks.gui.pdf_viewer",
        "test_file": "tests/unit/test_pdf_viewer.py",
        "description": "Enable or disable navigation controls.",
        "parameters": [
          "self",
          "enabled"
        ]
      },
      {
        "function_name": "PDFViewer.set_zoom_percent",
        "class": "PDFViewer",
        "module": "compareblocks.gui.pdf_viewer",
        "test_file": "tests/unit/test_pdf_viewer.py",
        "description": "Set zoom as percentage.",
        "parameters": [
          "self",
          "percent"
        ]
      },
      {
        "function_name": "PDFViewer.setup_ui",
        "class": "PDFViewer",
        "module": "compareblocks.gui.pdf_viewer",
        "test_file": "tests/unit/test_pdf_viewer.py",
        "description": "Setup the PDF viewer UI.",
        "parameters": [
          "self"
        ]
      }
    ],
    "compareblocks.engines.paddleocr_engine": [
      {
        "function_name": "PaddleOCREngine.__init__",
        "class": "PaddleOCREngine",
        "module": "compareblocks.engines.paddleocr_engine",
        "test_file": "tests/unit/test_paddleocr_engine.py",
        "description": "Initialize PaddleOCR engine.",
        "parameters": [
          "self",
          "lang",
          "use_gpu"
        ]
      },
      {
        "function_name": "PaddleOCREngine.extract_pdf",
        "class": "PaddleOCREngine",
        "module": "compareblocks.engines.paddleocr_engine",
        "test_file": "tests/unit/test_paddleocr_engine.py",
        "description": "Extract text from PDF using PaddleOCR.",
        "parameters": [
          "self",
          "pdf_path"
        ]
      },
      {
        "function_name": "PaddleOCREngine.is_available",
        "class": "PaddleOCREngine",
        "module": "compareblocks.engines.paddleocr_engine",
        "test_file": "tests/unit/test_paddleocr_engine.py",
        "description": "Check if PaddleOCR is available.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "PaddleOCREngine.save_extraction",
        "class": "PaddleOCREngine",
        "module": "compareblocks.engines.paddleocr_engine",
        "test_file": "tests/unit/test_paddleocr_engine.py",
        "description": "Extract and save PaddleOCR data.",
        "parameters": [
          "self",
          "pdf_path",
          "output_path"
        ]
      },
      {
        "function_name": "extract_paddleocr",
        "class": null,
        "module": "compareblocks.engines.paddleocr_engine",
        "test_file": "tests/unit/test_paddleocr_engine.py",
        "description": "Extract text using PaddleOCR.",
        "parameters": [
          "pdf_path",
          "lang",
          "use_gpu"
        ]
      },
      {
        "function_name": "save_paddleocr_extraction",
        "class": null,
        "module": "compareblocks.engines.paddleocr_engine",
        "test_file": "tests/unit/test_paddleocr_engine.py",
        "description": "Extract and save PaddleOCR data.",
        "parameters": [
          "pdf_path",
          "output_path",
          "lang",
          "use_gpu"
        ]
      }
    ],
    "compareblocks.testing.performance_tracker": [
      {
        "function_name": "PerformanceMetric.__post_init__",
        "class": "PerformanceMetric",
        "module": "compareblocks.testing.performance_tracker",
        "test_file": "tests/unit/test_performance_tracker.py",
        "description": "Function description",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "PerformanceTracker.__init__",
        "class": "PerformanceTracker",
        "module": "compareblocks.testing.performance_tracker",
        "test_file": "tests/unit/test_performance_tracker.py",
        "description": "Initialize performance tracker.",
        "parameters": [
          "self",
          "db_path"
        ]
      },
      {
        "function_name": "PerformanceTracker.calculate_benchmarks",
        "class": "PerformanceTracker",
        "module": "compareblocks.testing.performance_tracker",
        "test_file": "tests/unit/test_performance_tracker.py",
        "description": "Calculate performance benchmarks for an engine function.",
        "parameters": [
          "self",
          "engine_name",
          "function_name",
          "days_back"
        ]
      },
      {
        "function_name": "PerformanceTracker.export_performance_data",
        "class": "PerformanceTracker",
        "module": "compareblocks.testing.performance_tracker",
        "test_file": "tests/unit/test_performance_tracker.py",
        "description": "Export performance data to JSON file.",
        "parameters": [
          "self",
          "output_path"
        ]
      },
      {
        "function_name": "PerformanceTracker.generate_performance_report",
        "class": "PerformanceTracker",
        "module": "compareblocks.testing.performance_tracker",
        "test_file": "tests/unit/test_performance_tracker.py",
        "description": "Generate comprehensive performance report.",
        "parameters": [
          "self",
          "engine_name",
          "days_back"
        ]
      },
      {
        "function_name": "PerformanceTracker.get_performance_comparison",
        "class": "PerformanceTracker",
        "module": "compareblocks.testing.performance_tracker",
        "test_file": "tests/unit/test_performance_tracker.py",
        "description": "Compare performance across multiple engines for a function.",
        "parameters": [
          "self",
          "engine_names",
          "function_name"
        ]
      },
      {
        "function_name": "PerformanceTracker.identify_optimization_opportunities",
        "class": "PerformanceTracker",
        "module": "compareblocks.testing.performance_tracker",
        "test_file": "tests/unit/test_performance_tracker.py",
        "description": "Identify performance optimization opportunities.",
        "parameters": [
          "self",
          "engine_name"
        ]
      },
      {
        "function_name": "PerformanceTracker.record_performance_metric",
        "class": "PerformanceTracker",
        "module": "compareblocks.testing.performance_tracker",
        "test_file": "tests/unit/test_performance_tracker.py",
        "description": "Record a performance metric.",
        "parameters": [
          "self",
          "metric"
        ]
      },
      {
        "function_name": "compare_engine_performance",
        "class": null,
        "module": "compareblocks.testing.performance_tracker",
        "test_file": "tests/unit/test_performance_tracker.py",
        "description": "Compare performance across engines for a function.",
        "parameters": [
          "engine_names",
          "function_name"
        ]
      },
      {
        "function_name": "record_performance",
        "class": null,
        "module": "compareblocks.testing.performance_tracker",
        "test_file": "tests/unit/test_performance_tracker.py",
        "description": "Record a performance metric.",
        "parameters": [
          "engine_name",
          "function_name",
          "pdf_file",
          "pdf_size_mb",
          "pdf_pages",
          "execution_time",
          "success",
          "memory_usage_mb",
          "cpu_usage_percent",
          "output_size_bytes",
          "error_message"
        ]
      }
    ],
    "src.compareblocks.project.manager": [
      {
        "function_name": "ProjectManager.clear_cache",
        "class": "ProjectManager",
        "module": "src.compareblocks.project.manager",
        "test_file": "tests/unit/test_manager.py",
        "description": "Clear all cached data.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "ProjectManager.create_project_manifest",
        "class": "ProjectManager",
        "module": "src.compareblocks.project.manager",
        "test_file": "tests/unit/test_manager.py",
        "description": "Create a comprehensive project manifest.",
        "parameters": [
          "self",
          "pdf_path: Any"
        ]
      },
      {
        "function_name": "ProjectManager.create_project_structure",
        "class": "ProjectManager",
        "module": "src.compareblocks.project.manager",
        "test_file": "tests/unit/test_manager.py",
        "description": "Create comprehensive project structure for a PDF.",
        "parameters": [
          "self",
          "pdf_path: Any"
        ]
      },
      {
        "function_name": "ProjectManager.find_moved_files",
        "class": "ProjectManager",
        "module": "src.compareblocks.project.manager",
        "test_file": "tests/unit/test_manager.py",
        "description": "Find files that may have been moved by searching for similar names.",
        "parameters": [
          "self",
          "pdf_path: Any"
        ]
      },
      {
        "function_name": "ProjectManager.get_file_status",
        "class": "ProjectManager",
        "module": "src.compareblocks.project.manager",
        "test_file": "tests/unit/test_manager.py",
        "description": "Get comprehensive status for a file.",
        "parameters": [
          "self",
          "file_path: Any"
        ]
      },
      {
        "function_name": "ProjectManager.get_project_structure",
        "class": "ProjectManager",
        "module": "src.compareblocks.project.manager",
        "test_file": "tests/unit/test_manager.py",
        "description": "Get project structure, creating if necessary.",
        "parameters": [
          "self",
          "pdf_path: Any"
        ]
      },
      {
        "function_name": "ProjectManager.get_project_summary",
        "class": "ProjectManager",
        "module": "src.compareblocks.project.manager",
        "test_file": "tests/unit/test_manager.py",
        "description": "Get a summary of the project status.",
        "parameters": [
          "self",
          "pdf_path: Any"
        ]
      },
      {
        "function_name": "ProjectManager.get_reprocessing_files",
        "class": "ProjectManager",
        "module": "src.compareblocks.project.manager",
        "test_file": "tests/unit/test_manager.py",
        "description": "Get all files that should be considered for reprocessing.",
        "parameters": [
          "self",
          "pdf_path: Any"
        ]
      },
      {
        "function_name": "ProjectManager.relocate_file",
        "class": "ProjectManager",
        "module": "src.compareblocks.project.manager",
        "test_file": "tests/unit/test_manager.py",
        "description": "Relocate a file in the project structure.",
        "parameters": [
          "self",
          "old_path: Any",
          "new_path: Any",
          "pdf_path: Any"
        ]
      },
      {
        "function_name": "ProjectManager.save_project_manifest",
        "class": "ProjectManager",
        "module": "src.compareblocks.project.manager",
        "test_file": "tests/unit/test_manager.py",
        "description": "Save project manifest to file.",
        "parameters": [
          "self",
          "pdf_path: Any",
          "output_path: Any"
        ]
      },
      {
        "function_name": "ProjectManager.validate_project_structure",
        "class": "ProjectManager",
        "module": "src.compareblocks.project.manager",
        "test_file": "tests/unit/test_manager.py",
        "description": "Validate project structure and return detailed report.",
        "parameters": [
          "self",
          "pdf_path: Any"
        ]
      },
      {
        "function_name": "get_project_summary",
        "class": null,
        "module": "src.compareblocks.project.manager",
        "test_file": "tests/unit/test_manager.py",
        "description": "Convenience function to get project summary.",
        "parameters": [
          "pdf_path: Any"
        ]
      },
      {
        "function_name": "validate_project_structure",
        "class": null,
        "module": "src.compareblocks.project.manager",
        "test_file": "tests/unit/test_manager.py",
        "description": "Convenience function to validate project structure.",
        "parameters": [
          "pdf_path: Any"
        ]
      }
    ],
    "compareblocks.associationmupdf_matcher": [
      {
        "function_name": "PyMuPDFBlockMatcher.__init__",
        "class": "PyMuPDFBlockMatcher",
        "module": "compareblocks.associationmupdf_matcher",
        "test_file": "tests/unit/test_associationmupdf_matcher.py",
        "description": "Initialize the PyMuPDF block matcher.",
        "parameters": [
          "self",
          "similarity_threshold"
        ]
      },
      {
        "function_name": "PyMuPDFBlockMatcher.match_blocks",
        "class": "PyMuPDFBlockMatcher",
        "module": "compareblocks.associationmupdf_matcher",
        "test_file": "tests/unit/test_associationmupdf_matcher.py",
        "description": "Match PyMuPDF engine blocks to GBG blocks using multiple strategies.",
        "parameters": [
          "self",
          "gbg_data",
          "engine_data"
        ]
      },
      {
        "function_name": "match_pymupdf_blocks_to_gbg",
        "class": null,
        "module": "compareblocks.associationmupdf_matcher",
        "test_file": "tests/unit/test_associationmupdf_matcher.py",
        "description": "Match PyMuPDF engine blocks to GBG blocks.",
        "parameters": [
          "gbg_data",
          "engine_data",
          "similarity_threshold"
        ]
      }
    ],
    "compareblocks.enginesmupdf_engine": [
      {
        "function_name": "PyMuPDFEngine.__init__",
        "class": "PyMuPDFEngine",
        "module": "compareblocks.enginesmupdf_engine",
        "test_file": "tests/unit/test_enginesmupdf_engine.py",
        "description": "Initialize PyMuPDF engine.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "PyMuPDFEngine.extract_pdf",
        "class": "PyMuPDFEngine",
        "module": "compareblocks.enginesmupdf_engine",
        "test_file": "tests/unit/test_enginesmupdf_engine.py",
        "description": "Extract raw PyMuPDF data from PDF.",
        "parameters": [
          "self",
          "pdf_path"
        ]
      },
      {
        "function_name": "PyMuPDFEngine.save_extraction",
        "class": "PyMuPDFEngine",
        "module": "compareblocks.enginesmupdf_engine",
        "test_file": "tests/unit/test_enginesmupdf_engine.py",
        "description": "Extract and save raw PyMuPDF data.",
        "parameters": [
          "self",
          "pdf_path",
          "output_path"
        ]
      },
      {
        "function_name": "extract_raw_pymupdf",
        "class": null,
        "module": "compareblocks.enginesmupdf_engine",
        "test_file": "tests/unit/test_enginesmupdf_engine.py",
        "description": "Extract raw PyMuPDF data from PDF.",
        "parameters": [
          "pdf_path"
        ]
      },
      {
        "function_name": "save_raw_pymupdf_extraction",
        "class": null,
        "module": "compareblocks.enginesmupdf_engine",
        "test_file": "tests/unit/test_enginesmupdf_engine.py",
        "description": "Extract and save raw PyMuPDF data.",
        "parameters": [
          "pdf_path",
          "output_path"
        ]
      }
    ],
    "compareblocks.gui.review_gui": [
      {
        "function_name": "ReviewDataManager.__init__",
        "class": "ReviewDataManager",
        "module": "compareblocks.gui.review_gui",
        "test_file": "tests/unit/test_review_gui.py",
        "description": "Function description",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "ReviewDataManager.add_external_variations",
        "class": "ReviewDataManager",
        "module": "compareblocks.gui.review_gui",
        "test_file": "tests/unit/test_review_gui.py",
        "description": "Add external variations from NDJSON import.",
        "parameters": [
          "self",
          "variations"
        ]
      },
      {
        "function_name": "ReviewDataManager.export_consensus",
        "class": "ReviewDataManager",
        "module": "compareblocks.gui.review_gui",
        "test_file": "tests/unit/test_review_gui.py",
        "description": "Export consensus decisions to NDJSON.",
        "parameters": [
          "self",
          "output_path"
        ]
      },
      {
        "function_name": "ReviewDataManager.get_block_variations",
        "class": "ReviewDataManager",
        "module": "compareblocks.gui.review_gui",
        "test_file": "tests/unit/test_review_gui.py",
        "description": "Get variation display data for a block.",
        "parameters": [
          "self",
          "block_id"
        ]
      },
      {
        "function_name": "ReviewDataManager.get_page_blocks",
        "class": "ReviewDataManager",
        "module": "compareblocks.gui.review_gui",
        "test_file": "tests/unit/test_review_gui.py",
        "description": "Get all blocks for a specific page.",
        "parameters": [
          "self",
          "page_num"
        ]
      },
      {
        "function_name": "ReviewDataManager.load_pdf",
        "class": "ReviewDataManager",
        "module": "compareblocks.gui.review_gui",
        "test_file": "tests/unit/test_review_gui.py",
        "description": "Load a PDF and generate GBG analysis.",
        "parameters": [
          "self",
          "pdf_path"
        ]
      },
      {
        "function_name": "ReviewDataManager.set_consensus_decision",
        "class": "ReviewDataManager",
        "module": "compareblocks.gui.review_gui",
        "test_file": "tests/unit/test_review_gui.py",
        "description": "Set the consensus decision for a block.",
        "parameters": [
          "self",
          "block_id",
          "variation_id"
        ]
      },
      {
        "function_name": "ReviewDataManager.set_manual_correction",
        "class": "ReviewDataManager",
        "module": "compareblocks.gui.review_gui",
        "test_file": "tests/unit/test_review_gui.py",
        "description": "Set a manual correction for a block.",
        "parameters": [
          "self",
          "block_id",
          "corrected_text"
        ]
      },
      {
        "function_name": "ReviewGUI.__init__",
        "class": "ReviewGUI",
        "module": "compareblocks.gui.review_gui",
        "test_file": "tests/unit/test_review_gui.py",
        "description": "Function description",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "ReviewGUI.apply_block_filters",
        "class": "ReviewGUI",
        "module": "compareblocks.gui.review_gui",
        "test_file": "tests/unit/test_review_gui.py",
        "description": "Apply block filters and update display.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "ReviewGUI.connect_signals",
        "class": "ReviewGUI",
        "module": "compareblocks.gui.review_gui",
        "test_file": "tests/unit/test_review_gui.py",
        "description": "Connect UI signals.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "ReviewGUI.export_consensus",
        "class": "ReviewGUI",
        "module": "compareblocks.gui.review_gui",
        "test_file": "tests/unit/test_review_gui.py",
        "description": "Export consensus decisions.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "ReviewGUI.import_variations",
        "class": "ReviewGUI",
        "module": "compareblocks.gui.review_gui",
        "test_file": "tests/unit/test_review_gui.py",
        "description": "Import external variations.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "ReviewGUI.load_pdf",
        "class": "ReviewGUI",
        "module": "compareblocks.gui.review_gui",
        "test_file": "tests/unit/test_review_gui.py",
        "description": "Load a PDF file.",
        "parameters": [
          "self",
          "pdf_path"
        ]
      },
      {
        "function_name": "ReviewGUI.next_block",
        "class": "ReviewGUI",
        "module": "compareblocks.gui.review_gui",
        "test_file": "tests/unit/test_review_gui.py",
        "description": "Navigate to next block with variations.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "ReviewGUI.on_block_selected",
        "class": "ReviewGUI",
        "module": "compareblocks.gui.review_gui",
        "test_file": "tests/unit/test_review_gui.py",
        "description": "Handle block selection.",
        "parameters": [
          "self",
          "block_id"
        ]
      },
      {
        "function_name": "ReviewGUI.on_consensus_changed",
        "class": "ReviewGUI",
        "module": "compareblocks.gui.review_gui",
        "test_file": "tests/unit/test_review_gui.py",
        "description": "Handle consensus decision change.",
        "parameters": [
          "self",
          "variation_id"
        ]
      },
      {
        "function_name": "ReviewGUI.on_import_requested",
        "class": "ReviewGUI",
        "module": "compareblocks.gui.review_gui",
        "test_file": "tests/unit/test_review_gui.py",
        "description": "Handle import request.",
        "parameters": [
          "self",
          "file_path",
          "options",
          "records"
        ]
      },
      {
        "function_name": "ReviewGUI.on_manual_correction",
        "class": "ReviewGUI",
        "module": "compareblocks.gui.review_gui",
        "test_file": "tests/unit/test_review_gui.py",
        "description": "Handle manual correction.",
        "parameters": [
          "self",
          "block_id",
          "corrected_text"
        ]
      },
      {
        "function_name": "ReviewGUI.on_page_changed",
        "class": "ReviewGUI",
        "module": "compareblocks.gui.review_gui",
        "test_file": "tests/unit/test_review_gui.py",
        "description": "Handle page change.",
        "parameters": [
          "self",
          "page_num"
        ]
      },
      {
        "function_name": "ReviewGUI.on_variation_selected",
        "class": "ReviewGUI",
        "module": "compareblocks.gui.review_gui",
        "test_file": "tests/unit/test_review_gui.py",
        "description": "Handle variation selection.",
        "parameters": [
          "self",
          "variation_id"
        ]
      },
      {
        "function_name": "ReviewGUI.open_pdf",
        "class": "ReviewGUI",
        "module": "compareblocks.gui.review_gui",
        "test_file": "tests/unit/test_review_gui.py",
        "description": "Open a PDF file.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "ReviewGUI.preview_changes",
        "class": "ReviewGUI",
        "module": "compareblocks.gui.review_gui",
        "test_file": "tests/unit/test_review_gui.py",
        "description": "Preview changes from one file to another.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "ReviewGUI.previous_block",
        "class": "ReviewGUI",
        "module": "compareblocks.gui.review_gui",
        "test_file": "tests/unit/test_review_gui.py",
        "description": "Navigate to previous block with variations.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "ReviewGUI.recalculate_surrounding_blocks",
        "class": "ReviewGUI",
        "module": "compareblocks.gui.review_gui",
        "test_file": "tests/unit/test_review_gui.py",
        "description": "Recalculate surrounding blocks after changes.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "ReviewGUI.setup_menus",
        "class": "ReviewGUI",
        "module": "compareblocks.gui.review_gui",
        "test_file": "tests/unit/test_review_gui.py",
        "description": "Setup application menus.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "ReviewGUI.setup_status_bar",
        "class": "ReviewGUI",
        "module": "compareblocks.gui.review_gui",
        "test_file": "tests/unit/test_review_gui.py",
        "description": "Setup the status bar.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "ReviewGUI.setup_ui",
        "class": "ReviewGUI",
        "module": "compareblocks.gui.review_gui",
        "test_file": "tests/unit/test_review_gui.py",
        "description": "Setup the main UI.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "ReviewGUI.should_show_block",
        "class": "ReviewGUI",
        "module": "compareblocks.gui.review_gui",
        "test_file": "tests/unit/test_review_gui.py",
        "description": "Check if block should be shown based on filters.",
        "parameters": [
          "self",
          "block_id",
          "variations"
        ]
      },
      {
        "function_name": "ReviewGUI.update_page_highlights",
        "class": "ReviewGUI",
        "module": "compareblocks.gui.review_gui",
        "test_file": "tests/unit/test_review_gui.py",
        "description": "Update block highlights for the current page.",
        "parameters": [
          "self"
        ]
      }
    ],
    "compareblocks.association.tesseract_matcher": [
      {
        "function_name": "TesseractBlockMatcher.__init__",
        "class": "TesseractBlockMatcher",
        "module": "compareblocks.association.tesseract_matcher",
        "test_file": "tests/unit/test_tesseract_matcher.py",
        "description": "Initialize Tesseract matcher with OCR-specific settings.",
        "parameters": [
          "self",
          "similarity_threshold"
        ]
      },
      {
        "function_name": "TesseractBlockMatcher.match_blocks",
        "class": "TesseractBlockMatcher",
        "module": "compareblocks.association.tesseract_matcher",
        "test_file": "tests/unit/test_tesseract_matcher.py",
        "description": "Match Tesseract engine blocks to GBG blocks using OCR-aware strategies.",
        "parameters": [
          "self",
          "gbg_data",
          "engine_data"
        ]
      }
    ],
    "compareblocks.engines.tesseract_engine": [
      {
        "function_name": "TesseractEngine.__init__",
        "class": "TesseractEngine",
        "module": "compareblocks.engines.tesseract_engine",
        "test_file": "tests/unit/test_tesseract_engine.py",
        "description": "Initialize Tesseract engine.",
        "parameters": [
          "self",
          "dpi",
          "lang"
        ]
      },
      {
        "function_name": "TesseractEngine.extract_pdf",
        "class": "TesseractEngine",
        "module": "compareblocks.engines.tesseract_engine",
        "test_file": "tests/unit/test_tesseract_engine.py",
        "description": "Extract text from PDF using Tesseract OCR.",
        "parameters": [
          "self",
          "pdf_path"
        ]
      },
      {
        "function_name": "TesseractEngine.is_available",
        "class": "TesseractEngine",
        "module": "compareblocks.engines.tesseract_engine",
        "test_file": "tests/unit/test_tesseract_engine.py",
        "description": "Check if Tesseract is available.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "TesseractEngine.save_extraction",
        "class": "TesseractEngine",
        "module": "compareblocks.engines.tesseract_engine",
        "test_file": "tests/unit/test_tesseract_engine.py",
        "description": "Extract and save Tesseract OCR data.",
        "parameters": [
          "self",
          "pdf_path",
          "output_path"
        ]
      },
      {
        "function_name": "extract_tesseract_ocr",
        "class": null,
        "module": "compareblocks.engines.tesseract_engine",
        "test_file": "tests/unit/test_tesseract_engine.py",
        "description": "Extract text using Tesseract OCR.",
        "parameters": [
          "pdf_path",
          "dpi",
          "lang"
        ]
      },
      {
        "function_name": "save_tesseract_extraction",
        "class": null,
        "module": "compareblocks.engines.tesseract_engine",
        "test_file": "tests/unit/test_tesseract_engine.py",
        "description": "Extract and save Tesseract OCR data.",
        "parameters": [
          "pdf_path",
          "output_path",
          "dpi",
          "lang"
        ]
      }
    ],
    "build_test_catalog": [
      {
        "function_name": "TestFunctionAnalyzer.visit_ClassDef",
        "class": "TestFunctionAnalyzer",
        "module": "build_test_catalog",
        "test_file": "tests/unit/test_build_test_catalog.py",
        "description": "Visit class definitions.",
        "parameters": [
          "self",
          "node: Any"
        ]
      },
      {
        "function_name": "TestFunctionAnalyzer.visit_FunctionDef",
        "class": "TestFunctionAnalyzer",
        "module": "build_test_catalog",
        "test_file": "tests/unit/test_build_test_catalog.py",
        "description": "Visit function definitions.",
        "parameters": [
          "self",
          "node: Any"
        ]
      },
      {
        "function_name": "TestFunctionAnalyzer.visit_Import",
        "class": "TestFunctionAnalyzer",
        "module": "build_test_catalog",
        "test_file": "tests/unit/test_build_test_catalog.py",
        "description": "Visit import statements.",
        "parameters": [
          "self",
          "node: Any"
        ]
      },
      {
        "function_name": "TestFunctionAnalyzer.visit_ImportFrom",
        "class": "TestFunctionAnalyzer",
        "module": "build_test_catalog",
        "test_file": "tests/unit/test_build_test_catalog.py",
        "description": "Visit from...import statements.",
        "parameters": [
          "self",
          "node: Any"
        ]
      },
      {
        "function_name": "build_test_catalog",
        "class": null,
        "module": "build_test_catalog",
        "test_file": "tests/unit/test_build_test_catalog.py",
        "description": "Build the complete test catalog.",
        "parameters": []
      },
      {
        "function_name": "create_test_catalog_entry",
        "class": null,
        "module": "build_test_catalog",
        "test_file": "tests/unit/test_build_test_catalog.py",
        "description": "Create a test catalog entry.",
        "parameters": [
          "test_info: Any",
          "test_file_info: Any",
          "function_catalog: Any"
        ]
      },
      {
        "function_name": "generate_cross_reference_report",
        "class": null,
        "module": "build_test_catalog",
        "test_file": "tests/unit/test_build_test_catalog.py",
        "description": "Generate a cross-reference report between functions and tests.",
        "parameters": [
          "test_entries: Any",
          "function_catalog: Any"
        ]
      },
      {
        "function_name": "load_function_catalog",
        "class": null,
        "module": "build_test_catalog",
        "test_file": "tests/unit/test_build_test_catalog.py",
        "description": "Load the function catalog and create a lookup by function name.",
        "parameters": [
          "catalog_path: Any"
        ]
      },
      {
        "function_name": "update_function_catalog_with_tests",
        "class": null,
        "module": "build_test_catalog",
        "test_file": "tests/unit/test_build_test_catalog.py",
        "description": "Update function catalog entries to include their corresponding test names.",
        "parameters": [
          "test_entries: Any"
        ]
      }
    ],
    "compareblocks.gui.variations_panel": [
      {
        "function_name": "TextDiffWidget.__init__",
        "class": "TextDiffWidget",
        "module": "compareblocks.gui.variations_panel",
        "test_file": "tests/unit/test_variations_panel.py",
        "description": "Function description",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "TextDiffWidget.set_diff_text",
        "class": "TextDiffWidget",
        "module": "compareblocks.gui.variations_panel",
        "test_file": "tests/unit/test_variations_panel.py",
        "description": "Set text with diff highlighting against reference.",
        "parameters": [
          "self",
          "text",
          "reference_text"
        ]
      },
      {
        "function_name": "VariationsPanel.__init__",
        "class": "VariationsPanel",
        "module": "compareblocks.gui.variations_panel",
        "test_file": "tests/unit/test_variations_panel.py",
        "description": "Function description",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "VariationsPanel.select_variation",
        "class": "VariationsPanel",
        "module": "compareblocks.gui.variations_panel",
        "test_file": "tests/unit/test_variations_panel.py",
        "description": "Select a specific variation for detailed view.",
        "parameters": [
          "self",
          "variation_id"
        ]
      },
      {
        "function_name": "VariationsPanel.set_block_variations",
        "class": "VariationsPanel",
        "module": "compareblocks.gui.variations_panel",
        "test_file": "tests/unit/test_variations_panel.py",
        "description": "Set the variations for a specific block.",
        "parameters": [
          "self",
          "block_id",
          "variations"
        ]
      },
      {
        "function_name": "VariationsPanel.set_consensus_variation",
        "class": "VariationsPanel",
        "module": "compareblocks.gui.variations_panel",
        "test_file": "tests/unit/test_variations_panel.py",
        "description": "Set the consensus variation.",
        "parameters": [
          "self",
          "variation_id"
        ]
      },
      {
        "function_name": "VariationsPanel.set_controls_enabled",
        "class": "VariationsPanel",
        "module": "compareblocks.gui.variations_panel",
        "test_file": "tests/unit/test_variations_panel.py",
        "description": "Enable or disable panel controls.",
        "parameters": [
          "self",
          "enabled"
        ]
      },
      {
        "function_name": "VariationsPanel.setup_ui",
        "class": "VariationsPanel",
        "module": "compareblocks.gui.variations_panel",
        "test_file": "tests/unit/test_variations_panel.py",
        "description": "Setup the variations panel UI.",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "VariationsTable.__init__",
        "class": "VariationsTable",
        "module": "compareblocks.gui.variations_panel",
        "test_file": "tests/unit/test_variations_panel.py",
        "description": "Function description",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "VariationsTable.highlight_consensus",
        "class": "VariationsTable",
        "module": "compareblocks.gui.variations_panel",
        "test_file": "tests/unit/test_variations_panel.py",
        "description": "Highlight the consensus variation.",
        "parameters": [
          "self",
          "variation_id"
        ]
      },
      {
        "function_name": "VariationsTable.set_variations",
        "class": "VariationsTable",
        "module": "compareblocks.gui.variations_panel",
        "test_file": "tests/unit/test_variations_panel.py",
        "description": "Set the variations to display.",
        "parameters": [
          "self",
          "variations"
        ]
      },
      {
        "function_name": "VariationsTable.setup_table",
        "class": "VariationsTable",
        "module": "compareblocks.gui.variations_panel",
        "test_file": "tests/unit/test_variations_panel.py",
        "description": "Setup the variations table.",
        "parameters": [
          "self"
        ]
      }
    ],
    "src.compareblocks.normalize.textnorm": [
      {
        "function_name": "TextNormalizer.__init__",
        "class": "TextNormalizer",
        "module": "src.compareblocks.normalize.textnorm",
        "test_file": "tests/unit/test_normalization.py",
        "description": "Initialize normalizer with configuration",
        "parameters": [
          "self",
          "config: Optional[NormalizationConfig] = None"
        ]
      },
      {
        "function_name": "TextNormalizer._calculate_join_confidence",
        "class": "TextNormalizer",
        "module": "src.compareblocks.normalize.textnorm",
        "test_file": "tests/unit/test_normalization.py",
        "description": "Calculate confidence for joining hyphenated words",
        "parameters": [
          "self",
          "word1: str",
          "word2: str",
          "joined_word: str"
        ]
      },
      {
        "function_name": "TextNormalizer._compile_patterns",
        "class": "TextNormalizer",
        "module": "src.compareblocks.normalize.textnorm",
        "test_file": "tests/unit/test_normalization.py",
        "description": "Compile regex patterns for normalization",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "TextNormalizer._final_cleanup",
        "class": "TextNormalizer",
        "module": "src.compareblocks.normalize.textnorm",
        "test_file": "tests/unit/test_normalization.py",
        "description": "Final cleanup and trimming",
        "parameters": [
          "self",
          "text: str"
        ]
      },
      {
        "function_name": "TextNormalizer._has_valid_word_pattern",
        "class": "TextNormalizer",
        "module": "src.compareblocks.normalize.textnorm",
        "test_file": "tests/unit/test_normalization.py",
        "description": "Check if word has valid English word patterns",
        "parameters": [
          "self",
          "word: str"
        ]
      },
      {
        "function_name": "TextNormalizer._join_hyphenated_words",
        "class": "TextNormalizer",
        "module": "src.compareblocks.normalize.textnorm",
        "test_file": "tests/unit/test_normalization.py",
        "description": "Join hyphenated words across line breaks with confidence checking",
        "parameters": [
          "self",
          "text: str"
        ]
      },
      {
        "function_name": "TextNormalizer._load_dictionaries",
        "class": "TextNormalizer",
        "module": "src.compareblocks.normalize.textnorm",
        "test_file": "tests/unit/test_normalization.py",
        "description": "Load word dictionaries for hyphenation confidence",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "TextNormalizer._normalize_special_characters",
        "class": "TextNormalizer",
        "module": "src.compareblocks.normalize.textnorm",
        "test_file": "tests/unit/test_normalization.py",
        "description": "Normalize fancy spaces, quotes, and dashes",
        "parameters": [
          "self",
          "text: str"
        ]
      },
      {
        "function_name": "TextNormalizer._normalize_unicode",
        "class": "TextNormalizer",
        "module": "src.compareblocks.normalize.textnorm",
        "test_file": "tests/unit/test_normalization.py",
        "description": "Apply Unicode normalization (NFC by default)",
        "parameters": [
          "self",
          "text: str"
        ]
      },
      {
        "function_name": "TextNormalizer._normalize_whitespace",
        "class": "TextNormalizer",
        "module": "src.compareblocks.normalize.textnorm",
        "test_file": "tests/unit/test_normalization.py",
        "description": "Normalize whitespace while preserving intentional formatting",
        "parameters": [
          "self",
          "text: str"
        ]
      },
      {
        "function_name": "TextNormalizer.get_normalization_stats",
        "class": "TextNormalizer",
        "module": "src.compareblocks.normalize.textnorm",
        "test_file": "tests/unit/test_normalization.py",
        "description": "Get statistics about the normalization process",
        "parameters": [
          "self",
          "original: str",
          "normalized: str"
        ]
      },
      {
        "function_name": "TextNormalizer.normalize_text",
        "class": "TextNormalizer",
        "module": "src.compareblocks.normalize.textnorm",
        "test_file": "tests/unit/test_normalization.py",
        "description": "Apply complete text normalization pipeline",
        "parameters": [
          "self",
          "text: str"
        ]
      },
      {
        "function_name": "TokenPreservingNormalizer.__init__",
        "class": "TokenPreservingNormalizer",
        "module": "src.compareblocks.normalize.textnorm",
        "test_file": "tests/unit/test_normalization.py",
        "description": "Initialize with preservation-focused configuration",
        "parameters": [
          "self",
          "config: Optional[NormalizationConfig] = None"
        ]
      },
      {
        "function_name": "TokenPreservingNormalizer._protect_structural_elements",
        "class": "TokenPreservingNormalizer",
        "module": "src.compareblocks.normalize.textnorm",
        "test_file": "tests/unit/test_normalization.py",
        "description": "Protect structural elements during normalization",
        "parameters": [
          "self",
          "text: str"
        ]
      },
      {
        "function_name": "TokenPreservingNormalizer._restore_structural_elements",
        "class": "TokenPreservingNormalizer",
        "module": "src.compareblocks.normalize.textnorm",
        "test_file": "tests/unit/test_normalization.py",
        "description": "Restore protected structural elements",
        "parameters": [
          "self",
          "text: str"
        ]
      },
      {
        "function_name": "TokenPreservingNormalizer.normalize_preserving_structure",
        "class": "TokenPreservingNormalizer",
        "module": "src.compareblocks.normalize.textnorm",
        "test_file": "tests/unit/test_normalization.py",
        "description": "Normalize text while preserving document structure",
        "parameters": [
          "self",
          "text: str"
        ]
      },
      {
        "function_name": "create_aggressive_config",
        "class": null,
        "module": "src.compareblocks.normalize.textnorm",
        "test_file": "tests/unit/test_normalization.py",
        "description": "Create aggressive normalization configuration for noisy OCR text",
        "parameters": []
      },
      {
        "function_name": "create_standard_config",
        "class": null,
        "module": "src.compareblocks.normalize.textnorm",
        "test_file": "tests/unit/test_normalization.py",
        "description": "Create standard normalization configuration for PDF text",
        "parameters": []
      },
      {
        "function_name": "normalize_preserving_structure",
        "class": null,
        "module": "src.compareblocks.normalize.textnorm",
        "test_file": "tests/unit/test_normalization.py",
        "description": "Convenience function for structure-preserving normalization",
        "parameters": [
          "text: str",
          "config: Optional[NormalizationConfig] = None"
        ]
      },
      {
        "function_name": "normalize_text",
        "class": null,
        "module": "src.compareblocks.normalize.textnorm",
        "test_file": "tests/unit/test_normalization.py",
        "description": "Convenience function for basic text normalization",
        "parameters": [
          "text: str",
          "config: Optional[NormalizationConfig] = None"
        ]
      }
    ],
    "src.compareblocks.mapping.variation_block": [
      {
        "function_name": "VariationBlock.__post_init__",
        "class": "VariationBlock",
        "module": "src.compareblocks.mapping.variation_block",
        "test_file": "tests/unit/test_mapping_iou.py",
        "description": "Validate variation block data ensuring page numbers and confidence values are valid",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "VariationBlock.add_child",
        "class": "VariationBlock",
        "module": "src.compareblocks.mapping.variation_block",
        "test_file": "tests/unit/test_mapping_iou.py",
        "description": "Add a child variation to this block",
        "parameters": [
          "self",
          "child_variation_id: str"
        ]
      },
      {
        "function_name": "VariationBlock.get_metadata_value",
        "class": "VariationBlock",
        "module": "src.compareblocks.mapping.variation_block",
        "test_file": "tests/unit/test_mapping_iou.py",
        "description": "Get a value from original metadata",
        "parameters": [
          "self",
          "key: str",
          "default: Any = None"
        ]
      },
      {
        "function_name": "VariationBlock.is_child_variation",
        "class": "VariationBlock",
        "module": "src.compareblocks.mapping.variation_block",
        "test_file": "tests/unit/test_mapping_iou.py",
        "description": "Check if this is a child variation block",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "VariationBlock.is_mapped",
        "class": "VariationBlock",
        "module": "src.compareblocks.mapping.variation_block",
        "test_file": "tests/unit/test_mapping_iou.py",
        "description": "Check if this variation is mapped to a seed block",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "VariationBlock.is_orphan",
        "class": "VariationBlock",
        "module": "src.compareblocks.mapping.variation_block",
        "test_file": "tests/unit/test_mapping_iou.py",
        "description": "Check if this is an orphaned (unmatched) variation",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "VariationBlockManager.__init__",
        "class": "VariationBlockManager",
        "module": "src.compareblocks.mapping.variation_block",
        "test_file": "tests/unit/test_mapping_iou.py",
        "description": "Initialize the variation block manager with IoU matcher configuration",
        "parameters": [
          "self",
          "match_config: Optional[MatchConfig] = None"
        ]
      },
      {
        "function_name": "VariationBlockManager._generate_variation_id",
        "class": "VariationBlockManager",
        "module": "src.compareblocks.mapping.variation_block",
        "test_file": "tests/unit/test_mapping_iou.py",
        "description": "Generate a unique variation ID",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "VariationBlockManager.add_seed_blocks",
        "class": "VariationBlockManager",
        "module": "src.compareblocks.mapping.variation_block",
        "test_file": "tests/unit/test_mapping_iou.py",
        "description": "Add seed blocks to the manager",
        "parameters": [
          "self",
          "seed_blocks: List[SeedBlock]"
        ]
      },
      {
        "function_name": "VariationBlockManager.create_overlapping_regions",
        "class": "VariationBlockManager",
        "module": "src.compareblocks.mapping.variation_block",
        "test_file": "tests/unit/test_mapping_iou.py",
        "description": "Create child variation blocks for overlapping regions",
        "parameters": [
          "self",
          "variations: List[VariationBlock]"
        ]
      },
      {
        "function_name": "VariationBlockManager.get_child_variations",
        "class": "VariationBlockManager",
        "module": "src.compareblocks.mapping.variation_block",
        "test_file": "tests/unit/test_mapping_iou.py",
        "description": "Get all child variations for a parent block",
        "parameters": [
          "self",
          "parent_block_id: str"
        ]
      },
      {
        "function_name": "VariationBlockManager.get_mapping_statistics",
        "class": "VariationBlockManager",
        "module": "src.compareblocks.mapping.variation_block",
        "test_file": "tests/unit/test_mapping_iou.py",
        "description": "Get statistics about variation mapping",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "VariationBlockManager.get_orphan_variations",
        "class": "VariationBlockManager",
        "module": "src.compareblocks.mapping.variation_block",
        "test_file": "tests/unit/test_mapping_iou.py",
        "description": "Get all orphaned (unmatched) variations",
        "parameters": [
          "self"
        ]
      },
      {
        "function_name": "VariationBlockManager.get_variations_by_engine",
        "class": "VariationBlockManager",
        "module": "src.compareblocks.mapping.variation_block",
        "test_file": "tests/unit/test_mapping_iou.py",
        "description": "Get all variations from a specific engine",
        "parameters": [
          "self",
          "engine: str"
        ]
      },
      {
        "function_name": "VariationBlockManager.get_variations_by_page",
        "class": "VariationBlockManager",
        "module": "src.compareblocks.mapping.variation_block",
        "test_file": "tests/unit/test_mapping_iou.py",
        "description": "Get all variations for a specific page",
        "parameters": [
          "self",
          "page: int"
        ]
      },
      {
        "function_name": "VariationBlockManager.get_variations_for_block",
        "class": "VariationBlockManager",
        "module": "src.compareblocks.mapping.variation_block",
        "test_file": "tests/unit/test_mapping_iou.py",
        "description": "Get all variations mapped to a specific seed block",
        "parameters": [
          "self",
          "block_id: str"
        ]
      },
      {
        "function_name": "VariationBlockManager.map_external_variation",
        "class": "VariationBlockManager",
        "module": "src.compareblocks.mapping.variation_block",
        "test_file": "tests/unit/test_mapping_iou.py",
        "description": "Map an external variation to seed blocks and create variation block",
        "parameters": [
          "self",
          "external_var: ExternalVariation"
        ]
      }
    ],
    "validate_setup": [
      {
        "function_name": "check_dependencies",
        "class": null,
        "module": "validate_setup",
        "test_file": "tests/unit/test_setup_validation.py",
        "description": "Check if key dependencies are installed",
        "parameters": []
      },
      {
        "function_name": "check_immutable_runners",
        "class": null,
        "module": "validate_setup",
        "test_file": "tests/unit/test_setup_validation.py",
        "description": "Check if immutable runner files exist and work",
        "parameters": []
      },
      {
        "function_name": "check_package_structure",
        "class": null,
        "module": "validate_setup",
        "test_file": "tests/unit/test_setup_validation.py",
        "description": "Check if package structure is correct",
        "parameters": []
      },
      {
        "function_name": "check_project_files",
        "class": null,
        "module": "validate_setup",
        "test_file": "tests/unit/test_setup_validation.py",
        "description": "Check if essential project files exist",
        "parameters": []
      },
      {
        "function_name": "check_python_version",
        "class": null,
        "module": "validate_setup",
        "test_file": "tests/unit/test_setup_validation.py",
        "description": "Check Python version requirement",
        "parameters": []
      },
      {
        "function_name": "check_virtual_environment",
        "class": null,
        "module": "validate_setup",
        "test_file": "tests/unit/test_setup_validation.py",
        "description": "Check if virtual environment exists and is activated",
        "parameters": []
      }
    ],
    "visual_ocr_testing_functions": [
      {
        "function_name": "create_input_feed_config",
        "class": null,
        "module": "visual_ocr_testing_functions",
        "test_file": "tests/unit/test_visual_ocr_testing_tool.py",
        "description": "Create an InputFeedConfig from a file path with automatic type detection and parameter optimization",
        "parameters": [
          {
            "name": "name",
            "type": "str",
            "description": "Name for the feed"
          },
          {
            "name": "file_path",
            "type": "str",
            "description": "Path to the file or directory"
          },
          {
            "name": "feed_type",
            "type": "Optional[str]",
            "description": "Override automatic type detection",
            "default": null
          }
        ]
      },
      {
        "function_name": "get_test_results_from_database",
        "class": null,
        "module": "visual_ocr_testing_functions",
        "test_file": "tests/unit/test_visual_ocr_testing_tool.py",
        "description": "Retrieve test results from the database with filtering and deserialization",
        "parameters": [
          {
            "name": "db_path",
            "type": "str",
            "description": "Path to the database",
            "default": "output/ocr_test_results.db"
          },
          {
            "name": "limit",
            "type": "int",
            "description": "Maximum number of results to return",
            "default": 100
          },
          {
            "name": "test_type",
            "type": "Optional[str]",
            "description": "Filter by test type",
            "default": null
          }
        ]
      },
      {
        "function_name": "save_test_result_to_database",
        "class": null,
        "module": "visual_ocr_testing_functions",
        "test_file": "tests/unit/test_visual_ocr_testing_tool.py",
        "description": "Save a test result to the database with proper serialization and error handling",
        "parameters": [
          {
            "name": "result",
            "type": "TestResult",
            "description": "TestResult object to save"
          },
          {
            "name": "db_path",
            "type": "str",
            "description": "Path to the database",
            "default": "output/ocr_test_results.db"
          }
        ]
      },
      {
        "function_name": "validate_consensus_json_format",
        "class": null,
        "module": "visual_ocr_testing_functions",
        "test_file": "tests/unit/test_visual_ocr_testing_tool.py",
        "description": "Validate consensus decisions JSON format with detailed examples and required field checking",
        "parameters": [
          {
            "name": "data",
            "type": "List[Dict[str, Any]]",
            "description": "List of consensus decision dictionaries"
          }
        ]
      },
      {
        "function_name": "validate_gbg_json_format",
        "class": null,
        "module": "visual_ocr_testing_functions",
        "test_file": "tests/unit/test_visual_ocr_testing_tool.py",
        "description": "Validate GBG analysis JSON format with detailed examples and field validation",
        "parameters": [
          {
            "name": "data",
            "type": "Dict[str, Any]",
            "description": "Dictionary containing GBG analysis data"
          }
        ]
      },
      {
        "function_name": "validate_json_format",
        "class": null,
        "module": "visual_ocr_testing_functions",
        "test_file": "tests/unit/test_visual_ocr_testing_tool.py",
        "description": "Validate JSON format and return validation result with examples for different data types",
        "parameters": [
          {
            "name": "data",
            "type": "Any",
            "description": "Parsed JSON data to validate"
          }
        ]
      }
    ],
    "functions.visual_ocr_testing_functions": [
      {
        "function_name": "create_input_feed_config",
        "class": null,
        "module": "functions.visual_ocr_testing_functions",
        "test_file": "tests/unit/test_visual_ocr_functions.py",
        "description": "Create an InputFeedConfig from a file path with automatic type detection",
        "parameters": [
          "name: str",
          "file_path: str",
          "feed_type: str = None"
        ]
      },
      {
        "function_name": "get_test_results_from_database",
        "class": null,
        "module": "functions.visual_ocr_testing_functions",
        "test_file": "tests/unit/test_visual_ocr_functions.py",
        "description": "Retrieve test results from the database",
        "parameters": [
          "db_path: str = \"output/ocr_test_results.db\"",
          "limit: int = 100",
          "test_type: str = None"
        ]
      },
      {
        "function_name": "save_test_result_to_database",
        "class": null,
        "module": "functions.visual_ocr_testing_functions",
        "test_file": "tests/unit/test_visual_ocr_functions.py",
        "description": "Save a test result to the database",
        "parameters": [
          "result: TestResult",
          "db_path: str = \"output/ocr_test_results.db\""
        ]
      },
      {
        "function_name": "validate_consensus_json_format",
        "class": null,
        "module": "functions.visual_ocr_testing_functions",
        "test_file": "tests/unit/test_visual_ocr_functions.py",
        "description": "Validate consensus decisions JSON format with detailed examples",
        "parameters": [
          "data: List[Dict[str, Any]]"
        ]
      },
      {
        "function_name": "validate_gbg_json_format",
        "class": null,
        "module": "functions.visual_ocr_testing_functions",
        "test_file": "tests/unit/test_visual_ocr_functions.py",
        "description": "Validate GBG analysis JSON format with detailed examples",
        "parameters": [
          "data: Dict[str, Any]"
        ]
      }
    ],
    "functions.analyze_project_test_coverage": [
      {
        "function_name": "determine_test_status",
        "class": null,
        "module": "functions.analyze_project_test_coverage",
        "test_file": "tests/unit/test_project_analysis.py",
        "description": "Determine if a source file has corresponding tests",
        "parameters": [
          "file_path: str",
          "test_files: Set[str]"
        ]
      }
    ],
    "src.compareblocks.io.schemas": [
      {
        "function_name": "get_consensus_schema",
        "class": null,
        "module": "src.compareblocks.io.schemas",
        "test_file": "tests/unit/test_io_validation.py",
        "description": "Get the consensus output schema for validation",
        "parameters": []
      },
      {
        "function_name": "get_input_schema",
        "class": null,
        "module": "src.compareblocks.io.schemas",
        "test_file": "tests/unit/test_io_validation.py",
        "description": "Get the input variation schema for validation",
        "parameters": []
      }
    ],
    "optimize_tesseract_for_clear_text": [
      {
        "function_name": "test_current_preprocessing",
        "class": null,
        "module": "optimize_tesseract_for_clear_text",
        "test_file": "tests/unit/test_ocr_optimization.py",
        "description": "Test current aggressive preprocessing (for comparison)",
        "parameters": [
          "image"
        ]
      },
      {
        "function_name": "test_enhanced_preprocessing",
        "class": null,
        "module": "optimize_tesseract_for_clear_text",
        "test_file": "tests/unit/test_ocr_optimization.py",
        "description": "Test enhanced preprocessing with morphological operations",
        "parameters": [
          "image"
        ]
      },
      {
        "function_name": "test_light_preprocessing",
        "class": null,
        "module": "optimize_tesseract_for_clear_text",
        "test_file": "tests/unit/test_ocr_optimization.py",
        "description": "Test light preprocessing - grayscale + light denoising",
        "parameters": [
          "image"
        ]
      },
      {
        "function_name": "test_minimal_preprocessing",
        "class": null,
        "module": "optimize_tesseract_for_clear_text",
        "test_file": "tests/unit/test_ocr_optimization.py",
        "description": "Test minimal preprocessing - just grayscale conversion",
        "parameters": [
          "image"
        ]
      },
      {
        "function_name": "test_ocr_configuration",
        "class": null,
        "module": "optimize_tesseract_for_clear_text",
        "test_file": "tests/unit/test_ocr_optimization.py",
        "description": "Test a specific OCR configuration",
        "parameters": [
          "region",
          "expected_text",
          "preprocessing_func",
          "tesseract_config"
        ]
      },
      {
        "function_name": "test_tesseract_configs",
        "class": null,
        "module": "optimize_tesseract_for_clear_text",
        "test_file": "tests/unit/test_ocr_optimization.py",
        "description": "Test different Tesseract configurations",
        "parameters": []
      }
    ],
    "functions.validate_catalog": [
      {
        "function_name": "validate_function_entry",
        "class": null,
        "module": "functions.validate_catalog",
        "test_file": "tests/unit/test_catalog_validation.py",
        "description": "Validate a single function catalog entry",
        "parameters": [
          "entry: Dict[str, Any]",
          "line_num: int"
        ]
      }
    ]
  }
}