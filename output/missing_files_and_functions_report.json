{
  "analysis_date": "2025-10-27T21:35:17.896744",
  "total_files_analyzed": 83,
  "files_missing_from_index": 68,
  "functions_missing_from_catalog": 121,
  "missing_files": [
    {
      "path": "analyze_missing_files_and_functions.py",
      "functions": 7,
      "classes": 1,
      "has_main": false
    },
    {
      "path": "analyze_missing_functions.py",
      "functions": 0,
      "classes": 0,
      "has_main": false
    },
    {
      "path": "build_test_catalog.py",
      "functions": 8,
      "classes": 1,
      "has_main": true
    },
    {
      "path": "conftest_unit_fix.py",
      "functions": 0,
      "classes": 0,
      "has_main": false
    },
    {
      "path": "extract_block_images.py",
      "functions": 0,
      "classes": 0,
      "has_main": false
    },
    {
      "path": "functions\\__init__.py",
      "functions": 0,
      "classes": 0,
      "has_main": false
    },
    {
      "path": "functions\\reconstruct_catalog.py",
      "functions": 0,
      "classes": 0,
      "has_main": false
    },
    {
      "path": "src\\compareblocks\\analytics\\dashboard.py",
      "functions": 2,
      "classes": 1,
      "has_main": false
    },
    {
      "path": "src\\compareblocks\\analytics\\engine_analytics.py",
      "functions": 2,
      "classes": 2,
      "has_main": false
    },
    {
      "path": "src\\compareblocks\\analytics\\export.py",
      "functions": 2,
      "classes": 1,
      "has_main": false
    },
    {
      "path": "src\\compareblocks\\analytics\\report_generator.py",
      "functions": 2,
      "classes": 2,
      "has_main": false
    },
    {
      "path": "src\\compareblocks\\association\\alignment.py",
      "functions": 2,
      "classes": 2,
      "has_main": false
    },
    {
      "path": "src\\compareblocks\\association\\manager.py",
      "functions": 2,
      "classes": 3,
      "has_main": false
    },
    {
      "path": "src\\compareblocks\\association\\parsers.py",
      "functions": 4,
      "classes": 7,
      "has_main": false
    },
    {
      "path": "src\\compareblocks\\association\\pymupdf_matcher.py",
      "functions": 1,
      "classes": 2,
      "has_main": false
    },
    {
      "path": "src\\compareblocks\\association\\tesseract_matcher.py",
      "functions": 0,
      "classes": 2,
      "has_main": false
    },
    {
      "path": "src\\compareblocks\\config\\engine_config.py",
      "functions": 0,
      "classes": 7,
      "has_main": false
    },
    {
      "path": "src\\compareblocks\\config\\file_manager.py",
      "functions": 5,
      "classes": 1,
      "has_main": false
    },
    {
      "path": "src\\compareblocks\\consensus\\guard.py",
      "functions": 6,
      "classes": 3,
      "has_main": false
    },
    {
      "path": "src\\compareblocks\\consensus\\merge.py",
      "functions": 7,
      "classes": 4,
      "has_main": false
    },
    {
      "path": "src\\compareblocks\\consensus\\policy.py",
      "functions": 8,
      "classes": 4,
      "has_main": false
    },
    {
      "path": "src\\compareblocks\\consensus\\score.py",
      "functions": 9,
      "classes": 4,
      "has_main": false
    },
    {
      "path": "src\\compareblocks\\debug\\image_extractor.py",
      "functions": 1,
      "classes": 1,
      "has_main": false
    },
    {
      "path": "src\\compareblocks\\engines\\comprehensive_engine_gbg_processor.py",
      "functions": 3,
      "classes": 5,
      "has_main": false
    },
    {
      "path": "src\\compareblocks\\engines\\docling_engine.py",
      "functions": 2,
      "classes": 3,
      "has_main": false
    },
    {
      "path": "src\\compareblocks\\engines\\dual_output_processor.py",
      "functions": 2,
      "classes": 2,
      "has_main": false
    },
    {
      "path": "src\\compareblocks\\engines\\gbg_guided_tesseract_engine.py",
      "functions": 0,
      "classes": 3,
      "has_main": false
    },
    {
      "path": "src\\compareblocks\\engines\\gbg_integrated_processor.py",
      "functions": 1,
      "classes": 2,
      "has_main": false
    },
    {
      "path": "src\\compareblocks\\engines\\integrated_processor.py",
      "functions": 2,
      "classes": 3,
      "has_main": false
    },
    {
      "path": "src\\compareblocks\\engines\\kreuzberg_engine.py",
      "functions": 2,
      "classes": 3,
      "has_main": false
    },
    {
      "path": "src\\compareblocks\\engines\\manager.py",
      "functions": 3,
      "classes": 2,
      "has_main": false
    },
    {
      "path": "src\\compareblocks\\engines\\paddleocr_engine.py",
      "functions": 2,
      "classes": 3,
      "has_main": false
    },
    {
      "path": "src\\compareblocks\\engines\\pymupdf_engine.py",
      "functions": 2,
      "classes": 3,
      "has_main": false
    },
    {
      "path": "src\\compareblocks\\engines\\tesseract_engine.py",
      "functions": 2,
      "classes": 3,
      "has_main": false
    },
    {
      "path": "src\\compareblocks\\features\\anomaly.py",
      "functions": 0,
      "classes": 2,
      "has_main": false
    },
    {
      "path": "src\\compareblocks\\features\\consistency.py",
      "functions": 3,
      "classes": 4,
      "has_main": false
    },
    {
      "path": "src\\compareblocks\\features\\consistency_integration.py",
      "functions": 2,
      "classes": 2,
      "has_main": false
    },
    {
      "path": "src\\compareblocks\\features\\context.py",
      "functions": 0,
      "classes": 2,
      "has_main": false
    },
    {
      "path": "src\\compareblocks\\features\\core.py",
      "functions": 0,
      "classes": 2,
      "has_main": false
    },
    {
      "path": "src\\compareblocks\\features\\language.py",
      "functions": 0,
      "classes": 2,
      "has_main": false
    },
    {
      "path": "src\\compareblocks\\gbg\\ids.py",
      "functions": 0,
      "classes": 1,
      "has_main": false
    },
    {
      "path": "src\\compareblocks\\gbg\\orientation.py",
      "functions": 0,
      "classes": 2,
      "has_main": false
    },
    {
      "path": "src\\compareblocks\\gbg\\processor.py",
      "functions": 1,
      "classes": 1,
      "has_main": true
    },
    {
      "path": "src\\compareblocks\\gbg\\seed.py",
      "functions": 0,
      "classes": 2,
      "has_main": false
    },
    {
      "path": "src\\compareblocks\\gbg\\types.py",
      "functions": 0,
      "classes": 3,
      "has_main": false
    },
    {
      "path": "src\\compareblocks\\gui\\app.py",
      "functions": 3,
      "classes": 2,
      "has_main": true
    },
    {
      "path": "src\\compareblocks\\gui\\config_forms.py",
      "functions": 0,
      "classes": 5,
      "has_main": false
    },
    {
      "path": "src\\compareblocks\\gui\\import_dialog.py",
      "functions": 0,
      "classes": 4,
      "has_main": false
    },
    {
      "path": "src\\compareblocks\\gui\\pdf_viewer.py",
      "functions": 0,
      "classes": 3,
      "has_main": false
    },
    {
      "path": "src\\compareblocks\\gui\\review_gui.py",
      "functions": 1,
      "classes": 2,
      "has_main": true
    },
    {
      "path": "src\\compareblocks\\gui\\variations_panel.py",
      "functions": 0,
      "classes": 4,
      "has_main": false
    },
    {
      "path": "src\\compareblocks\\io\\loader.py",
      "functions": 2,
      "classes": 2,
      "has_main": false
    },
    {
      "path": "src\\compareblocks\\io\\pdf_metadata.py",
      "functions": 2,
      "classes": 1,
      "has_main": false
    },
    {
      "path": "src\\compareblocks\\io\\schemas.py",
      "functions": 2,
      "classes": 0,
      "has_main": false
    },
    {
      "path": "src\\compareblocks\\io\\writer.py",
      "functions": 2,
      "classes": 3,
      "has_main": false
    },
    {
      "path": "src\\compareblocks\\mapping\\match.py",
      "functions": 0,
      "classes": 3,
      "has_main": false
    },
    {
      "path": "src\\compareblocks\\mapping\\variation_block.py",
      "functions": 0,
      "classes": 4,
      "has_main": false
    },
    {
      "path": "src\\compareblocks\\mcp\\client.py",
      "functions": 0,
      "classes": 1,
      "has_main": false
    },
    {
      "path": "src\\compareblocks\\mcp\\handlers.py",
      "functions": 0,
      "classes": 3,
      "has_main": false
    },
    {
      "path": "src\\compareblocks\\mcp\\protocol.py",
      "functions": 0,
      "classes": 6,
      "has_main": false
    },
    {
      "path": "src\\compareblocks\\mcp\\server.py",
      "functions": 0,
      "classes": 1,
      "has_main": false
    },
    {
      "path": "src\\compareblocks\\mcp\\validation.py",
      "functions": 0,
      "classes": 1,
      "has_main": false
    },
    {
      "path": "src\\compareblocks\\normalize\\textnorm.py",
      "functions": 4,
      "classes": 3,
      "has_main": false
    },
    {
      "path": "src\\compareblocks\\processing\\dynamic_reprocessor.py",
      "functions": 4,
      "classes": 6,
      "has_main": false
    },
    {
      "path": "src\\compareblocks\\project\\manager.py",
      "functions": 3,
      "classes": 3,
      "has_main": false
    },
    {
      "path": "src\\compareblocks\\testing\\coverage_tracker.py",
      "functions": 3,
      "classes": 4,
      "has_main": false
    },
    {
      "path": "src\\compareblocks\\testing\\engine_validator.py",
      "functions": 3,
      "classes": 3,
      "has_main": false
    },
    {
      "path": "src\\compareblocks\\testing\\performance_tracker.py",
      "functions": 3,
      "classes": 4,
      "has_main": false
    }
  ],
  "missing_functions": [
    {
      "function_name": "analyze_python_file",
      "module": "analyze_missing_files_and_functions",
      "file_path": "analyze_missing_files_and_functions.py",
      "class": null,
      "line_number": 76,
      "docstring": "Analyze a Python file and extract all functions and classes.",
      "parameters": [
        "file_path"
      ]
    },
    {
      "function_name": "find_all_python_files",
      "module": "analyze_missing_files_and_functions",
      "file_path": "analyze_missing_files_and_functions.py",
      "class": null,
      "line_number": 122,
      "docstring": "Find all Python files in the project, excluding test files and __pycache__.",
      "parameters": []
    },
    {
      "function_name": "load_function_catalog",
      "module": "analyze_missing_files_and_functions",
      "file_path": "analyze_missing_files_and_functions.py",
      "class": null,
      "line_number": 151,
      "docstring": "Load existing function catalog.",
      "parameters": []
    },
    {
      "function_name": "get_files_in_index",
      "module": "analyze_missing_files_and_functions",
      "file_path": "analyze_missing_files_and_functions.py",
      "class": null,
      "line_number": 172,
      "docstring": "Get files mentioned in file_index_readme.md.",
      "parameters": []
    },
    {
      "function_name": "should_be_in_index",
      "module": "analyze_missing_files_and_functions",
      "file_path": "analyze_missing_files_and_functions.py",
      "class": null,
      "line_number": 199,
      "docstring": "Determine if a file should be in the file index.",
      "parameters": [
        "file_info"
      ]
    },
    {
      "function_name": "generate_function_name",
      "module": "analyze_missing_files_and_functions",
      "file_path": "analyze_missing_files_and_functions.py",
      "class": null,
      "line_number": 219,
      "docstring": "Generate function name in catalog format.",
      "parameters": [
        "func_info",
        "class_name",
        "module_path"
      ]
    },
    {
      "function_name": "analyze_project",
      "module": "analyze_missing_files_and_functions",
      "file_path": "analyze_missing_files_and_functions.py",
      "class": null,
      "line_number": 226,
      "docstring": "Analyze the entire project for missing files and functions.",
      "parameters": []
    },
    {
      "function_name": "FunctionExtractor.visit_ClassDef",
      "module": "analyze_missing_files_and_functions",
      "file_path": "analyze_missing_files_and_functions.py",
      "class": "FunctionExtractor",
      "line_number": 27,
      "docstring": "Visit class definitions.",
      "parameters": [
        "self",
        "node"
      ]
    },
    {
      "function_name": "FunctionExtractor.visit_FunctionDef",
      "module": "analyze_missing_files_and_functions",
      "file_path": "analyze_missing_files_and_functions.py",
      "class": "FunctionExtractor",
      "line_number": 55,
      "docstring": "Visit function definitions.",
      "parameters": [
        "self",
        "node"
      ]
    },
    {
      "function_name": "analyze_test_file",
      "module": "build_test_catalog",
      "file_path": "build_test_catalog.py",
      "class": null,
      "line_number": 116,
      "docstring": "Analyze a test file and extract test function information.",
      "parameters": [
        "file_path"
      ]
    },
    {
      "function_name": "load_function_catalog",
      "module": "build_test_catalog",
      "file_path": "build_test_catalog.py",
      "class": null,
      "line_number": 151,
      "docstring": "Load the function catalog and create a lookup by function name.",
      "parameters": [
        "catalog_path"
      ]
    },
    {
      "function_name": "create_test_catalog_entry",
      "module": "build_test_catalog",
      "file_path": "build_test_catalog.py",
      "class": null,
      "line_number": 192,
      "docstring": "Create a test catalog entry.",
      "parameters": [
        "test_info",
        "test_file_info",
        "function_catalog"
      ]
    },
    {
      "function_name": "build_test_catalog",
      "module": "build_test_catalog",
      "file_path": "build_test_catalog.py",
      "class": null,
      "line_number": 242,
      "docstring": "Build the complete test catalog.",
      "parameters": []
    },
    {
      "function_name": "generate_cross_reference_report",
      "module": "build_test_catalog",
      "file_path": "build_test_catalog.py",
      "class": null,
      "line_number": 293,
      "docstring": "Generate a cross-reference report between functions and tests.",
      "parameters": [
        "test_entries",
        "function_catalog"
      ]
    },
    {
      "function_name": "update_function_catalog_with_tests",
      "module": "build_test_catalog",
      "file_path": "build_test_catalog.py",
      "class": null,
      "line_number": 327,
      "docstring": "Update function catalog entries to include their corresponding test names.",
      "parameters": [
        "test_entries"
      ]
    },
    {
      "function_name": "TestFunctionAnalyzer.visit_Import",
      "module": "build_test_catalog",
      "file_path": "build_test_catalog.py",
      "class": "TestFunctionAnalyzer",
      "line_number": 24,
      "docstring": "Visit import statements.",
      "parameters": [
        "self",
        "node"
      ]
    },
    {
      "function_name": "TestFunctionAnalyzer.visit_ImportFrom",
      "module": "build_test_catalog",
      "file_path": "build_test_catalog.py",
      "class": "TestFunctionAnalyzer",
      "line_number": 29,
      "docstring": "Visit from...import statements.",
      "parameters": [
        "self",
        "node"
      ]
    },
    {
      "function_name": "TestFunctionAnalyzer.visit_ClassDef",
      "module": "build_test_catalog",
      "file_path": "build_test_catalog.py",
      "class": "TestFunctionAnalyzer",
      "line_number": 35,
      "docstring": "Visit class definitions.",
      "parameters": [
        "self",
        "node"
      ]
    },
    {
      "function_name": "TestFunctionAnalyzer.visit_FunctionDef",
      "module": "build_test_catalog",
      "file_path": "build_test_catalog.py",
      "class": "TestFunctionAnalyzer",
      "line_number": 42,
      "docstring": "Visit function definitions.",
      "parameters": [
        "self",
        "node"
      ]
    },
    {
      "function_name": "analyze_python_file",
      "module": "functions.analyze_project_test_coverage",
      "file_path": "functions\\analyze_project_test_coverage.py",
      "class": null,
      "line_number": 61,
      "docstring": "Analyze a Python file for functions and classes.",
      "parameters": [
        "file_path"
      ]
    },
    {
      "function_name": "FunctionAnalyzer.visit_ClassDef",
      "module": "functions.analyze_project_test_coverage",
      "file_path": "functions\\analyze_project_test_coverage.py",
      "class": "FunctionAnalyzer",
      "line_number": 23,
      "docstring": "Visit class definitions.",
      "parameters": [
        "self",
        "node"
      ]
    },
    {
      "function_name": "FunctionAnalyzer.visit_FunctionDef",
      "module": "functions.analyze_project_test_coverage",
      "file_path": "functions\\analyze_project_test_coverage.py",
      "class": "FunctionAnalyzer",
      "line_number": 35,
      "docstring": "Visit function definitions.",
      "parameters": [
        "self",
        "node"
      ]
    },
    {
      "function_name": "FunctionAnalyzer.visit_AsyncFunctionDef",
      "module": "functions.analyze_project_test_coverage",
      "file_path": "functions\\analyze_project_test_coverage.py",
      "class": "FunctionAnalyzer",
      "line_number": 57,
      "docstring": "Visit async function definitions.",
      "parameters": [
        "self",
        "node"
      ]
    },
    {
      "function_name": "example_usage",
      "module": "functions.visual_ocr_testing_functions",
      "file_path": "functions\\visual_ocr_testing_functions.py",
      "class": null,
      "line_number": 774,
      "docstring": "Example usage of the Visual OCR Testing Tool functions.\n    \n    This function demonstrates how to use the various functions\n    for JSON validation, feed management, and database operations.",
      "parameters": []
    },
    {
      "function_name": "show_remaining_issues",
      "module": "show_remaining_issues",
      "file_path": "show_remaining_issues.py",
      "class": null,
      "line_number": 10,
      "docstring": "Show the remaining matching issues.",
      "parameters": []
    },
    {
      "function_name": "track_character_consistency",
      "module": "compareblocks.features.consistency",
      "file_path": "src\\compareblocks\\features\\consistency.py",
      "class": null,
      "line_number": 614,
      "docstring": "Convenience function to track character consistency for a block.\n    \n    Args:\n        block_id: Unique identifier for the block\n        variations: List of text variations\n        override_terms: Optional list of override terms\n        \n    Returns:\n        CharacterConsistency object",
      "parameters": [
        "block_id",
        "variations",
        "override_terms"
      ]
    },
    {
      "function_name": "calculate_block_consistency_for_json",
      "module": "compareblocks.features.consistency",
      "file_path": "src\\compareblocks\\features\\consistency.py",
      "class": null,
      "line_number": 634,
      "docstring": "Calculate consistency metrics for a block formatted for JSON output.\n    \n    Args:\n        block_id: Unique identifier for the block\n        variations: List of text variations for this block\n        override_terms: Optional list of override terms\n        normalize_for_comparison: Whether to normalize text before comparison\n        \n    Returns:\n        Dictionary with consistency metrics formatted for JSON inclusion",
      "parameters": [
        "block_id",
        "variations",
        "override_terms",
        "normalize_for_comparison"
      ]
    },
    {
      "function_name": "calculate_dynamic_consistency_percentage",
      "module": "compareblocks.features.consistency",
      "file_path": "src\\compareblocks\\features\\consistency.py",
      "class": null,
      "line_number": 681,
      "docstring": "Calculate dynamic consistency percentages across multiple blocks.\n    \n    Args:\n        consistencies: List of consistency objects\n        \n    Returns:\n        Dictionary with overall consistency metrics",
      "parameters": [
        "consistencies"
      ]
    },
    {
      "function_name": "CharacterConsistency.to_dict",
      "module": "compareblocks.features.consistency",
      "file_path": "src\\compareblocks\\features\\consistency.py",
      "class": "CharacterConsistency",
      "line_number": 30,
      "docstring": "Convert to dictionary format.",
      "parameters": [
        "self"
      ]
    },
    {
      "function_name": "CharacterConsistencyTracker.add_override_terms",
      "module": "compareblocks.features.consistency",
      "file_path": "src\\compareblocks\\features\\consistency.py",
      "class": "CharacterConsistencyTracker",
      "line_number": 70,
      "docstring": "Add terms where consistency trumps spelling.",
      "parameters": [
        "self",
        "terms"
      ]
    },
    {
      "function_name": "CharacterConsistencyTracker.is_override_term",
      "module": "compareblocks.features.consistency",
      "file_path": "src\\compareblocks\\features\\consistency.py",
      "class": "CharacterConsistencyTracker",
      "line_number": 74,
      "docstring": "Check if word is an override term (acronym/domain term).",
      "parameters": [
        "self",
        "word"
      ]
    },
    {
      "function_name": "CharacterConsistencyTracker.calculate_character_consistency",
      "module": "compareblocks.features.consistency",
      "file_path": "src\\compareblocks\\features\\consistency.py",
      "class": "CharacterConsistencyTracker",
      "line_number": 262,
      "docstring": "Calculate character-by-character consistency across variations for a single block.\n        Uses multiple scoring methods to determine accuracy from different perspectives.\n        \n        Args:\n            variations: List of text variations for the same block to compare\n            normalize_for_comparison: Whether to apply normalization before comparison\n                                    (handles whitespace, newlines, special characters)\n            include_multiple_methods: Whether to calculate multiple scoring methods\n            \n        Returns:\n            Tuple of (primary_consistency_score, details_dict_with_multiple_methods)",
      "parameters": [
        "self",
        "variations",
        "normalize_for_comparison",
        "include_multiple_methods"
      ]
    },
    {
      "function_name": "CharacterConsistencyTracker.calculate_word_consistency",
      "module": "compareblocks.features.consistency",
      "file_path": "src\\compareblocks\\features\\consistency.py",
      "class": "CharacterConsistencyTracker",
      "line_number": 345,
      "docstring": "Calculate word-level consistency with spelling accuracy.\n        \n        Args:\n            variations: List of text variations to compare\n            \n        Returns:\n            Tuple of (consistency_score, word_details)",
      "parameters": [
        "self",
        "variations"
      ]
    },
    {
      "function_name": "CharacterConsistencyTracker.calculate_spelling_accuracy",
      "module": "compareblocks.features.consistency",
      "file_path": "src\\compareblocks\\features\\consistency.py",
      "class": "CharacterConsistencyTracker",
      "line_number": 414,
      "docstring": "Calculate spelling accuracy score based on word consistency.\n        \n        Args:\n            word_details: Dictionary of word consistency details\n            \n        Returns:\n            Spelling accuracy score (0.0 to 1.0)",
      "parameters": [
        "self",
        "word_details"
      ]
    },
    {
      "function_name": "CharacterConsistencyTracker.track_consistency_for_block_with_context",
      "module": "compareblocks.features.consistency",
      "file_path": "src\\compareblocks\\features\\consistency.py",
      "class": "CharacterConsistencyTracker",
      "line_number": 443,
      "docstring": "Track consistency for a block with optional surrounding block context.\n        \n        Args:\n            block_id: Unique identifier for the block\n            variations: List of text variations for this block\n            surrounding_blocks: Optional dict of {position: [variations]} for context\n                               where position can be 'before' or 'after'\n            \n        Returns:\n            CharacterConsistency object with all metrics",
      "parameters": [
        "self",
        "block_id",
        "variations",
        "surrounding_blocks"
      ]
    },
    {
      "function_name": "CharacterConsistencyTracker.track_consistency_for_block",
      "module": "compareblocks.features.consistency",
      "file_path": "src\\compareblocks\\features\\consistency.py",
      "class": "CharacterConsistencyTracker",
      "line_number": 479,
      "docstring": "Track comprehensive consistency metrics for a block.\n        \n        Args:\n            block_id: Unique identifier for the block\n            variations: List of text variations for this block\n            \n        Returns:\n            CharacterConsistency object with all metrics",
      "parameters": [
        "self",
        "block_id",
        "variations"
      ]
    },
    {
      "function_name": "CharacterConsistencyTracker.update_consistency_with_new_files",
      "module": "compareblocks.features.consistency",
      "file_path": "src\\compareblocks\\features\\consistency.py",
      "class": "CharacterConsistencyTracker",
      "line_number": 535,
      "docstring": "Update consistency metrics when new associated files are added.\n        \n        Args:\n            existing_consistency: Current consistency metrics\n            new_variations: New variations to include\n            \n        Returns:\n            Updated CharacterConsistency object",
      "parameters": [
        "self",
        "existing_consistency",
        "new_variations"
      ]
    },
    {
      "function_name": "ConsistencyOverrideManager.add_domain_terms",
      "module": "compareblocks.features.consistency",
      "file_path": "src\\compareblocks\\features\\consistency.py",
      "class": "ConsistencyOverrideManager",
      "line_number": 567,
      "docstring": "Add domain-specific terms.",
      "parameters": [
        "self",
        "terms"
      ]
    },
    {
      "function_name": "ConsistencyOverrideManager.add_acronyms",
      "module": "compareblocks.features.consistency",
      "file_path": "src\\compareblocks\\features\\consistency.py",
      "class": "ConsistencyOverrideManager",
      "line_number": 571,
      "docstring": "Add known acronyms.",
      "parameters": [
        "self",
        "acronyms"
      ]
    },
    {
      "function_name": "ConsistencyOverrideManager.add_custom_overrides",
      "module": "compareblocks.features.consistency",
      "file_path": "src\\compareblocks\\features\\consistency.py",
      "class": "ConsistencyOverrideManager",
      "line_number": 575,
      "docstring": "Add custom override terms.",
      "parameters": [
        "self",
        "terms"
      ]
    },
    {
      "function_name": "ConsistencyOverrideManager.should_override_spelling",
      "module": "compareblocks.features.consistency",
      "file_path": "src\\compareblocks\\features\\consistency.py",
      "class": "ConsistencyOverrideManager",
      "line_number": 579,
      "docstring": "Determine if consistency should trump spelling for a word.\n        \n        Args:\n            word: The word to check\n            consistency_score: Consistency score for the word\n            spelling_score: Spelling accuracy score for the word\n            \n        Returns:\n            True if consistency should override spelling concerns",
      "parameters": [
        "self",
        "word",
        "consistency_score",
        "spelling_score"
      ]
    },
    {
      "function_name": "ConsistencyOverrideManager.get_all_override_terms",
      "module": "compareblocks.features.consistency",
      "file_path": "src\\compareblocks\\features\\consistency.py",
      "class": "ConsistencyOverrideManager",
      "line_number": 607,
      "docstring": "Get all override terms.",
      "parameters": [
        "self"
      ]
    },
    {
      "function_name": "create_consistency_integration_manager",
      "module": "compareblocks.features.consistency_integration",
      "file_path": "src\\compareblocks\\features\\consistency_integration.py",
      "class": null,
      "line_number": 395,
      "docstring": "Create a new consistency integration manager with default settings.",
      "parameters": []
    },
    {
      "function_name": "track_pdf_consistency",
      "module": "compareblocks.features.consistency_integration",
      "file_path": "src\\compareblocks\\features\\consistency_integration.py",
      "class": null,
      "line_number": 400,
      "docstring": "Convenience function to track consistency for all blocks in a PDF.\n    \n    Args:\n        pdf_path: Path to the PDF file\n        block_variations: Dictionary mapping block_id to list of variations\n        \n    Returns:\n        Dictionary mapping block_id to CharacterConsistency",
      "parameters": [
        "pdf_path",
        "block_variations"
      ]
    },
    {
      "function_name": "ConsistencyIntegrationManager.track_block_consistency_with_associations",
      "module": "compareblocks.features.consistency_integration",
      "file_path": "src\\compareblocks\\features\\consistency_integration.py",
      "class": "ConsistencyIntegrationManager",
      "line_number": 63,
      "docstring": "Track block consistency including all associated files for the PDF.\n        Focuses on block-level comparisons across different extraction sources.\n        \n        Args:\n            pdf_path: Path to the PDF file\n            block_id: Unique identifier for the block\n            block_variations: Text variations for this specific block from different engines\n            block_position: Optional position of block in document for context\n            \n        Returns:\n            CharacterConsistency object with comprehensive metrics",
      "parameters": [
        "self",
        "pdf_path",
        "block_id",
        "block_variations",
        "block_position"
      ]
    },
    {
      "function_name": "ConsistencyIntegrationManager.track_block_consistency_with_surrounding_context",
      "module": "compareblocks.features.consistency_integration",
      "file_path": "src\\compareblocks\\features\\consistency_integration.py",
      "class": "ConsistencyIntegrationManager",
      "line_number": 142,
      "docstring": "Track block consistency with surrounding block context when needed.\n        \n        Args:\n            pdf_path: Path to the PDF file\n            block_id: Unique identifier for the block\n            block_variations: Text variations for this block\n            surrounding_blocks: Optional dict with 'before' and 'after' block variations\n                              Format: {'before': {'block_id': [variations]}, 'after': {'block_id': [variations]}}\n            \n        Returns:\n            CharacterConsistency object with context-aware metrics",
      "parameters": [
        "self",
        "pdf_path",
        "block_id",
        "block_variations",
        "surrounding_blocks"
      ]
    },
    {
      "function_name": "ConsistencyIntegrationManager.update_consistency_with_new_association",
      "module": "compareblocks.features.consistency_integration",
      "file_path": "src\\compareblocks\\features\\consistency_integration.py",
      "class": "ConsistencyIntegrationManager",
      "line_number": 198,
      "docstring": "Update block consistency when a new associated file is added.\n        \n        Args:\n            pdf_path: Path to the PDF file\n            block_id: Block identifier\n            new_file_path: Path to the new associated file\n            \n        Returns:\n            Updated CharacterConsistency object",
      "parameters": [
        "self",
        "pdf_path",
        "block_id",
        "new_file_path"
      ]
    },
    {
      "function_name": "ConsistencyIntegrationManager.get_dynamic_consistency_percentages",
      "module": "compareblocks.features.consistency_integration",
      "file_path": "src\\compareblocks\\features\\consistency_integration.py",
      "class": "ConsistencyIntegrationManager",
      "line_number": 246,
      "docstring": "Get dynamic consistency percentages for all blocks in a PDF.\n        \n        Args:\n            pdf_path: Path to the PDF file\n            \n        Returns:\n            Dictionary with overall consistency metrics",
      "parameters": [
        "self",
        "pdf_path"
      ]
    },
    {
      "function_name": "ConsistencyIntegrationManager.apply_consistency_overrides",
      "module": "compareblocks.features.consistency_integration",
      "file_path": "src\\compareblocks\\features\\consistency_integration.py",
      "class": "ConsistencyIntegrationManager",
      "line_number": 273,
      "docstring": "Apply consistency overrides for specific terms in a block.\n        \n        Args:\n            block_id: Block identifier\n            override_terms: List of terms to override",
      "parameters": [
        "self",
        "block_id",
        "override_terms"
      ]
    },
    {
      "function_name": "ConsistencyIntegrationManager.get_consistency_summary_for_pdf",
      "module": "compareblocks.features.consistency_integration",
      "file_path": "src\\compareblocks\\features\\consistency_integration.py",
      "class": "ConsistencyIntegrationManager",
      "line_number": 293,
      "docstring": "Get comprehensive consistency summary for a PDF.\n        \n        Args:\n            pdf_path: Path to the PDF file\n            \n        Returns:\n            Dictionary with consistency summary",
      "parameters": [
        "self",
        "pdf_path"
      ]
    },
    {
      "function_name": "ConsistencyIntegrationManager.validate_consistency_state",
      "module": "compareblocks.features.consistency_integration",
      "file_path": "src\\compareblocks\\features\\consistency_integration.py",
      "class": "ConsistencyIntegrationManager",
      "line_number": 341,
      "docstring": "Validate consistency state for a PDF and identify issues.\n        \n        Args:\n            pdf_path: Path to the PDF file\n            \n        Returns:\n            Dictionary with validation results",
      "parameters": [
        "self",
        "pdf_path"
      ]
    },
    {
      "function_name": "ExtractionHandler.get_session",
      "module": "compareblocks.mcp.handlers",
      "file_path": "src\\compareblocks\\mcp\\handlers.py",
      "class": "ExtractionHandler",
      "line_number": 264,
      "docstring": "Get processing session by ID.",
      "parameters": [
        "self",
        "session_id"
      ]
    },
    {
      "function_name": "ExtractionHandler.list_sessions",
      "module": "compareblocks.mcp.handlers",
      "file_path": "src\\compareblocks\\mcp\\handlers.py",
      "class": "ExtractionHandler",
      "line_number": 268,
      "docstring": "List all processing sessions.",
      "parameters": [
        "self"
      ]
    },
    {
      "function_name": "MCPValidator.validate_consensus_output",
      "module": "compareblocks.mcp.validation",
      "file_path": "src\\compareblocks\\mcp\\validation.py",
      "class": "MCPValidator",
      "line_number": 130,
      "docstring": "Validate consensus output data.",
      "parameters": [
        "self",
        "data"
      ]
    },
    {
      "function_name": "rebuild_all_comparisons",
      "module": "compareblocks.processing.dynamic_reprocessor",
      "file_path": "src\\compareblocks\\processing\\dynamic_reprocessor.py",
      "class": null,
      "line_number": 629,
      "docstring": "Rebuild all comparisons for a PDF.",
      "parameters": [
        "pdf_path",
        "storage_mode"
      ]
    },
    {
      "function_name": "incremental_processing_for_new_files",
      "module": "compareblocks.processing.dynamic_reprocessor",
      "file_path": "src\\compareblocks\\processing\\dynamic_reprocessor.py",
      "class": null,
      "line_number": 636,
      "docstring": "Process new files incrementally.",
      "parameters": [
        "pdf_path",
        "new_files"
      ]
    },
    {
      "function_name": "update_consistency_percentages",
      "module": "compareblocks.processing.dynamic_reprocessor",
      "file_path": "src\\compareblocks\\processing\\dynamic_reprocessor.py",
      "class": null,
      "line_number": 642,
      "docstring": "Update consistency percentages for a PDF.",
      "parameters": [
        "pdf_path"
      ]
    },
    {
      "function_name": "detect_reprocessing_needs",
      "module": "compareblocks.processing.dynamic_reprocessor",
      "file_path": "src\\compareblocks\\processing\\dynamic_reprocessor.py",
      "class": null,
      "line_number": 648,
      "docstring": "Detect if reprocessing is needed for a PDF.",
      "parameters": [
        "pdf_path"
      ]
    },
    {
      "function_name": "DynamicReprocessor.generate_configuration_hash",
      "module": "compareblocks.processing.dynamic_reprocessor",
      "file_path": "src\\compareblocks\\processing\\dynamic_reprocessor.py",
      "class": "DynamicReprocessor",
      "line_number": 107,
      "docstring": "Generate hash for configuration to detect changes.",
      "parameters": [
        "self",
        "configuration"
      ]
    },
    {
      "function_name": "DynamicReprocessor.get_current_configuration",
      "module": "compareblocks.processing.dynamic_reprocessor",
      "file_path": "src\\compareblocks\\processing\\dynamic_reprocessor.py",
      "class": "DynamicReprocessor",
      "line_number": 117,
      "docstring": "Get current effective configuration for all engines.",
      "parameters": [
        "self",
        "pdf_path",
        "include_timestamp"
      ]
    },
    {
      "function_name": "DynamicReprocessor.create_processing_version",
      "module": "compareblocks.processing.dynamic_reprocessor",
      "file_path": "src\\compareblocks\\processing\\dynamic_reprocessor.py",
      "class": "DynamicReprocessor",
      "line_number": 137,
      "docstring": "Create a new processing version.",
      "parameters": [
        "self",
        "pdf_path",
        "processing_mode",
        "storage_mode",
        "engines_used",
        "parent_version_id",
        "description"
      ]
    },
    {
      "function_name": "DynamicReprocessor.save_processing_version",
      "module": "compareblocks.processing.dynamic_reprocessor",
      "file_path": "src\\compareblocks\\processing\\dynamic_reprocessor.py",
      "class": "DynamicReprocessor",
      "line_number": 165,
      "docstring": "Save processing version to storage.",
      "parameters": [
        "self",
        "version"
      ]
    },
    {
      "function_name": "DynamicReprocessor.load_processing_versions",
      "module": "compareblocks.processing.dynamic_reprocessor",
      "file_path": "src\\compareblocks\\processing\\dynamic_reprocessor.py",
      "class": "DynamicReprocessor",
      "line_number": 175,
      "docstring": "Load all processing versions.",
      "parameters": [
        "self"
      ]
    },
    {
      "function_name": "DynamicReprocessor.get_latest_version",
      "module": "compareblocks.processing.dynamic_reprocessor",
      "file_path": "src\\compareblocks\\processing\\dynamic_reprocessor.py",
      "class": "DynamicReprocessor",
      "line_number": 195,
      "docstring": "Get the latest processing version for a PDF.",
      "parameters": [
        "self",
        "pdf_path"
      ]
    },
    {
      "function_name": "DynamicReprocessor.detect_configuration_changes",
      "module": "compareblocks.processing.dynamic_reprocessor",
      "file_path": "src\\compareblocks\\processing\\dynamic_reprocessor.py",
      "class": "DynamicReprocessor",
      "line_number": 207,
      "docstring": "Detect if configuration has changed since last processing.",
      "parameters": [
        "self",
        "pdf_path"
      ]
    },
    {
      "function_name": "DynamicReprocessor.detect_new_associated_files",
      "module": "compareblocks.processing.dynamic_reprocessor",
      "file_path": "src\\compareblocks\\processing\\dynamic_reprocessor.py",
      "class": "DynamicReprocessor",
      "line_number": 262,
      "docstring": "Detect if new associated files have been added.",
      "parameters": [
        "self",
        "pdf_path"
      ]
    },
    {
      "function_name": "DynamicReprocessor.create_reprocessing_trigger",
      "module": "compareblocks.processing.dynamic_reprocessor",
      "file_path": "src\\compareblocks\\processing\\dynamic_reprocessor.py",
      "class": "DynamicReprocessor",
      "line_number": 283,
      "docstring": "Create a reprocessing trigger.",
      "parameters": [
        "self",
        "trigger_type",
        "trigger_data",
        "requires_full_rebuild"
      ]
    },
    {
      "function_name": "DynamicReprocessor.rebuild_all_comparisons",
      "module": "compareblocks.processing.dynamic_reprocessor",
      "file_path": "src\\compareblocks\\processing\\dynamic_reprocessor.py",
      "class": "DynamicReprocessor",
      "line_number": 299,
      "docstring": "Rebuild all comparisons from scratch.\n        \n        Args:\n            pdf_path: Path to PDF file\n            storage_mode: How to store the results\n            description: Description of the rebuild\n            \n        Returns:\n            ProcessingVersion with results",
      "parameters": [
        "self",
        "pdf_path",
        "storage_mode",
        "description"
      ]
    },
    {
      "function_name": "DynamicReprocessor.incremental_processing",
      "module": "compareblocks.processing.dynamic_reprocessor",
      "file_path": "src\\compareblocks\\processing\\dynamic_reprocessor.py",
      "class": "DynamicReprocessor",
      "line_number": 379,
      "docstring": "Process only new associated files incrementally.\n        \n        Args:\n            pdf_path: Path to PDF file\n            new_files: List of new files to process\n            base_version_id: Base version to build upon\n            \n        Returns:\n            IncrementalUpdate with results",
      "parameters": [
        "self",
        "pdf_path",
        "new_files",
        "base_version_id"
      ]
    },
    {
      "function_name": "DynamicReprocessor.update_consistency_percentages",
      "module": "compareblocks.processing.dynamic_reprocessor",
      "file_path": "src\\compareblocks\\processing\\dynamic_reprocessor.py",
      "class": "DynamicReprocessor",
      "line_number": 444,
      "docstring": "Update consistency percentages without full reprocessing.\n        \n        Args:\n            pdf_path: Path to PDF file\n            \n        Returns:\n            Updated consistency statistics",
      "parameters": [
        "self",
        "pdf_path"
      ]
    },
    {
      "function_name": "DynamicReprocessor.get_processing_history",
      "module": "compareblocks.processing.dynamic_reprocessor",
      "file_path": "src\\compareblocks\\processing\\dynamic_reprocessor.py",
      "class": "DynamicReprocessor",
      "line_number": 589,
      "docstring": "Get processing history for a PDF.",
      "parameters": [
        "self",
        "pdf_path"
      ]
    },
    {
      "function_name": "DynamicReprocessor.cleanup_old_versions",
      "module": "compareblocks.processing.dynamic_reprocessor",
      "file_path": "src\\compareblocks\\processing\\dynamic_reprocessor.py",
      "class": "DynamicReprocessor",
      "line_number": 594,
      "docstring": "Clean up old processing versions, keeping only the most recent.",
      "parameters": [
        "self",
        "pdf_path",
        "keep_count"
      ]
    },
    {
      "function_name": "create_project_structure",
      "module": "compareblocks.project.manager",
      "file_path": "src\\compareblocks\\project\\manager.py",
      "class": null,
      "line_number": 361,
      "docstring": "Convenience function to create project structure.",
      "parameters": [
        "pdf_path"
      ]
    },
    {
      "function_name": "validate_project_structure",
      "module": "compareblocks.project.manager",
      "file_path": "src\\compareblocks\\project\\manager.py",
      "class": null,
      "line_number": 367,
      "docstring": "Convenience function to validate project structure.",
      "parameters": [
        "pdf_path"
      ]
    },
    {
      "function_name": "get_project_summary",
      "module": "compareblocks.project.manager",
      "file_path": "src\\compareblocks\\project\\manager.py",
      "class": null,
      "line_number": 373,
      "docstring": "Convenience function to get project summary.",
      "parameters": [
        "pdf_path"
      ]
    },
    {
      "function_name": "ProjectManager.create_project_structure",
      "module": "compareblocks.project.manager",
      "file_path": "src\\compareblocks\\project\\manager.py",
      "class": "ProjectManager",
      "line_number": 52,
      "docstring": "Create comprehensive project structure for a PDF.",
      "parameters": [
        "self",
        "pdf_path"
      ]
    },
    {
      "function_name": "ProjectManager.get_file_status",
      "module": "compareblocks.project.manager",
      "file_path": "src\\compareblocks\\project\\manager.py",
      "class": "ProjectManager",
      "line_number": 117,
      "docstring": "Get comprehensive status for a file.",
      "parameters": [
        "self",
        "file_path"
      ]
    },
    {
      "function_name": "ProjectManager.validate_project_structure",
      "module": "compareblocks.project.manager",
      "file_path": "src\\compareblocks\\project\\manager.py",
      "class": "ProjectManager",
      "line_number": 169,
      "docstring": "Validate project structure and return detailed report.",
      "parameters": [
        "self",
        "pdf_path"
      ]
    },
    {
      "function_name": "ProjectManager.get_project_structure",
      "module": "compareblocks.project.manager",
      "file_path": "src\\compareblocks\\project\\manager.py",
      "class": "ProjectManager",
      "line_number": 202,
      "docstring": "Get project structure, creating if necessary.",
      "parameters": [
        "self",
        "pdf_path"
      ]
    },
    {
      "function_name": "ProjectManager.find_moved_files",
      "module": "compareblocks.project.manager",
      "file_path": "src\\compareblocks\\project\\manager.py",
      "class": "ProjectManager",
      "line_number": 215,
      "docstring": "Find files that may have been moved by searching for similar names.",
      "parameters": [
        "self",
        "pdf_path"
      ]
    },
    {
      "function_name": "ProjectManager.relocate_file",
      "module": "compareblocks.project.manager",
      "file_path": "src\\compareblocks\\project\\manager.py",
      "class": "ProjectManager",
      "line_number": 247,
      "docstring": "Relocate a file in the project structure.",
      "parameters": [
        "self",
        "old_path",
        "new_path",
        "pdf_path"
      ]
    },
    {
      "function_name": "ProjectManager.get_reprocessing_files",
      "module": "compareblocks.project.manager",
      "file_path": "src\\compareblocks\\project\\manager.py",
      "class": "ProjectManager",
      "line_number": 279,
      "docstring": "Get all files that should be considered for reprocessing.",
      "parameters": [
        "self",
        "pdf_path"
      ]
    },
    {
      "function_name": "ProjectManager.create_project_manifest",
      "module": "compareblocks.project.manager",
      "file_path": "src\\compareblocks\\project\\manager.py",
      "class": "ProjectManager",
      "line_number": 292,
      "docstring": "Create a comprehensive project manifest.",
      "parameters": [
        "self",
        "pdf_path"
      ]
    },
    {
      "function_name": "ProjectManager.save_project_manifest",
      "module": "compareblocks.project.manager",
      "file_path": "src\\compareblocks\\project\\manager.py",
      "class": "ProjectManager",
      "line_number": 324,
      "docstring": "Save project manifest to file.",
      "parameters": [
        "self",
        "pdf_path",
        "output_path"
      ]
    },
    {
      "function_name": "ProjectManager.clear_cache",
      "module": "compareblocks.project.manager",
      "file_path": "src\\compareblocks\\project\\manager.py",
      "class": "ProjectManager",
      "line_number": 338,
      "docstring": "Clear all cached data.",
      "parameters": [
        "self"
      ]
    },
    {
      "function_name": "ProjectManager.get_project_summary",
      "module": "compareblocks.project.manager",
      "file_path": "src\\compareblocks\\project\\manager.py",
      "class": "ProjectManager",
      "line_number": 343,
      "docstring": "Get a summary of the project status.",
      "parameters": [
        "self",
        "pdf_path"
      ]
    },
    {
      "function_name": "InputFeedManager.add_callback",
      "module": "visual_ocr_testing_tool",
      "file_path": "visual_ocr_testing_tool.py",
      "class": "InputFeedManager",
      "line_number": 135,
      "docstring": "Add callback for feed updates.",
      "parameters": [
        "self",
        "callback"
      ]
    },
    {
      "function_name": "TestResultDatabase.save_feed_data",
      "module": "visual_ocr_testing_tool",
      "file_path": "visual_ocr_testing_tool.py",
      "class": "TestResultDatabase",
      "line_number": 479,
      "docstring": "Save feed data to the database.",
      "parameters": [
        "self",
        "feed_name",
        "feed_type",
        "data"
      ]
    },
    {
      "function_name": "OCROptimizationEngine.start_feeds",
      "module": "visual_ocr_testing_tool",
      "file_path": "visual_ocr_testing_tool.py",
      "class": "OCROptimizationEngine",
      "line_number": 715,
      "docstring": "Start all input feeds.",
      "parameters": [
        "self"
      ]
    },
    {
      "function_name": "OCROptimizationEngine.stop_feeds",
      "module": "visual_ocr_testing_tool",
      "file_path": "visual_ocr_testing_tool.py",
      "class": "OCROptimizationEngine",
      "line_number": 719,
      "docstring": "Stop all input feeds.",
      "parameters": [
        "self"
      ]
    },
    {
      "function_name": "OCROptimizationEngine.get_feed_status",
      "module": "visual_ocr_testing_tool",
      "file_path": "visual_ocr_testing_tool.py",
      "class": "OCROptimizationEngine",
      "line_number": 723,
      "docstring": "Get status of all input feeds.",
      "parameters": [
        "self"
      ]
    },
    {
      "function_name": "OCROptimizationEngine.add_custom_feed",
      "module": "visual_ocr_testing_tool",
      "file_path": "visual_ocr_testing_tool.py",
      "class": "OCROptimizationEngine",
      "line_number": 736,
      "docstring": "Add a custom input feed.",
      "parameters": [
        "self",
        "config"
      ]
    },
    {
      "function_name": "OCROptimizationEngine.load_configuration_from_feed",
      "module": "visual_ocr_testing_tool",
      "file_path": "visual_ocr_testing_tool.py",
      "class": "OCROptimizationEngine",
      "line_number": 740,
      "docstring": "Load configuration from a specific feed.",
      "parameters": [
        "self",
        "feed_name"
      ]
    },
    {
      "function_name": "VisualOCRTestingWidget.setup_ui",
      "module": "visual_ocr_testing_tool",
      "file_path": "visual_ocr_testing_tool.py",
      "class": "VisualOCRTestingWidget",
      "line_number": 938,
      "docstring": "Setup the visual testing UI with input feeds.",
      "parameters": [
        "self"
      ]
    },
    {
      "function_name": "VisualOCRTestingWidget.create_feeds_tab",
      "module": "visual_ocr_testing_tool",
      "file_path": "visual_ocr_testing_tool.py",
      "class": "VisualOCRTestingWidget",
      "line_number": 971,
      "docstring": "Create input feeds monitoring tab.",
      "parameters": [
        "self"
      ]
    },
    {
      "function_name": "VisualOCRTestingWidget.create_configuration_tab",
      "module": "visual_ocr_testing_tool",
      "file_path": "visual_ocr_testing_tool.py",
      "class": "VisualOCRTestingWidget",
      "line_number": 1010,
      "docstring": "Create configuration management tab.",
      "parameters": [
        "self"
      ]
    },
    {
      "function_name": "VisualOCRTestingWidget.create_history_tab",
      "module": "visual_ocr_testing_tool",
      "file_path": "visual_ocr_testing_tool.py",
      "class": "VisualOCRTestingWidget",
      "line_number": 1059,
      "docstring": "Create test results history tab.",
      "parameters": [
        "self"
      ]
    },
    {
      "function_name": "VisualOCRTestingWidget.update_feed_status",
      "module": "visual_ocr_testing_tool",
      "file_path": "visual_ocr_testing_tool.py",
      "class": "VisualOCRTestingWidget",
      "line_number": 1109,
      "docstring": "Update the feed status display.",
      "parameters": [
        "self"
      ]
    },
    {
      "function_name": "VisualOCRTestingWidget.refresh_feeds",
      "module": "visual_ocr_testing_tool",
      "file_path": "visual_ocr_testing_tool.py",
      "class": "VisualOCRTestingWidget",
      "line_number": 1135,
      "docstring": "Refresh all input feeds.",
      "parameters": [
        "self"
      ]
    },
    {
      "function_name": "VisualOCRTestingWidget.add_custom_feed",
      "module": "visual_ocr_testing_tool",
      "file_path": "visual_ocr_testing_tool.py",
      "class": "VisualOCRTestingWidget",
      "line_number": 1151,
      "docstring": "Add a custom input feed with enhanced source selection.",
      "parameters": [
        "self"
      ]
    },
    {
      "function_name": "VisualOCRTestingWidget.browse_feed_source",
      "module": "visual_ocr_testing_tool",
      "file_path": "visual_ocr_testing_tool.py",
      "class": "VisualOCRTestingWidget",
      "line_number": 1225,
      "docstring": "Browse for feed source based on type.",
      "parameters": [
        "self",
        "feed_type",
        "source_edit"
      ]
    },
    {
      "function_name": "VisualOCRTestingWidget.browse_source_docs_for_feed",
      "module": "visual_ocr_testing_tool",
      "file_path": "visual_ocr_testing_tool.py",
      "class": "VisualOCRTestingWidget",
      "line_number": 1244,
      "docstring": "Browse Source_docs directory for feed source.",
      "parameters": [
        "self",
        "source_edit"
      ]
    },
    {
      "function_name": "VisualOCRTestingWidget.update_source_options",
      "module": "visual_ocr_testing_tool",
      "file_path": "visual_ocr_testing_tool.py",
      "class": "VisualOCRTestingWidget",
      "line_number": 1258,
      "docstring": "Update source options based on feed type.",
      "parameters": [
        "self",
        "type_combo",
        "source_layout"
      ]
    },
    {
      "function_name": "VisualOCRTestingWidget.discover_and_enable_feeds",
      "module": "visual_ocr_testing_tool",
      "file_path": "visual_ocr_testing_tool.py",
      "class": "VisualOCRTestingWidget",
      "line_number": 1263,
      "docstring": "Discover and enable Source_docs feeds through GUI selection.",
      "parameters": [
        "self"
      ]
    },
    {
      "function_name": "VisualOCRTestingWidget.load_configuration",
      "module": "visual_ocr_testing_tool",
      "file_path": "visual_ocr_testing_tool.py",
      "class": "VisualOCRTestingWidget",
      "line_number": 1356,
      "docstring": "Load configuration from selected source.",
      "parameters": [
        "self"
      ]
    },
    {
      "function_name": "VisualOCRTestingWidget.save_configuration",
      "module": "visual_ocr_testing_tool",
      "file_path": "visual_ocr_testing_tool.py",
      "class": "VisualOCRTestingWidget",
      "line_number": 1388,
      "docstring": "Save current configuration.",
      "parameters": [
        "self"
      ]
    },
    {
      "function_name": "VisualOCRTestingWidget.apply_configuration",
      "module": "visual_ocr_testing_tool",
      "file_path": "visual_ocr_testing_tool.py",
      "class": "VisualOCRTestingWidget",
      "line_number": 1403,
      "docstring": "Apply current configuration to the testing engine.",
      "parameters": [
        "self"
      ]
    },
    {
      "function_name": "VisualOCRTestingWidget.load_test_history",
      "module": "visual_ocr_testing_tool",
      "file_path": "visual_ocr_testing_tool.py",
      "class": "VisualOCRTestingWidget",
      "line_number": 1426,
      "docstring": "Load test results history.",
      "parameters": [
        "self"
      ]
    },
    {
      "function_name": "VisualOCRTestingWidget.browse_json_files",
      "module": "visual_ocr_testing_tool",
      "file_path": "visual_ocr_testing_tool.py",
      "class": "VisualOCRTestingWidget",
      "line_number": 1463,
      "docstring": "Browse and select JSON files with enhanced filtering.",
      "parameters": [
        "self"
      ]
    },
    {
      "function_name": "VisualOCRTestingWidget.browse_source_docs_json",
      "module": "visual_ocr_testing_tool",
      "file_path": "visual_ocr_testing_tool.py",
      "class": "VisualOCRTestingWidget",
      "line_number": 1475,
      "docstring": "Browse JSON files specifically in Source_docs directory with recursive selection.",
      "parameters": [
        "self"
      ]
    },
    {
      "function_name": "VisualOCRTestingWidget.populate_json_tree",
      "module": "visual_ocr_testing_tool",
      "file_path": "visual_ocr_testing_tool.py",
      "class": "VisualOCRTestingWidget",
      "line_number": 1538,
      "docstring": "Populate the JSON tree with files from Source_docs directory.",
      "parameters": [
        "self"
      ]
    },
    {
      "function_name": "VisualOCRTestingWidget.preview_json_file",
      "module": "visual_ocr_testing_tool",
      "file_path": "visual_ocr_testing_tool.py",
      "class": "VisualOCRTestingWidget",
      "line_number": 1609,
      "docstring": "Preview selected JSON file content.",
      "parameters": [
        "self",
        "item",
        "column"
      ]
    },
    {
      "function_name": "VisualOCRTestingWidget.load_json_file",
      "module": "visual_ocr_testing_tool",
      "file_path": "visual_ocr_testing_tool.py",
      "class": "VisualOCRTestingWidget",
      "line_number": 1664,
      "docstring": "Load and display JSON file content in the configuration editor with comprehensive validation.",
      "parameters": [
        "self",
        "file_path"
      ]
    },
    {
      "function_name": "VisualOCRTestingWidget.closeEvent",
      "module": "visual_ocr_testing_tool",
      "file_path": "visual_ocr_testing_tool.py",
      "class": "VisualOCRTestingWidget",
      "line_number": 1906,
      "docstring": "Handle widget close event.",
      "parameters": [
        "self",
        "event"
      ]
    },
    {
      "function_name": "VisualOCRTestingWidget.create_optimization_tab",
      "module": "visual_ocr_testing_tool",
      "file_path": "visual_ocr_testing_tool.py",
      "class": "VisualOCRTestingWidget",
      "line_number": 1911,
      "docstring": "Create OCR optimization testing tab.",
      "parameters": [
        "self"
      ]
    },
    {
      "function_name": "VisualOCRTestingWidget.create_engine_testing_tab",
      "module": "visual_ocr_testing_tool",
      "file_path": "visual_ocr_testing_tool.py",
      "class": "VisualOCRTestingWidget",
      "line_number": 1947,
      "docstring": "Create engine testing tab.",
      "parameters": [
        "self"
      ]
    },
    {
      "function_name": "VisualOCRTestingWidget.create_debug_images_tab",
      "module": "visual_ocr_testing_tool",
      "file_path": "visual_ocr_testing_tool.py",
      "class": "VisualOCRTestingWidget",
      "line_number": 1976,
      "docstring": "Create debug images tab.",
      "parameters": [
        "self"
      ]
    },
    {
      "function_name": "VisualOCRTestingWidget.run_ocr_optimization",
      "module": "visual_ocr_testing_tool",
      "file_path": "visual_ocr_testing_tool.py",
      "class": "VisualOCRTestingWidget",
      "line_number": 2016,
      "docstring": "Run OCR parameter optimization.",
      "parameters": [
        "self"
      ]
    },
    {
      "function_name": "VisualOCRTestingWidget.test_improved_engine",
      "module": "visual_ocr_testing_tool",
      "file_path": "visual_ocr_testing_tool.py",
      "class": "VisualOCRTestingWidget",
      "line_number": 2064,
      "docstring": "Test the improved OCR engine.",
      "parameters": [
        "self"
      ]
    },
    {
      "function_name": "VisualOCRTestingWidget.extract_debug_images",
      "module": "visual_ocr_testing_tool",
      "file_path": "visual_ocr_testing_tool.py",
      "class": "VisualOCRTestingWidget",
      "line_number": 2125,
      "docstring": "Extract debug images.",
      "parameters": [
        "self"
      ]
    },
    {
      "function_name": "VisualOCRTestingWidget.open_debug_report",
      "module": "visual_ocr_testing_tool",
      "file_path": "visual_ocr_testing_tool.py",
      "class": "VisualOCRTestingWidget",
      "line_number": 2164,
      "docstring": "Open the HTML debug report.",
      "parameters": [
        "self"
      ]
    }
  ],
  "all_files": [
    {
      "file_path": "analyze_missing_files_and_functions.py",
      "module_name": "analyze_missing_files_and_functions",
      "relative_path": "analyze_missing_files_and_functions.py",
      "functions": [
        {
          "name": "analyze_python_file",
          "line_number": 76,
          "docstring": "Analyze a Python file and extract all functions and classes.",
          "parameters": [
            "file_path"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "find_all_python_files",
          "line_number": 122,
          "docstring": "Find all Python files in the project, excluding test files and __pycache__.",
          "parameters": [],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "load_function_catalog",
          "line_number": 151,
          "docstring": "Load existing function catalog.",
          "parameters": [],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "get_files_in_index",
          "line_number": 172,
          "docstring": "Get files mentioned in file_index_readme.md.",
          "parameters": [],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "should_be_in_index",
          "line_number": 199,
          "docstring": "Determine if a file should be in the file index.",
          "parameters": [
            "file_info"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "generate_function_name",
          "line_number": 219,
          "docstring": "Generate function name in catalog format.",
          "parameters": [
            "func_info",
            "class_name",
            "module_path"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "analyze_project",
          "line_number": 226,
          "docstring": "Analyze the entire project for missing files and functions.",
          "parameters": [],
          "is_private": false,
          "is_main": false
        }
      ],
      "classes": [
        {
          "name": "FunctionExtractor",
          "line_number": 18,
          "docstring": "Extract all functions and classes from Python files.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 21,
              "docstring": "",
              "parameters": [
                "self",
                "module_path"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "visit_ClassDef",
              "line_number": 27,
              "docstring": "Visit class definitions.",
              "parameters": [
                "self",
                "node"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "visit_FunctionDef",
              "line_number": 55,
              "docstring": "Visit function definitions.",
              "parameters": [
                "self",
                "node"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "_get_docstring",
              "line_number": 68,
              "docstring": "Extract docstring from a node.",
              "parameters": [
                "self",
                "node"
              ],
              "is_private": true,
              "is_dunder": false
            }
          ]
        }
      ],
      "total_functions": 7,
      "total_classes": 1,
      "has_main": false,
      "error": null
    },
    {
      "file_path": "analyze_missing_functions.py",
      "module_name": "analyze_missing_functions",
      "relative_path": "analyze_missing_functions.py",
      "functions": [],
      "classes": [],
      "total_functions": 0,
      "total_classes": 0,
      "has_main": false,
      "error": null
    },
    {
      "file_path": "build_test_catalog.py",
      "module_name": "build_test_catalog",
      "relative_path": "build_test_catalog.py",
      "functions": [
        {
          "name": "analyze_test_file",
          "line_number": 116,
          "docstring": "Analyze a test file and extract test function information.",
          "parameters": [
            "file_path"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "load_function_catalog",
          "line_number": 151,
          "docstring": "Load the function catalog and create a lookup by function name.",
          "parameters": [
            "catalog_path"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "find_test_files",
          "line_number": 171,
          "docstring": "Find all test files in the project.",
          "parameters": [],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "create_test_catalog_entry",
          "line_number": 192,
          "docstring": "Create a test catalog entry.",
          "parameters": [
            "test_info",
            "test_file_info",
            "function_catalog"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "build_test_catalog",
          "line_number": 242,
          "docstring": "Build the complete test catalog.",
          "parameters": [],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "generate_cross_reference_report",
          "line_number": 293,
          "docstring": "Generate a cross-reference report between functions and tests.",
          "parameters": [
            "test_entries",
            "function_catalog"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "update_function_catalog_with_tests",
          "line_number": 327,
          "docstring": "Update function catalog entries to include their corresponding test names.",
          "parameters": [
            "test_entries"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "main",
          "line_number": 382,
          "docstring": "Main function to build test catalog and update function catalog.",
          "parameters": [],
          "is_private": false,
          "is_main": true
        }
      ],
      "classes": [
        {
          "name": "TestFunctionAnalyzer",
          "line_number": 16,
          "docstring": "AST visitor to extract test function information.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 19,
              "docstring": "",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "visit_Import",
              "line_number": 24,
              "docstring": "Visit import statements.",
              "parameters": [
                "self",
                "node"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "visit_ImportFrom",
              "line_number": 29,
              "docstring": "Visit from...import statements.",
              "parameters": [
                "self",
                "node"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "visit_ClassDef",
              "line_number": 35,
              "docstring": "Visit class definitions.",
              "parameters": [
                "self",
                "node"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "visit_FunctionDef",
              "line_number": 42,
              "docstring": "Visit function definitions.",
              "parameters": [
                "self",
                "node"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "_infer_tested_function",
              "line_number": 69,
              "docstring": "Infer what function this test is testing.",
              "parameters": [
                "self",
                "test_name",
                "docstring"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_determine_test_type",
              "line_number": 92,
              "docstring": "Determine the type of test.",
              "parameters": [
                "self",
                "test_name",
                "docstring"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_get_decorator_name",
              "line_number": 105,
              "docstring": "Get decorator name.",
              "parameters": [
                "self",
                "decorator"
              ],
              "is_private": true,
              "is_dunder": false
            }
          ]
        }
      ],
      "total_functions": 8,
      "total_classes": 1,
      "has_main": true,
      "error": null
    },
    {
      "file_path": "conftest_unit_fix.py",
      "module_name": "conftest_unit_fix",
      "relative_path": "conftest_unit_fix.py",
      "functions": [],
      "classes": [],
      "total_functions": 0,
      "total_classes": 0,
      "has_main": false,
      "error": null
    },
    {
      "file_path": "extract_block_images.py",
      "module_name": "extract_block_images",
      "relative_path": "extract_block_images.py",
      "functions": [],
      "classes": [],
      "total_functions": 0,
      "total_classes": 0,
      "has_main": false,
      "error": null
    },
    {
      "file_path": "functions\\__init__.py",
      "module_name": "__init__",
      "relative_path": "functions\\__init__.py",
      "functions": [],
      "classes": [],
      "total_functions": 0,
      "total_classes": 0,
      "has_main": false,
      "error": null
    },
    {
      "file_path": "functions\\analyze_project_test_coverage.py",
      "module_name": "analyze_project_test_coverage",
      "relative_path": "functions\\analyze_project_test_coverage.py",
      "functions": [
        {
          "name": "analyze_python_file",
          "line_number": 61,
          "docstring": "Analyze a Python file for functions and classes.",
          "parameters": [
            "file_path"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "find_test_files",
          "line_number": 86,
          "docstring": "Find all test files in the project.",
          "parameters": [],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "find_source_files",
          "line_number": 98,
          "docstring": "Find all Python source files in the project.",
          "parameters": [],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "determine_test_status",
          "line_number": 121,
          "docstring": "Determine if a source file has corresponding tests.",
          "parameters": [
            "file_path",
            "test_files"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "analyze_project_coverage",
          "line_number": 154,
          "docstring": "Analyze the entire project for function coverage.",
          "parameters": [],
          "is_private": false,
          "is_main": false
        }
      ],
      "classes": [
        {
          "name": "FunctionAnalyzer",
          "line_number": 15,
          "docstring": "AST visitor to extract function and class information.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 18,
              "docstring": "",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "visit_ClassDef",
              "line_number": 23,
              "docstring": "Visit class definitions.",
              "parameters": [
                "self",
                "node"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "visit_FunctionDef",
              "line_number": 35,
              "docstring": "Visit function definitions.",
              "parameters": [
                "self",
                "node"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "visit_AsyncFunctionDef",
              "line_number": 57,
              "docstring": "Visit async function definitions.",
              "parameters": [
                "self",
                "node"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        }
      ],
      "total_functions": 5,
      "total_classes": 1,
      "has_main": false,
      "error": null
    },
    {
      "file_path": "functions\\detect_missing_functions.py",
      "module_name": "detect_missing_functions",
      "relative_path": "functions\\detect_missing_functions.py",
      "functions": [
        {
          "name": "main",
          "line_number": 253,
          "docstring": "Main function to detect and optionally append missing functions.",
          "parameters": [],
          "is_private": false,
          "is_main": true
        }
      ],
      "classes": [
        {
          "name": "FunctionDiscovery",
          "line_number": 20,
          "docstring": "Automated function discovery system.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 23,
              "docstring": "Initialize function discovery.",
              "parameters": [
                "self",
                "src_root"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "load_existing_catalog",
              "line_number": 33,
              "docstring": "Load existing function catalog and return set of function names.",
              "parameters": [
                "self",
                "catalog_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "discover_functions_from_ast",
              "line_number": 50,
              "docstring": "Discover functions from a Python file using AST parsing.",
              "parameters": [
                "self",
                "file_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "_extract_function_info",
              "line_number": 92,
              "docstring": "Extract function information from AST node.",
              "parameters": [
                "self",
                "node",
                "module_path",
                "file_path",
                "class_name"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_determine_test_file",
              "line_number": 146,
              "docstring": "Determine the appropriate test file for a source file.",
              "parameters": [
                "self",
                "source_file",
                "module_path"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "discover_all_functions",
              "line_number": 167,
              "docstring": "Discover all functions in the source directory.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "find_missing_functions",
              "line_number": 182,
              "docstring": "Find functions that exist in code but are missing from catalog.",
              "parameters": [
                "self",
                "catalog_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "append_missing_functions",
              "line_number": 198,
              "docstring": "Append missing functions to the catalog.",
              "parameters": [
                "self",
                "catalog_path",
                "missing_functions"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "generate_missing_functions_report",
              "line_number": 213,
              "docstring": "Generate a report of missing functions.",
              "parameters": [
                "self",
                "missing_functions"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "_get_timestamp",
              "line_number": 247,
              "docstring": "Get current timestamp.",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": false
            }
          ]
        }
      ],
      "total_functions": 1,
      "total_classes": 1,
      "has_main": true,
      "error": null
    },
    {
      "file_path": "functions\\enhance_catalog_fields.py",
      "module_name": "enhance_catalog_fields",
      "relative_path": "functions\\enhance_catalog_fields.py",
      "functions": [
        {
          "name": "main",
          "line_number": 374,
          "docstring": "Main execution function.",
          "parameters": [],
          "is_private": false,
          "is_main": true
        }
      ],
      "classes": [
        {
          "name": "CatalogFieldEnhancer",
          "line_number": 13,
          "docstring": "Enhanced field attributes processor for function catalog.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 16,
              "docstring": "",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "analyze_function_signature",
              "line_number": 20,
              "docstring": "Analyze function signature to extract parameter information.",
              "parameters": [
                "self",
                "func_entry"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "_infer_constraint_from_type",
              "line_number": 55,
              "docstring": "Infer constraints based on type hints.",
              "parameters": [
                "self",
                "type_hint"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "infer_dependencies",
              "line_number": 76,
              "docstring": "Infer dependencies based on function characteristics.",
              "parameters": [
                "self",
                "func_entry"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "infer_side_effects",
              "line_number": 126,
              "docstring": "Infer side effects based on function characteristics.",
              "parameters": [
                "self",
                "func_entry"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "enhance_return_value_attributes",
              "line_number": 163,
              "docstring": "Enhance return value attributes based on return type and function purpose.",
              "parameters": [
                "self",
                "func_entry"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "_infer_return_constraint",
              "line_number": 201,
              "docstring": "Infer return value constraints.",
              "parameters": [
                "self",
                "return_type",
                "func_name"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_infer_return_description",
              "line_number": 220,
              "docstring": "Infer return value description.",
              "parameters": [
                "self",
                "return_type",
                "func_name"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "add_performance_attributes",
              "line_number": 237,
              "docstring": "Add performance-related attributes.",
              "parameters": [
                "self",
                "func_entry"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "needs_enhancement",
              "line_number": 274,
              "docstring": "Check if function entry needs field enhancement.",
              "parameters": [
                "self",
                "func_entry"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "enhance_function_entry",
              "line_number": 297,
              "docstring": "Enhance a single function entry with comprehensive field attributes.",
              "parameters": [
                "self",
                "func_entry"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "process_catalog",
              "line_number": 340,
              "docstring": "Process the entire function catalog.",
              "parameters": [
                "self",
                "catalog_path"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        }
      ],
      "total_functions": 1,
      "total_classes": 1,
      "has_main": true,
      "error": null
    },
    {
      "file_path": "functions\\reconstruct_catalog.py",
      "module_name": "reconstruct_catalog",
      "relative_path": "functions\\reconstruct_catalog.py",
      "functions": [],
      "classes": [],
      "total_functions": 0,
      "total_classes": 0,
      "has_main": false,
      "error": null
    },
    {
      "file_path": "functions\\run_mcp_tests.py",
      "module_name": "run_mcp_tests",
      "relative_path": "functions\\run_mcp_tests.py",
      "functions": [
        {
          "name": "run_mcp_tests",
          "line_number": 12,
          "docstring": "Run all MCP tests with coverage.",
          "parameters": [],
          "is_private": false,
          "is_main": false
        }
      ],
      "classes": [],
      "total_functions": 1,
      "total_classes": 0,
      "has_main": false,
      "error": null
    },
    {
      "file_path": "functions\\validate_catalog.py",
      "module_name": "validate_catalog",
      "relative_path": "functions\\validate_catalog.py",
      "functions": [
        {
          "name": "validate_function_entry",
          "line_number": 11,
          "docstring": "Validate a single function catalog entry.",
          "parameters": [
            "entry",
            "line_num"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "validate_catalog",
          "line_number": 64,
          "docstring": "Validate the entire function catalog.",
          "parameters": [
            "catalog_path"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "main",
          "line_number": 124,
          "docstring": "Main validation function.",
          "parameters": [],
          "is_private": false,
          "is_main": true
        }
      ],
      "classes": [],
      "total_functions": 3,
      "total_classes": 0,
      "has_main": true,
      "error": null
    },
    {
      "file_path": "functions\\visual_ocr_testing_functions.py",
      "module_name": "visual_ocr_testing_functions",
      "relative_path": "functions\\visual_ocr_testing_functions.py",
      "functions": [
        {
          "name": "validate_json_format",
          "line_number": 110,
          "docstring": "Validate JSON format and return validation result with examples.\n    \n    Args:\n        data: Parsed JSON data to validate\n        \n    Returns:\n        Dictionary with validation results:\n        - valid: Boolean indicating if format is valid\n        - type: Detected JSON type\n        - error: Error message if invalid\n        - example: Example of correct format if invalid\n    \n    Example:\n        # Valid GBG analysis JSON\n        gbg_data = {\n            \"pages\": {\"0\": {\"blocks\": []}},\n            \"summary\": {\"total_pages\": 1}\n        }\n        result = validate_json_format(gbg_data)\n        # Returns: {\"valid\": True, \"type\": \"gbg_analysis\"}\n        \n        # Invalid JSON missing required fields\n        invalid_data = {\"random\": \"data\"}\n        result = validate_json_format(invalid_data)\n        # Returns: {\"valid\": True, \"type\": \"configuration\"}",
          "parameters": [
            "data"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "validate_gbg_json_format",
          "line_number": 164,
          "docstring": "Validate GBG analysis JSON format with detailed examples.\n    \n    Args:\n        data: Dictionary containing GBG analysis data\n        \n    Returns:\n        Dictionary with validation results and examples if invalid\n    \n    Example:\n        # Valid GBG data\n        gbg_data = {\n            \"pdf_name\": \"document.pdf\",\n            \"summary\": {\"total_pages\": 10, \"total_blocks\": 100},\n            \"pages\": {\n                \"0\": {\n                    \"blocks\": [\n                        {\n                            \"block_id\": \"blk_123\",\n                            \"text_content\": \"Sample text\",\n                            \"bbox\": {\"x\": 0, \"y\": 0, \"width\": 100, \"height\": 20}\n                        }\n                    ]\n                }\n            }\n        }\n        result = validate_gbg_json_format(gbg_data)\n        # Returns: {\"valid\": True, \"type\": \"gbg_analysis\"}",
          "parameters": [
            "data"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "validate_consensus_json_format",
          "line_number": 257,
          "docstring": "Validate consensus decisions JSON format with detailed examples.\n    \n    Args:\n        data: List of consensus decision dictionaries\n        \n    Returns:\n        Dictionary with validation results and examples if invalid\n    \n    Example:\n        # Valid consensus data\n        consensus_data = [\n            {\n                \"doc_id\": \"document.pdf\",\n                \"page\": 1,\n                \"block_id\": \"blk_123\",\n                \"selected_engine\": \"tesseract\",\n                \"final_text\": \"Sample text\",\n                \"decision_reason\": \"highest_score\",\n                \"engine_scores\": {\"tesseract\": 0.95},\n                \"anomaly_score\": 0.05,\n                \"bbox\": [0, 0, 100, 20]\n            }\n        ]\n        result = validate_consensus_json_format(consensus_data)\n        # Returns: {\"valid\": True, \"type\": \"consensus_decisions\"}",
          "parameters": [
            "data"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "discover_source_docs_json_files",
          "line_number": 325,
          "docstring": "Discover JSON files in Source_docs directory recursively.\n    \n    Args:\n        source_docs_path: Path to Source_docs directory\n        \n    Returns:\n        List of dictionaries containing file information:\n        - path: Full path to the file\n        - relative_path: Path relative to Source_docs\n        - size: File size in bytes\n        - modified: Last modification datetime\n        - type: Detected file type based on name patterns\n    \n    Example:\n        files = discover_source_docs_json_files()\n        for file_info in files:\n            print(f\"Found: {file_info['relative_path']} ({file_info['type']})\")",
          "parameters": [
            "source_docs_path"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "create_input_feed_config",
          "line_number": 406,
          "docstring": "Create an InputFeedConfig from a file path with automatic type detection.\n    \n    Args:\n        name: Name for the feed\n        file_path: Path to the file or directory\n        feed_type: Override automatic type detection\n        \n    Returns:\n        InputFeedConfig object ready for use\n    \n    Example:\n        # Auto-detect JSON feed\n        config = create_input_feed_config(\n            \"gbg_analysis\",\n            \"Source_docs/English Language Arts Standards/Processing_Inprogress/gbg_full_analysis.json\"\n        )\n        \n        # Override type detection\n        config = create_input_feed_config(\n            \"custom_api\",\n            \"http://api.example.com/data\",\n            feed_type=\"api\"\n        )",
          "parameters": [
            "name",
            "file_path",
            "feed_type"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "load_and_validate_json_file",
          "line_number": 489,
          "docstring": "Load and validate a JSON file with comprehensive error handling.\n    \n    Args:\n        file_path: Path to the JSON file\n        \n    Returns:\n        Dictionary with loading results:\n        - success: Boolean indicating if loading was successful\n        - data: Parsed JSON data if successful\n        - error: Error message if unsuccessful\n        - validation: Validation results\n        - file_info: File metadata\n    \n    Example:\n        result = load_and_validate_json_file(\"config.json\")\n        if result[\"success\"]:\n            data = result[\"data\"]\n            print(f\"Loaded {result['validation']['type']} with {len(data)} items\")\n        else:\n            print(f\"Error: {result['error']}\")",
          "parameters": [
            "file_path"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "create_test_result_database",
          "line_number": 566,
          "docstring": "Create and initialize a test results database.\n    \n    Args:\n        db_path: Path where the database should be created\n        \n    Returns:\n        Boolean indicating if database was created successfully\n    \n    Example:\n        success = create_test_result_database(\"test_results.db\")\n        if success:\n            print(\"Database created successfully\")",
          "parameters": [
            "db_path"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "save_test_result_to_database",
          "line_number": 634,
          "docstring": "Save a test result to the database.\n    \n    Args:\n        result: TestResult object to save\n        db_path: Path to the database\n        \n    Returns:\n        Boolean indicating if save was successful\n    \n    Example:\n        result = TestResult(\n            timestamp=datetime.now(),\n            source=\"optimization_test\",\n            test_type=\"parameter_testing\",\n            page_num=15,\n            block_index=0,\n            similarity=98.0,\n            confidence=0.95,\n            extracted_text=\"Test text\",\n            expected_text=\"Expected text\",\n            preprocessing=\"light\",\n            tesseract_config=\"--psm 6\",\n            success=True\n        )\n        \n        success = save_test_result_to_database(result)\n        if success:\n            print(\"Test result saved successfully\")",
          "parameters": [
            "result",
            "db_path"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "get_test_results_from_database",
          "line_number": 701,
          "docstring": "Retrieve test results from the database.\n    \n    Args:\n        db_path: Path to the database\n        limit: Maximum number of results to return\n        test_type: Filter by test type (optional)\n        \n    Returns:\n        List of TestResult objects\n    \n    Example:\n        # Get all recent results\n        results = get_test_results_from_database(limit=50)\n        \n        # Get only optimization results\n        opt_results = get_test_results_from_database(\n            test_type=\"ocr_optimization\",\n            limit=20\n        )\n        \n        for result in results:\n            print(f\"{result.timestamp}: {result.similarity}% similarity\")",
          "parameters": [
            "db_path",
            "limit",
            "test_type"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "example_usage",
          "line_number": 774,
          "docstring": "Example usage of the Visual OCR Testing Tool functions.\n    \n    This function demonstrates how to use the various functions\n    for JSON validation, feed management, and database operations.",
          "parameters": [],
          "is_private": false,
          "is_main": false
        }
      ],
      "classes": [
        {
          "name": "InputFeedConfig",
          "line_number": 28,
          "docstring": "Configuration for input feed sources.\n    \n    Attributes:\n        name: Unique name for the feed\n        type: Feed type ('mcp', 'json', 'api', 'file', 'database', 'code')\n        source: Source path or URL for the feed\n        enabled: Whether the feed is active\n        refresh_interval: Refresh interval in seconds\n        parameters: Additional parameters for the feed\n    \n    Example:\n        config = InputFeedConfig(\n            name=\"gbg_analysis\",\n            type=\"json\",\n            source=\"Source_docs/English Language Arts Standards/Processing_Inprogress/gbg_full_analysis.json\",\n            enabled=True,\n            refresh_interval=60,\n            parameters={\"auto_discovered\": True}\n        )",
          "methods": []
        },
        {
          "name": "TestResult",
          "line_number": 59,
          "docstring": "Standardized test result structure for OCR testing.\n    \n    Attributes:\n        timestamp: When the test was performed\n        source: Source of the test (e.g., 'cli_optimization', 'gui_testing')\n        test_type: Type of test performed\n        page_num: PDF page number tested\n        block_index: Block index within the page\n        similarity: Similarity score (0-100) between expected and actual text\n        confidence: OCR confidence score (0-1)\n        extracted_text: Text extracted by OCR\n        expected_text: Expected text from reference\n        preprocessing: Preprocessing method used\n        tesseract_config: Tesseract configuration used\n        success: Whether the test was successful\n        metadata: Additional test metadata\n    \n    Example:\n        result = TestResult(\n            timestamp=datetime.now(),\n            source=\"ocr_optimization\",\n            test_type=\"parameter_testing\",\n            page_num=15,\n            block_index=0,\n            similarity=98.0,\n            confidence=0.95,\n            extracted_text=\"UTAH STATE STANDARDS for P-12 ENGLISH LANGUAGE ARTS\",\n            expected_text=\"UTAH STATE STANDARDS for P\u201312 ENGLISH LANGUAGE ARTS\",\n            preprocessing=\"light\",\n            tesseract_config=\"--psm 6\",\n            success=True,\n            metadata={\"optimization_round\": 1}\n        )",
          "methods": []
        }
      ],
      "total_functions": 10,
      "total_classes": 2,
      "has_main": false,
      "error": null
    },
    {
      "file_path": "optimize_tesseract_for_clear_text.py",
      "module_name": "optimize_tesseract_for_clear_text",
      "relative_path": "optimize_tesseract_for_clear_text.py",
      "functions": [
        {
          "name": "test_minimal_preprocessing",
          "line_number": 29,
          "docstring": "Test minimal preprocessing - just grayscale conversion.",
          "parameters": [
            "image"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "test_light_preprocessing",
          "line_number": 38,
          "docstring": "Test light preprocessing - grayscale + light denoising.",
          "parameters": [
            "image"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "test_current_preprocessing",
          "line_number": 50,
          "docstring": "Test current aggressive preprocessing (for comparison).",
          "parameters": [
            "image"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "test_enhanced_preprocessing",
          "line_number": 67,
          "docstring": "Test enhanced preprocessing with morphological operations.",
          "parameters": [
            "image"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "test_tesseract_configs",
          "line_number": 85,
          "docstring": "Test different Tesseract configurations.",
          "parameters": [],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "extract_block_region",
          "line_number": 131,
          "docstring": "Extract the specific block region for testing.",
          "parameters": [
            "pdf_path",
            "page_num",
            "block_index"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "test_ocr_configuration",
          "line_number": 182,
          "docstring": "Test a specific OCR configuration.",
          "parameters": [
            "region",
            "expected_text",
            "preprocessing_func",
            "tesseract_config"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "save_debug_images",
          "line_number": 232,
          "docstring": "Save debug images for visual inspection.",
          "parameters": [
            "region",
            "expected_text",
            "block_id",
            "preprocessing_methods"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "main",
          "line_number": 251,
          "docstring": "Test different OCR configurations to find optimal settings.",
          "parameters": [],
          "is_private": false,
          "is_main": true
        }
      ],
      "classes": [],
      "total_functions": 9,
      "total_classes": 0,
      "has_main": true,
      "error": null
    },
    {
      "file_path": "process_all_engines_gbg.py",
      "module_name": "process_all_engines_gbg",
      "relative_path": "process_all_engines_gbg.py",
      "functions": [
        {
          "name": "main",
          "line_number": 23,
          "docstring": "Main function for command-line usage.",
          "parameters": [],
          "is_private": false,
          "is_main": true
        }
      ],
      "classes": [],
      "total_functions": 1,
      "total_classes": 0,
      "has_main": true,
      "error": null
    },
    {
      "file_path": "run_becr.py",
      "module_name": "run_becr",
      "relative_path": "run_becr.py",
      "functions": [
        {
          "name": "main",
          "line_number": 15,
          "docstring": "Main entry point for BECR application.",
          "parameters": [],
          "is_private": false,
          "is_main": true
        }
      ],
      "classes": [],
      "total_functions": 1,
      "total_classes": 0,
      "has_main": true,
      "error": null
    },
    {
      "file_path": "run_tests.py",
      "module_name": "run_tests",
      "relative_path": "run_tests.py",
      "functions": [
        {
          "name": "main",
          "line_number": 12,
          "docstring": "Main entry point for BECR test suite.",
          "parameters": [],
          "is_private": false,
          "is_main": true
        }
      ],
      "classes": [],
      "total_functions": 1,
      "total_classes": 0,
      "has_main": true,
      "error": null
    },
    {
      "file_path": "show_remaining_issues.py",
      "module_name": "show_remaining_issues",
      "relative_path": "show_remaining_issues.py",
      "functions": [
        {
          "name": "show_remaining_issues",
          "line_number": 10,
          "docstring": "Show the remaining matching issues.",
          "parameters": [],
          "is_private": false,
          "is_main": false
        }
      ],
      "classes": [],
      "total_functions": 1,
      "total_classes": 0,
      "has_main": false,
      "error": null
    },
    {
      "file_path": "src\\compareblocks\\analytics\\dashboard.py",
      "module_name": "dashboard",
      "relative_path": "src\\compareblocks\\analytics\\dashboard.py",
      "functions": [
        {
          "name": "create_performance_dashboard",
          "line_number": 543,
          "docstring": "Convenience function to create a performance dashboard.\n    \n    Args:\n        metrics: Dictionary of engine performance metrics\n        \n    Returns:\n        Performance dashboard data",
          "parameters": [
            "metrics"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "create_quality_dashboard",
          "line_number": 557,
          "docstring": "Convenience function to create a quality dashboard.\n    \n    Args:\n        variation_scores: List of variation scores\n        consensus_decisions: List of consensus decisions\n        \n    Returns:\n        Quality dashboard data",
          "parameters": [
            "variation_scores",
            "consensus_decisions"
          ],
          "is_private": false,
          "is_main": false
        }
      ],
      "classes": [
        {
          "name": "AnalyticsDashboard",
          "line_number": 19,
          "docstring": "Provides dashboard views for analytics data.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 22,
              "docstring": "Initialize analytics dashboard.",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "create_performance_dashboard",
              "line_number": 27,
              "docstring": "Create a performance dashboard view.\n        \n        Args:\n            metrics: Dictionary of engine performance metrics\n            \n        Returns:\n            Dashboard data dictionary",
              "parameters": [
                "self",
                "metrics"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "create_quality_dashboard",
              "line_number": 81,
              "docstring": "Create a quality metrics dashboard view.\n        \n        Args:\n            variation_scores: List of variation scores\n            consensus_decisions: List of consensus decisions\n            \n        Returns:\n            Quality dashboard data dictionary",
              "parameters": [
                "self",
                "variation_scores",
                "consensus_decisions"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "create_optimization_dashboard",
              "line_number": 152,
              "docstring": "Create an optimization insights dashboard.\n        \n        Args:\n            metrics: Dictionary of engine performance metrics\n            recent_reports: List of recent analytics reports\n            \n        Returns:\n            Optimization dashboard data dictionary",
              "parameters": [
                "self",
                "metrics",
                "recent_reports"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "_create_performance_matrix",
              "line_number": 193,
              "docstring": "Create a performance matrix for dashboard display.",
              "parameters": [
                "self",
                "metrics"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_get_performance_level",
              "line_number": 216,
              "docstring": "Get performance level description for a score.",
              "parameters": [
                "self",
                "score"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_rate_performance",
              "line_number": 227,
              "docstring": "Rate performance value as excellent/good/fair/poor.",
              "parameters": [
                "self",
                "value",
                "metric_type",
                "reverse"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_generate_performance_alerts",
              "line_number": 262,
              "docstring": "Generate performance alerts for dashboard.",
              "parameters": [
                "self",
                "metrics"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_generate_dashboard_recommendations",
              "line_number": 305,
              "docstring": "Generate recommendations for dashboard display.",
              "parameters": [
                "self",
                "metrics"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_generate_quality_alerts",
              "line_number": 334,
              "docstring": "Generate quality-related alerts.",
              "parameters": [
                "self",
                "quality_metrics",
                "decision_metrics"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_count_decision_actions",
              "line_number": 376,
              "docstring": "Count decision actions for dashboard display.",
              "parameters": [
                "self",
                "decisions"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_analyze_quality_trends",
              "line_number": 383,
              "docstring": "Analyze quality trends for dashboard.",
              "parameters": [
                "self",
                "variation_scores",
                "consensus_decisions"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_identify_optimization_opportunities",
              "line_number": 407,
              "docstring": "Identify optimization opportunities from metrics.",
              "parameters": [
                "self",
                "metrics"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_analyze_optimization_trends",
              "line_number": 444,
              "docstring": "Analyze optimization trends from recent reports.",
              "parameters": [
                "self",
                "recent_reports"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_generate_optimization_recommendations",
              "line_number": 460,
              "docstring": "Generate optimization recommendations.",
              "parameters": [
                "self",
                "metrics",
                "trend_analysis"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_identify_performance_gaps",
              "line_number": 484,
              "docstring": "Identify performance gaps between engines.",
              "parameters": [
                "self",
                "metrics"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_calculate_improvement_potential",
              "line_number": 508,
              "docstring": "Calculate overall improvement potential.",
              "parameters": [
                "self",
                "metrics"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_describe_improvement_potential",
              "line_number": 531,
              "docstring": "Describe improvement potential in human terms.",
              "parameters": [
                "self",
                "potential"
              ],
              "is_private": true,
              "is_dunder": false
            }
          ]
        }
      ],
      "total_functions": 2,
      "total_classes": 1,
      "has_main": false,
      "error": null
    },
    {
      "file_path": "src\\compareblocks\\analytics\\engine_analytics.py",
      "module_name": "engine_analytics",
      "relative_path": "src\\compareblocks\\analytics\\engine_analytics.py",
      "functions": [
        {
          "name": "analyze_engine_performance",
          "line_number": 538,
          "docstring": "Convenience function to analyze engine performance from various data sources.\n    \n    Args:\n        engine_results: Optional engine extraction results\n        consensus_decisions: Optional consensus decisions\n        variation_scores: Optional variation scores\n        \n    Returns:\n        Combined engine performance metrics",
          "parameters": [
            "engine_results",
            "consensus_decisions",
            "variation_scores"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "get_engine_rankings",
          "line_number": 570,
          "docstring": "Convenience function to get engine rankings.\n    \n    Args:\n        metrics: Dictionary of engine performance metrics\n        \n    Returns:\n        List of (engine_name, overall_score) tuples, sorted by score descending",
          "parameters": [
            "metrics"
          ],
          "is_private": false,
          "is_main": false
        }
      ],
      "classes": [
        {
          "name": "EnginePerformanceMetrics",
          "line_number": 22,
          "docstring": "Performance metrics for a single engine.",
          "methods": [
            {
              "name": "to_dict",
              "line_number": 46,
              "docstring": "Convert to dictionary format.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        },
        {
          "name": "EngineAnalytics",
          "line_number": 51,
          "docstring": "Analyzes engine performance and generates metrics.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 54,
              "docstring": "Initialize engine analytics.",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "analyze_engine_results",
              "line_number": 61,
              "docstring": "Analyze engine extraction results and generate performance metrics.\n        \n        Args:\n            engine_results: Dictionary of engine results from extraction\n            \n        Returns:\n            Dictionary of engine performance metrics",
              "parameters": [
                "self",
                "engine_results"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "analyze_consensus_decisions",
              "line_number": 114,
              "docstring": "Analyze consensus decisions to generate engine performance metrics.\n        \n        Args:\n            decisions: List of consensus decisions\n            \n        Returns:\n            Dictionary of engine performance metrics",
              "parameters": [
                "self",
                "decisions"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "analyze_variation_scores",
              "line_number": 214,
              "docstring": "Analyze variation scores to generate engine performance metrics.\n        \n        Args:\n            variation_scores: List of variation scores\n            \n        Returns:\n            Dictionary of engine performance metrics",
              "parameters": [
                "self",
                "variation_scores"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "combine_metrics",
              "line_number": 285,
              "docstring": "Combine multiple engine performance metrics dictionaries.\n        \n        Args:\n            metric_dicts: Variable number of metrics dictionaries to combine\n            \n        Returns:\n            Combined metrics dictionary",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "_combine_engine_metrics",
              "line_number": 314,
              "docstring": "Combine multiple metrics for the same engine.\n        \n        Args:\n            metrics_list: List of metrics for the same engine\n            \n        Returns:\n            Combined engine metrics",
              "parameters": [
                "self",
                "metrics_list"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "get_engine_rankings",
              "line_number": 407,
              "docstring": "Rank engines by overall performance score.\n        \n        Args:\n            metrics: Dictionary of engine performance metrics\n            \n        Returns:\n            List of (engine_name, overall_score) tuples, sorted by score descending",
              "parameters": [
                "self",
                "metrics"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_performance_summary",
              "line_number": 435,
              "docstring": "Generate a performance summary across all engines.\n        \n        Args:\n            metrics: Dictionary of engine performance metrics\n            \n        Returns:\n            Performance summary dictionary",
              "parameters": [
                "self",
                "metrics"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "save_metrics",
              "line_number": 480,
              "docstring": "Save engine performance metrics to file.\n        \n        Args:\n            metrics: Dictionary of engine performance metrics\n            output_path: Optional output file path\n            \n        Returns:\n            Path to saved metrics file",
              "parameters": [
                "self",
                "metrics",
                "output_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "load_metrics",
              "line_number": 517,
              "docstring": "Load engine performance metrics from file.\n        \n        Args:\n            file_path: Path to metrics file\n            \n        Returns:\n            Dictionary of engine performance metrics",
              "parameters": [
                "self",
                "file_path"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        }
      ],
      "total_functions": 2,
      "total_classes": 2,
      "has_main": false,
      "error": null
    },
    {
      "file_path": "src\\compareblocks\\analytics\\export.py",
      "module_name": "export",
      "relative_path": "src\\compareblocks\\analytics\\export.py",
      "functions": [
        {
          "name": "export_engine_metrics",
          "line_number": 418,
          "docstring": "Convenience function to export engine metrics.\n    \n    Args:\n        metrics: Dictionary of engine performance metrics\n        format_type: Export format ('json', 'csv', 'ndjson')\n        output_path: Optional output file path\n        \n    Returns:\n        Path to exported file",
          "parameters": [
            "metrics",
            "format_type",
            "output_path"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "export_analytics_report",
          "line_number": 444,
          "docstring": "Convenience function to export analytics report.\n    \n    Args:\n        report: Analytics report to export\n        format_type: Export format ('json', 'ndjson', 'csv')\n        output_path: Optional output file path\n        \n    Returns:\n        Path to exported file",
          "parameters": [
            "report",
            "format_type",
            "output_path"
          ],
          "is_private": false,
          "is_main": false
        }
      ],
      "classes": [
        {
          "name": "AnalyticsExporter",
          "line_number": 20,
          "docstring": "Exports analytics data in various formats for downstream analysis.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 23,
              "docstring": "Initialize analytics exporter.",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "export_engine_metrics_json",
              "line_number": 27,
              "docstring": "Export engine metrics to JSON format.\n        \n        Args:\n            metrics: Dictionary of engine performance metrics\n            output_path: Optional output file path\n            \n        Returns:\n            Path to exported file",
              "parameters": [
                "self",
                "metrics",
                "output_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "export_engine_metrics_csv",
              "line_number": 64,
              "docstring": "Export engine metrics to CSV format.\n        \n        Args:\n            metrics: Dictionary of engine performance metrics\n            output_path: Optional output file path\n            \n        Returns:\n            Path to exported file",
              "parameters": [
                "self",
                "metrics",
                "output_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "export_engine_metrics_ndjson",
              "line_number": 138,
              "docstring": "Export engine metrics to NDJSON format.\n        \n        Args:\n            metrics: Dictionary of engine performance metrics\n            output_path: Optional output file path\n            \n        Returns:\n            Path to exported file",
              "parameters": [
                "self",
                "metrics",
                "output_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "export_analytics_report",
              "line_number": 171,
              "docstring": "Export analytics report in specified format.\n        \n        Args:\n            report: Analytics report to export\n            format_type: Export format ('json', 'ndjson', 'csv')\n            output_path: Optional output file path\n            \n        Returns:\n            Path to exported file",
              "parameters": [
                "self",
                "report",
                "format_type",
                "output_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "_export_report_json",
              "line_number": 194,
              "docstring": "Export report to JSON format.",
              "parameters": [
                "self",
                "report",
                "output_path"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_export_report_ndjson",
              "line_number": 210,
              "docstring": "Export report to NDJSON format.",
              "parameters": [
                "self",
                "report",
                "output_path"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_export_report_csv",
              "line_number": 235,
              "docstring": "Export report summary to CSV format.",
              "parameters": [
                "self",
                "report",
                "output_path"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "export_dashboard_data",
              "line_number": 292,
              "docstring": "Export dashboard data for external visualization tools.\n        \n        Args:\n            dashboard_data: Dashboard data dictionary\n            output_path: Optional output file path\n            \n        Returns:\n            Path to exported file",
              "parameters": [
                "self",
                "dashboard_data",
                "output_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "export_comparison_data",
              "line_number": 326,
              "docstring": "Export comparison data for trend analysis.\n        \n        Args:\n            comparison_data: Comparison data dictionary\n            output_path: Optional output file path\n            \n        Returns:\n            Path to exported file",
              "parameters": [
                "self",
                "comparison_data",
                "output_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "export_batch_metrics",
              "line_number": 352,
              "docstring": "Export multiple sets of engine metrics for batch analysis.\n        \n        Args:\n            metrics_list: List of engine metrics dictionaries\n            output_path: Optional output file path\n            \n        Returns:\n            Path to exported file",
              "parameters": [
                "self",
                "metrics_list",
                "output_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "create_export_summary",
              "line_number": 389,
              "docstring": "Create a summary of exported files.\n        \n        Args:\n            exported_files: List of exported file paths\n            \n        Returns:\n            Export summary dictionary",
              "parameters": [
                "self",
                "exported_files"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        }
      ],
      "total_functions": 2,
      "total_classes": 1,
      "has_main": false,
      "error": null
    },
    {
      "file_path": "src\\compareblocks\\analytics\\report_generator.py",
      "module_name": "report_generator",
      "relative_path": "src\\compareblocks\\analytics\\report_generator.py",
      "functions": [
        {
          "name": "generate_analytics_report",
          "line_number": 548,
          "docstring": "Convenience function to generate a comprehensive analytics report.\n    \n    Args:\n        engine_results: Optional engine extraction results\n        consensus_decisions: Optional consensus decisions\n        variation_scores: Optional variation scores\n        pdf_path: Optional PDF file path\n        \n    Returns:\n        Comprehensive analytics report",
          "parameters": [
            "engine_results",
            "consensus_decisions",
            "variation_scores",
            "pdf_path"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "save_analytics_report",
          "line_number": 573,
          "docstring": "Convenience function to save an analytics report.\n    \n    Args:\n        report: Analytics report to save\n        output_path: Optional output file path\n        \n    Returns:\n        Path to saved report file",
          "parameters": [
            "report",
            "output_path"
          ],
          "is_private": false,
          "is_main": false
        }
      ],
      "classes": [
        {
          "name": "AnalyticsReport",
          "line_number": 23,
          "docstring": "Comprehensive analytics report.",
          "methods": [
            {
              "name": "to_dict",
              "line_number": 37,
              "docstring": "Convert to dictionary format.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        },
        {
          "name": "ReportGenerator",
          "line_number": 48,
          "docstring": "Generates comprehensive analytics reports.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 51,
              "docstring": "Initialize report generator.",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "generate_comprehensive_report",
              "line_number": 55,
              "docstring": "Generate a comprehensive analytics report.\n        \n        Args:\n            engine_results: Optional engine extraction results\n            consensus_decisions: Optional consensus decisions\n            variation_scores: Optional variation scores\n            pdf_path: Optional PDF file path\n            \n        Returns:\n            Comprehensive analytics report",
              "parameters": [
                "self",
                "engine_results",
                "consensus_decisions",
                "variation_scores",
                "pdf_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "generate_engine_performance_report",
              "line_number": 120,
              "docstring": "Generate a report focused on engine performance.\n        \n        Args:\n            engine_results: Engine extraction results\n            \n        Returns:\n            Engine performance report",
              "parameters": [
                "self",
                "engine_results"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "generate_decision_analysis_report",
              "line_number": 176,
              "docstring": "Generate a report focused on consensus decision analysis.\n        \n        Args:\n            consensus_decisions: List of consensus decisions\n            \n        Returns:\n            Decision analysis report",
              "parameters": [
                "self",
                "consensus_decisions"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "_generate_summary",
              "line_number": 234,
              "docstring": "Generate overall summary statistics.",
              "parameters": [
                "self",
                "engine_performance",
                "consensus_decisions",
                "engine_results"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_analyze_decisions",
              "line_number": 260,
              "docstring": "Analyze consensus decisions for patterns and statistics.",
              "parameters": [
                "self",
                "decisions"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_calculate_quality_metrics",
              "line_number": 311,
              "docstring": "Calculate overall quality metrics.",
              "parameters": [
                "self",
                "variation_scores",
                "consensus_decisions"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_generate_recommendations",
              "line_number": 346,
              "docstring": "Generate optimization recommendations based on analysis.",
              "parameters": [
                "self",
                "engine_performance",
                "decision_analysis",
                "quality_metrics"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_calculate_manual_override_rate",
              "line_number": 404,
              "docstring": "Calculate the manual override rate from decisions.",
              "parameters": [
                "self",
                "decisions"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "save_report",
              "line_number": 412,
              "docstring": "Save analytics report to file.\n        \n        Args:\n            report: Analytics report to save\n            output_path: Optional output file path\n            \n        Returns:\n            Path to saved report file",
              "parameters": [
                "self",
                "report",
                "output_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "load_report",
              "line_number": 437,
              "docstring": "Load analytics report from file.\n        \n        Args:\n            file_path: Path to report file\n            \n        Returns:\n            Analytics report",
              "parameters": [
                "self",
                "file_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "generate_comparison_report",
              "line_number": 459,
              "docstring": "Generate a comparison report from multiple analytics reports.\n        \n        Args:\n            reports: List of analytics reports to compare\n            \n        Returns:\n            Comparison report dictionary",
              "parameters": [
                "self",
                "reports"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        }
      ],
      "total_functions": 2,
      "total_classes": 2,
      "has_main": false,
      "error": null
    },
    {
      "file_path": "src\\compareblocks\\association\\alignment.py",
      "module_name": "alignment",
      "relative_path": "src\\compareblocks\\association\\alignment.py",
      "functions": [
        {
          "name": "align_content_to_blocks",
          "line_number": 56,
          "docstring": "Convenience function for content alignment.",
          "parameters": [
            "content",
            "blocks",
            "threshold"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "fuzzy_match_content",
          "line_number": 63,
          "docstring": "Calculate fuzzy match score between two texts.",
          "parameters": [
            "text1",
            "text2"
          ],
          "is_private": false,
          "is_main": false
        }
      ],
      "classes": [
        {
          "name": "AlignmentResult",
          "line_number": 14,
          "docstring": "Result of content alignment.",
          "methods": []
        },
        {
          "name": "ContentAligner",
          "line_number": 24,
          "docstring": "Aligns content to blocks using fuzzy matching.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 27,
              "docstring": "Initialize content aligner.",
              "parameters": [
                "self",
                "similarity_threshold"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "align_to_blocks",
              "line_number": 31,
              "docstring": "Align content to blocks using fuzzy matching.",
              "parameters": [
                "self",
                "content",
                "blocks"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        }
      ],
      "total_functions": 2,
      "total_classes": 2,
      "has_main": false,
      "error": null
    },
    {
      "file_path": "src\\compareblocks\\association\\manager.py",
      "module_name": "manager",
      "relative_path": "src\\compareblocks\\association\\manager.py",
      "functions": [
        {
          "name": "load_associations_for_pdf",
          "line_number": 142,
          "docstring": "Convenience function to load associations for a PDF.",
          "parameters": [
            "pdf_path"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "track_association_metadata",
          "line_number": 148,
          "docstring": "Convenience function to get association metadata.",
          "parameters": [
            "pdf_path"
          ],
          "is_private": false,
          "is_main": false
        }
      ],
      "classes": [
        {
          "name": "AssociationMetadata",
          "line_number": 17,
          "docstring": "Metadata for an association file.",
          "methods": []
        },
        {
          "name": "PDFAssociations",
          "line_number": 29,
          "docstring": "All associations for a PDF file.",
          "methods": []
        },
        {
          "name": "AssociationManager",
          "line_number": 37,
          "docstring": "Manages associations for PDF files.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 40,
              "docstring": "Initialize association manager.",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "load_associations_for_pdf",
              "line_number": 44,
              "docstring": "Load all associations for a PDF file.",
              "parameters": [
                "self",
                "pdf_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_associations",
              "line_number": 106,
              "docstring": "Get cached associations for a PDF.",
              "parameters": [
                "self",
                "pdf_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "refresh_associations",
              "line_number": 111,
              "docstring": "Refresh associations for a PDF (reload from disk).",
              "parameters": [
                "self",
                "pdf_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_association_summary",
              "line_number": 118,
              "docstring": "Get summary of associations for a PDF.",
              "parameters": [
                "self",
                "pdf_path"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        }
      ],
      "total_functions": 2,
      "total_classes": 3,
      "has_main": false,
      "error": null
    },
    {
      "file_path": "src\\compareblocks\\association\\parsers.py",
      "module_name": "parsers",
      "relative_path": "src\\compareblocks\\association\\parsers.py",
      "functions": [
        {
          "name": "detect_format",
          "line_number": 416,
          "docstring": "Detect format from file extension.",
          "parameters": [
            "file_path"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "parse_association_file",
          "line_number": 436,
          "docstring": "Parse an association file using the appropriate format parser.",
          "parameters": [
            "file_path",
            "content"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "get_available_parsers",
          "line_number": 448,
          "docstring": "Get all available parsers.",
          "parameters": [],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "register_parser",
          "line_number": 453,
          "docstring": "Register a new parser for a format type.",
          "parameters": [
            "format_type",
            "parser"
          ],
          "is_private": false,
          "is_main": false
        }
      ],
      "classes": [
        {
          "name": "ParsedContent",
          "line_number": 19,
          "docstring": "Represents parsed content from an association file.",
          "methods": []
        },
        {
          "name": "FormatParser",
          "line_number": 28,
          "docstring": "Abstract base class for format-specific parsers.",
          "methods": [
            {
              "name": "parse",
              "line_number": 32,
              "docstring": "Parse content and extract meaningful text.",
              "parameters": [
                "self",
                "content",
                "file_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_format_type",
              "line_number": 37,
              "docstring": "Return the format type this parser handles.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        },
        {
          "name": "CSVParser",
          "line_number": 42,
          "docstring": "Parser for CSV files - extracts tabular data as structured text.",
          "methods": [
            {
              "name": "parse",
              "line_number": 45,
              "docstring": "Parse CSV content and extract tabular data.",
              "parameters": [
                "self",
                "content",
                "file_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_format_type",
              "line_number": 102,
              "docstring": "",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        },
        {
          "name": "HTMLParser",
          "line_number": 106,
          "docstring": "Parser for HTML files - extracts text content while preserving structure.",
          "methods": [
            {
              "name": "parse",
              "line_number": 109,
              "docstring": "Parse HTML content and extract meaningful text.",
              "parameters": [
                "self",
                "content",
                "file_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_format_type",
              "line_number": 181,
              "docstring": "",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        },
        {
          "name": "JSONParser",
          "line_number": 185,
          "docstring": "Parser for JSON files - extracts structured data as readable text.",
          "methods": [
            {
              "name": "parse",
              "line_number": 188,
              "docstring": "Parse JSON content and extract structured data.",
              "parameters": [
                "self",
                "content",
                "file_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "_extract_text_from_json",
              "line_number": 221,
              "docstring": "Recursively extract text content from JSON object.",
              "parameters": [
                "self",
                "obj",
                "text_parts",
                "prefix"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_create_sections_from_json",
              "line_number": 237,
              "docstring": "Create sections from JSON structure.",
              "parameters": [
                "self",
                "obj",
                "sections",
                "path"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_count_keys",
              "line_number": 251,
              "docstring": "Count total keys in JSON object.",
              "parameters": [
                "self",
                "obj"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_calculate_depth",
              "line_number": 259,
              "docstring": "Calculate maximum depth of JSON object.",
              "parameters": [
                "self",
                "obj"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_has_arrays",
              "line_number": 267,
              "docstring": "Check if JSON contains arrays.",
              "parameters": [
                "self",
                "obj"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "get_format_type",
              "line_number": 275,
              "docstring": "",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        },
        {
          "name": "MarkdownParser",
          "line_number": 279,
          "docstring": "Parser for Markdown files - extracts text while preserving structure.",
          "methods": [
            {
              "name": "parse",
              "line_number": 282,
              "docstring": "Parse Markdown content and extract structured text.",
              "parameters": [
                "self",
                "content",
                "file_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_format_type",
              "line_number": 349,
              "docstring": "",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        },
        {
          "name": "TextParser",
          "line_number": 353,
          "docstring": "Parser for plain text files - basic text processing.",
          "methods": [
            {
              "name": "parse",
              "line_number": 356,
              "docstring": "Parse plain text content.",
              "parameters": [
                "self",
                "content",
                "file_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_format_type",
              "line_number": 400,
              "docstring": "",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        }
      ],
      "total_functions": 4,
      "total_classes": 7,
      "has_main": false,
      "error": null
    },
    {
      "file_path": "src\\compareblocks\\association\\pymupdf_matcher.py",
      "module_name": "pymupdf_matcher",
      "relative_path": "src\\compareblocks\\association\\pymupdf_matcher.py",
      "functions": [
        {
          "name": "match_pymupdf_blocks_to_gbg",
          "line_number": 1192,
          "docstring": "Match PyMuPDF engine blocks to GBG blocks.\n    \n    Args:\n        gbg_data: GBG analysis data\n        engine_data: PyMuPDF engine data\n        similarity_threshold: Minimum similarity threshold for matching\n        \n    Returns:\n        List of PyMuPDF matches",
          "parameters": [
            "gbg_data",
            "engine_data",
            "similarity_threshold"
          ],
          "is_private": false,
          "is_main": false
        }
      ],
      "classes": [
        {
          "name": "PyMuPDFMatch",
          "line_number": 17,
          "docstring": "Result of PyMuPDF to GBG block matching.",
          "methods": []
        },
        {
          "name": "PyMuPDFBlockMatcher",
          "line_number": 29,
          "docstring": "Specialized matcher for PyMuPDF blocks to GBG blocks.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 32,
              "docstring": "Initialize the PyMuPDF block matcher.",
              "parameters": [
                "self",
                "similarity_threshold"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "match_blocks",
              "line_number": 36,
              "docstring": "Match PyMuPDF engine blocks to GBG blocks using multiple strategies.\n        \n        Args:\n            gbg_data: GBG analysis data\n            engine_data: PyMuPDF engine data\n            \n        Returns:\n            List of PyMuPDF matches",
              "parameters": [
                "self",
                "gbg_data",
                "engine_data"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "_extract_gbg_blocks_by_page",
              "line_number": 67,
              "docstring": "Extract GBG blocks organized by page.",
              "parameters": [
                "self",
                "gbg_data"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_extract_engine_blocks_by_page",
              "line_number": 95,
              "docstring": "Extract PyMuPDF engine blocks organized by page.",
              "parameters": [
                "self",
                "engine_data"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_match_blocks_on_page",
              "line_number": 121,
              "docstring": "Match blocks on a specific page using multiple strategies.",
              "parameters": [
                "self",
                "engine_blocks",
                "gbg_blocks",
                "page_num"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_find_exact_text_match",
              "line_number": 176,
              "docstring": "Find exact text match between engine and GBG blocks.",
              "parameters": [
                "self",
                "engine_block",
                "gbg_blocks",
                "used_blocks"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_find_similarity_match",
              "line_number": 204,
              "docstring": "Find best similarity match between engine and GBG blocks.",
              "parameters": [
                "self",
                "engine_block",
                "gbg_blocks",
                "used_blocks"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_find_positional_match",
              "line_number": 273,
              "docstring": "Find positional match based on bounding box similarity.",
              "parameters": [
                "self",
                "engine_block",
                "gbg_blocks",
                "used_blocks"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_find_single_char_match",
              "line_number": 315,
              "docstring": "Find match for single character blocks that may be contained in larger GBG blocks.",
              "parameters": [
                "self",
                "engine_block",
                "gbg_blocks",
                "used_blocks"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_find_spatial_first_matches",
              "line_number": 382,
              "docstring": "Find matches based primarily on spatial position, regardless of text content.\n        This handles cases where text doesn't match due to orientation, OCR errors, etc.",
              "parameters": [
                "self",
                "engine_blocks",
                "gbg_blocks",
                "used_gbg_blocks"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_find_combination_matches",
              "line_number": 446,
              "docstring": "Find matches where multiple engine blocks combine to match a single GBG block.\n        This handles cases where PyMuPDF extracted individual characters/words that GBG merged.",
              "parameters": [
                "self",
                "engine_blocks",
                "gbg_blocks"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_find_best_combination_for_gbg_block",
              "line_number": 473,
              "docstring": "Find the best combination of engine blocks that match a single GBG block.",
              "parameters": [
                "self",
                "gbg_block",
                "engine_blocks",
                "used_engine_blocks"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_find_character_combination",
              "line_number": 505,
              "docstring": "Enhanced character combination matching with improved spatial grouping.\n        \n        Enhancements:\n        1. Enhanced spatial character grouping\n        2. Relaxed spatial thresholds  \n        3. Sequential character detection\n        4. Word boundary analysis",
              "parameters": [
                "self",
                "gbg_block",
                "engine_blocks"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_find_sequential_character_match",
              "line_number": 560,
              "docstring": "ENHANCEMENT 3: Sequential character detection.\n        Recognize character sequences that form words by analyzing spatial ordering.",
              "parameters": [
                "self",
                "target_text",
                "char_blocks",
                "gbg_bbox"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_find_word_boundary_character_match",
              "line_number": 640,
              "docstring": "ENHANCEMENT 4: Word boundary analysis.\n        Group characters into logical word units based on spatial clustering.",
              "parameters": [
                "self",
                "target_text",
                "char_blocks",
                "gbg_bbox"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_find_relaxed_spatial_character_match",
              "line_number": 729,
              "docstring": "ENHANCEMENT 2: Relaxed spatial thresholds.\n        Allow larger gaps between characters and more flexible spatial matching.",
              "parameters": [
                "self",
                "target_text",
                "char_blocks",
                "gbg_bbox"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_calculate_sequence_proximity",
              "line_number": 787,
              "docstring": "Calculate how close two blocks are in sequence (for sequential character detection).\n        Returns a score from 0.0 to 1.0 based on spatial proximity.",
              "parameters": [
                "self",
                "block1",
                "block2"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_find_best_char_sequence",
              "line_number": 816,
              "docstring": "Find the best sequence of character blocks that forms the target text.",
              "parameters": [
                "self",
                "target_text",
                "char_blocks",
                "gbg_bbox"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_find_spatially_coherent_sequence",
              "line_number": 850,
              "docstring": "Find a spatially coherent sequence of character blocks.\n        ENHANCEMENT 1: Enhanced spatial character grouping with ultra-relaxed thresholds.",
              "parameters": [
                "self",
                "target_chars",
                "char_to_blocks",
                "gbg_bbox"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_find_word_combination",
              "line_number": 913,
              "docstring": "Find combination of word-level engine blocks that form the GBG text.",
              "parameters": [
                "self",
                "gbg_block",
                "engine_blocks"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_find_word_sequence",
              "line_number": 950,
              "docstring": "Find sequence of word blocks that forms the target words.",
              "parameters": [
                "self",
                "target_words",
                "word_blocks",
                "gbg_bbox"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_find_spatial_combination",
              "line_number": 1006,
              "docstring": "Find spatially close engine blocks that could combine to form the GBG block.",
              "parameters": [
                "self",
                "gbg_block",
                "engine_blocks"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_force_remaining_matches",
              "line_number": 1055,
              "docstring": "Force match any remaining blocks to achieve 100% matching.\n        Uses best spatial fit regardless of text quality.",
              "parameters": [
                "self",
                "engine_blocks",
                "gbg_blocks"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_normalize_text",
              "line_number": 1118,
              "docstring": "Normalize text for exact matching.",
              "parameters": [
                "self",
                "text"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_calculate_comprehensive_similarity",
              "line_number": 1132,
              "docstring": "Calculate comprehensive similarity using multiple measures.",
              "parameters": [
                "self",
                "text1",
                "text2"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_calculate_bbox_similarity",
              "line_number": 1159,
              "docstring": "Calculate bounding box similarity.",
              "parameters": [
                "self",
                "engine_bbox",
                "gbg_bbox"
              ],
              "is_private": true,
              "is_dunder": false
            }
          ]
        }
      ],
      "total_functions": 1,
      "total_classes": 2,
      "has_main": false,
      "error": null
    },
    {
      "file_path": "src\\compareblocks\\association\\tesseract_matcher.py",
      "module_name": "tesseract_matcher",
      "relative_path": "src\\compareblocks\\association\\tesseract_matcher.py",
      "functions": [],
      "classes": [
        {
          "name": "TesseractMatch",
          "line_number": 15,
          "docstring": "Result of Tesseract to GBG block matching.",
          "methods": []
        },
        {
          "name": "TesseractBlockMatcher",
          "line_number": 29,
          "docstring": "Specialized matcher for Tesseract OCR blocks with OCR-aware matching strategies.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 32,
              "docstring": "Initialize Tesseract matcher with OCR-specific settings.\n        \n        Args:\n            similarity_threshold: Minimum similarity score for matches (lower for OCR)",
              "parameters": [
                "self",
                "similarity_threshold"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "_build_ocr_artifact_patterns",
              "line_number": 42,
              "docstring": "Build patterns for common OCR artifacts and their corrections.",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "match_blocks",
              "line_number": 60,
              "docstring": "Match Tesseract engine blocks to GBG blocks using OCR-aware strategies.\n        \n        Args:\n            gbg_data: GBG analysis data\n            engine_data: Tesseract engine data\n            \n        Returns:\n            List of TesseractMatch objects",
              "parameters": [
                "self",
                "gbg_data",
                "engine_data"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "_extract_gbg_blocks_by_page",
              "line_number": 91,
              "docstring": "Extract GBG blocks organized by page.",
              "parameters": [
                "self",
                "gbg_data"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_extract_engine_blocks_by_page",
              "line_number": 119,
              "docstring": "Extract Tesseract engine blocks organized by page.",
              "parameters": [
                "self",
                "engine_data"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_match_blocks_on_page",
              "line_number": 146,
              "docstring": "Match blocks on a specific page using OCR-aware strategies.",
              "parameters": [
                "self",
                "engine_blocks",
                "gbg_blocks",
                "page_num"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_try_exact_match",
              "line_number": 228,
              "docstring": "Try exact text matching (for clean OCR).",
              "parameters": [
                "self",
                "engine_block",
                "gbg_block"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_try_ocr_normalized_match",
              "line_number": 255,
              "docstring": "Try OCR normalization matching (for corrupted OCR).",
              "parameters": [
                "self",
                "engine_block",
                "gbg_block"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_try_fuzzy_content_match",
              "line_number": 285,
              "docstring": "Try fuzzy content matching (for heavily corrupted OCR).",
              "parameters": [
                "self",
                "engine_block",
                "gbg_block"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_try_pattern_match",
              "line_number": 321,
              "docstring": "Try pattern-based matching (for headers/footers).",
              "parameters": [
                "self",
                "engine_block",
                "gbg_block"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_normalize_ocr_text",
              "line_number": 355,
              "docstring": "Normalize text to handle common OCR artifacts.",
              "parameters": [
                "self",
                "text"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_extract_content_words",
              "line_number": 368,
              "docstring": "Extract meaningful content words, filtering out OCR artifacts.",
              "parameters": [
                "self",
                "text"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_extract_text_patterns",
              "line_number": 384,
              "docstring": "Extract common patterns from text (phrases, repeated elements).",
              "parameters": [
                "self",
                "text"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_calculate_bbox_similarity",
              "line_number": 408,
              "docstring": "Calculate bounding box similarity between engine and GBG blocks.",
              "parameters": [
                "self",
                "engine_bbox",
                "gbg_bbox"
              ],
              "is_private": true,
              "is_dunder": false
            }
          ]
        }
      ],
      "total_functions": 0,
      "total_classes": 2,
      "has_main": false,
      "error": null
    },
    {
      "file_path": "src\\compareblocks\\config\\engine_config.py",
      "module_name": "engine_config",
      "relative_path": "src\\compareblocks\\config\\engine_config.py",
      "functions": [],
      "classes": [
        {
          "name": "ConfigurationScope",
          "line_number": 18,
          "docstring": "Configuration scope levels.",
          "methods": []
        },
        {
          "name": "ConfigurationType",
          "line_number": 26,
          "docstring": "Types of configuration records in NDJSON.",
          "methods": []
        },
        {
          "name": "CLIParameter",
          "line_number": 36,
          "docstring": "CLI parameter definition for an engine.",
          "methods": []
        },
        {
          "name": "MCPFunction",
          "line_number": 54,
          "docstring": "MCP function definition with expected attributes.",
          "methods": []
        },
        {
          "name": "OptimizationSetting",
          "line_number": 66,
          "docstring": "Optimization setting for specific conditions.",
          "methods": []
        },
        {
          "name": "EngineConfiguration",
          "line_number": 77,
          "docstring": "Complete engine configuration record.",
          "methods": [
            {
              "name": "to_ndjson_line",
              "line_number": 94,
              "docstring": "Convert to NDJSON line format.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "from_ndjson_line",
              "line_number": 102,
              "docstring": "Create from NDJSON line.",
              "parameters": [
                "cls",
                "line"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        },
        {
          "name": "EngineConfigurationManager",
          "line_number": 170,
          "docstring": "Manages NDJSON-based engine configurations with foreign key relationships.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 173,
              "docstring": "Initialize configuration manager.",
              "parameters": [
                "self",
                "config_file"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "_ensure_parent_configs",
              "line_number": 179,
              "docstring": "Ensure parent configuration records exist.",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_create_default_parent_configs",
              "line_number": 184,
              "docstring": "Create default parent configuration records.",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "add_engine_configuration",
              "line_number": 212,
              "docstring": "Add a new engine configuration with foreign key reference.",
              "parameters": [
                "self",
                "engine_name",
                "parent_config_id"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_engine_configuration",
              "line_number": 239,
              "docstring": "Get active engine configuration.",
              "parameters": [
                "self",
                "engine_name"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "add_pdf_override",
              "line_number": 245,
              "docstring": "Add PDF-specific configuration override.",
              "parameters": [
                "self",
                "engine_name",
                "pdf_path",
                "overrides"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_effective_configuration",
              "line_number": 273,
              "docstring": "Get effective configuration by merging parent, engine, and PDF-specific settings.",
              "parameters": [
                "self",
                "engine_name",
                "pdf_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_parameter_status",
              "line_number": 295,
              "docstring": "Get parameter status information for GUI awareness.",
              "parameters": [
                "self",
                "engine_name"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_tested_parameters",
              "line_number": 327,
              "docstring": "Get list of tested parameters for an engine.",
              "parameters": [
                "self",
                "engine_name"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_auto_optimize_parameters",
              "line_number": 335,
              "docstring": "Get list of parameters included in auto-optimization.",
              "parameters": [
                "self",
                "engine_name"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_parameters_by_category",
              "line_number": 343,
              "docstring": "Get parameters grouped by category for GUI organization.",
              "parameters": [
                "self",
                "engine_name"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "validate_parameter_value",
              "line_number": 358,
              "docstring": "Validate a parameter value against its constraints.",
              "parameters": [
                "self",
                "engine_name",
                "param_name",
                "value"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_parameter_usage_stats",
              "line_number": 408,
              "docstring": "Get usage statistics for parameters across all PDF overrides.",
              "parameters": [
                "self",
                "engine_name"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "_get_engine_defaults",
              "line_number": 441,
              "docstring": "Get default settings for specific engine type.",
              "parameters": [
                "self",
                "engine_name"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_get_engine_cli_parameters",
              "line_number": 527,
              "docstring": "Get CLI parameters for specific engine type.",
              "parameters": [
                "self",
                "engine_name"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_get_engine_mcp_functions",
              "line_number": 742,
              "docstring": "Get MCP functions for specific engine type.",
              "parameters": [
                "self",
                "engine_name"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_get_engine_optimization_settings",
              "line_number": 895,
              "docstring": "Get default optimization settings for engine type.",
              "parameters": [
                "self",
                "engine_name"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_load_configurations",
              "line_number": 899,
              "docstring": "Load all configurations from NDJSON file.",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_append_configuration",
              "line_number": 910,
              "docstring": "Append configuration to NDJSON file.",
              "parameters": [
                "self",
                "config"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_get_global_parent_id",
              "line_number": 915,
              "docstring": "Get the global parent configuration ID.",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_calculate_pdf_hash",
              "line_number": 922,
              "docstring": "Calculate hash for PDF file.",
              "parameters": [
                "self",
                "pdf_path"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "create_individual_config_files",
              "line_number": 933,
              "docstring": "Create individual configuration files for each engine with foreign key references.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "approve_optimization_proposal",
              "line_number": 1017,
              "docstring": "Approve an optimization proposal and create PDF override.",
              "parameters": [
                "self",
                "proposal_id"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "_update_configuration_status",
              "line_number": 1045,
              "docstring": "Update the active status of a configuration.",
              "parameters": [
                "self",
                "config_id",
                "active"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "create_optimization_proposal",
              "line_number": 1062,
              "docstring": "Create an optimization proposal for review.",
              "parameters": [
                "self",
                "engine_name",
                "pdf_path",
                "proposed_settings"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_pdf_configuration_history",
              "line_number": 1087,
              "docstring": "Get historical configurations for a specific PDF.",
              "parameters": [
                "self",
                "engine_name",
                "pdf_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "archive_current_pdf_override",
              "line_number": 1103,
              "docstring": "Archive current PDF override as historical setting before creating new one.",
              "parameters": [
                "self",
                "engine_name",
                "pdf_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_pending_optimization_proposals",
              "line_number": 1141,
              "docstring": "Get all pending optimization proposals.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_engine_statistics",
              "line_number": 1146,
              "docstring": "Get comprehensive statistics for an engine.",
              "parameters": [
                "self",
                "engine_name"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        }
      ],
      "total_functions": 0,
      "total_classes": 7,
      "has_main": false,
      "error": null
    },
    {
      "file_path": "src\\compareblocks\\config\\file_manager.py",
      "module_name": "file_manager",
      "relative_path": "src\\compareblocks\\config\\file_manager.py",
      "functions": [
        {
          "name": "get_target_pdf_path",
          "line_number": 395,
          "docstring": "Convenience function to get target PDF path.",
          "parameters": [],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "get_output_directory",
          "line_number": 400,
          "docstring": "Convenience function to get output directory.",
          "parameters": [],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "ensure_output_directories",
          "line_number": 405,
          "docstring": "Convenience function to ensure output directories exist.",
          "parameters": [],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "complete_processing_workflow",
          "line_number": 410,
          "docstring": "Complete the processing workflow by moving files from processing to final output.\n    Returns:\n        Dictionary with moved file paths",
          "parameters": [],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "validate_configuration",
          "line_number": 419,
          "docstring": "Validate the current configuration.",
          "parameters": [],
          "is_private": false,
          "is_main": false
        }
      ],
      "classes": [
        {
          "name": "FileManager",
          "line_number": 13,
          "docstring": "Manages all file paths and configuration for the application.",
          "methods": [
            {
              "name": "__new__",
              "line_number": 20,
              "docstring": "Singleton pattern to ensure consistent configuration across application.",
              "parameters": [
                "cls"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "__init__",
              "line_number": 26,
              "docstring": "Initialize the file manager with default configuration.",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "_load_config",
              "line_number": 32,
              "docstring": "Load configuration from default_files.json.",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "get_target_pdf_path",
              "line_number": 48,
              "docstring": "Get the primary target PDF file path.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "_get_pdf_base_directory",
              "line_number": 56,
              "docstring": "Get the base directory where the PDF is located.",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_get_output_base_directory",
              "line_number": 61,
              "docstring": "Get the base output directory based on configuration strategy.",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_generate_timestamp_suffix",
              "line_number": 86,
              "docstring": "Generate timestamp suffix if idempotent processing is disabled.",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_get_filename_with_timestamp",
              "line_number": 97,
              "docstring": "Get filename with timestamp suffix if needed.",
              "parameters": [
                "self",
                "base_filename"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "get_processing_directory",
              "line_number": 110,
              "docstring": "Get the processing in-progress directory path.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_final_output_directory",
              "line_number": 120,
              "docstring": "Get the final output directory path.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_output_directory",
              "line_number": 130,
              "docstring": "Get the current output directory (processing directory).",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_gbg_analysis_output_path",
              "line_number": 134,
              "docstring": "Get the GBG analysis output file path.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_ndjson_variations_output_path",
              "line_number": 143,
              "docstring": "Get the NDJSON variations output file path.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_ndjson_consensus_output_path",
              "line_number": 152,
              "docstring": "Get the NDJSON consensus output file path.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_analytics_output_path",
              "line_number": 161,
              "docstring": "Get the analytics output file path.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_test_output_directory",
              "line_number": 170,
              "docstring": "Get the test output directory path.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_integration_test_output_path",
              "line_number": 174,
              "docstring": "Get the integration test output file path.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_unit_test_output_path",
              "line_number": 178,
              "docstring": "Get the unit test output file path.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_expected_pdf_pages",
              "line_number": 182,
              "docstring": "Get the expected number of pages in the target PDF.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_expected_pdf_blocks",
              "line_number": 186,
              "docstring": "Get the expected number of blocks in the target PDF.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_default_engines",
              "line_number": 190,
              "docstring": "Get the list of default processing engines.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_default_encoding",
              "line_number": 194,
              "docstring": "Get the default file encoding.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "is_validation_enabled",
              "line_number": 198,
              "docstring": "Check if validation is enabled by default.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_output_formats",
              "line_number": 202,
              "docstring": "Get the supported output formats.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_default_page_range",
              "line_number": 206,
              "docstring": "Get the default page range for processing.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "should_ignore_images",
              "line_number": 210,
              "docstring": "Check if image blocks should be ignored in extraction and comparison.\n        \n        Args:\n            pdf_path: Optional PDF path for per-PDF override checking\n            \n        Returns:\n            True if images should be ignored, False otherwise",
              "parameters": [
                "self",
                "pdf_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_image_placeholder_text",
              "line_number": 228,
              "docstring": "Get the placeholder text used for image blocks.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "is_image_block",
              "line_number": 232,
              "docstring": "Check if a block represents an image based on its text content.\n        \n        Args:\n            text: The text content of the block\n            \n        Returns:\n            True if the block represents an image, False otherwise",
              "parameters": [
                "self",
                "text"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_image_handling_config",
              "line_number": 248,
              "docstring": "Get the complete image handling configuration.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "ensure_output_directories",
              "line_number": 252,
              "docstring": "Ensure all output directories exist.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "move_to_final_output",
              "line_number": 270,
              "docstring": "Move all files from processing directory to final output directory.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "cleanup_processing_directory",
              "line_number": 288,
              "docstring": "Clean up the processing directory after moving files to final output.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "is_idempotent_processing",
              "line_number": 295,
              "docstring": "Check if processing is idempotent (no timestamps).",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_timestamp_precision",
              "line_number": 299,
              "docstring": "Get the configured timestamp precision.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_file_info",
              "line_number": 303,
              "docstring": "Get complete information about a configured file.",
              "parameters": [
                "self",
                "file_key"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "validate_target_pdf",
              "line_number": 319,
              "docstring": "Validate that the target PDF exists and is accessible.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_config_summary",
              "line_number": 324,
              "docstring": "Get a summary of the current configuration.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "set_mcp_override",
              "line_number": 342,
              "docstring": "Set an MCP override for dynamic file paths (future MCP integration).",
              "parameters": [
                "self",
                "key",
                "value"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "clear_mcp_overrides",
              "line_number": 348,
              "docstring": "Clear all MCP overrides.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_mcp_overrides",
              "line_number": 352,
              "docstring": "Get current MCP overrides.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "complete_processing_workflow",
              "line_number": 356,
              "docstring": "Complete the processing workflow by moving files from processing to final output.\n        Returns:\n            Dictionary with moved file paths",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "supports_mcp_integration",
              "line_number": 386,
              "docstring": "Check if configuration supports MCP integration.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        }
      ],
      "total_functions": 5,
      "total_classes": 1,
      "has_main": false,
      "error": null
    },
    {
      "file_path": "src\\compareblocks\\consensus\\guard.py",
      "module_name": "guard",
      "relative_path": "src\\compareblocks\\consensus\\guard.py",
      "functions": [
        {
          "name": "create_default_guard_thresholds",
          "line_number": 332,
          "docstring": "Create default guard thresholds for hallucination detection.\n    \n    Returns:\n        GuardThresholds: Default threshold configuration",
          "parameters": [],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "create_strict_guard_thresholds",
          "line_number": 342,
          "docstring": "Create strict guard thresholds for conservative hallucination detection.\n    \n    Returns:\n        GuardThresholds: Strict threshold configuration",
          "parameters": [],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "detect_hallucination_patterns",
          "line_number": 357,
          "docstring": "Detect potential hallucination patterns in a text variation.\n    \n    Args:\n        variation: Text variation to analyze\n        \n    Returns:\n        List[str]: List of detected hallucination patterns",
          "parameters": [
            "variation"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "evaluate_variation_quality",
          "line_number": 397,
          "docstring": "Evaluate the quality of a single variation for hallucination detection.\n    \n    Args:\n        variation: Text variation to evaluate\n        thresholds: Guard thresholds (uses defaults if None)\n        \n    Returns:\n        Dict: Quality evaluation results",
          "parameters": [
            "variation",
            "thresholds"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "check_close_competition",
          "line_number": 440,
          "docstring": "Check if multiple variations have very close scores (close competition).\n    \n    Args:\n        scores: List of variation scores\n        threshold: Maximum difference for close competition\n        \n    Returns:\n        bool: True if close competition detected",
          "parameters": [
            "scores",
            "threshold"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "flag_for_manual_review",
          "line_number": 479,
          "docstring": "Flag variations for manual review with detailed reasoning.\n    \n    Args:\n        variations: List of text variations\n        scores: Optional variation scores\n        reason: Reason for flagging\n        \n    Returns:\n        Dict: Review flag information",
          "parameters": [
            "variations",
            "scores",
            "reason"
          ],
          "is_private": false,
          "is_main": false
        }
      ],
      "classes": [
        {
          "name": "GuardThresholds",
          "line_number": 15,
          "docstring": "Configurable thresholds for hallucination guard.",
          "methods": []
        },
        {
          "name": "GuardDecision",
          "line_number": 25,
          "docstring": "Decision made by the hallucination guard.",
          "methods": [
            {
              "name": "to_dict",
              "line_number": 34,
              "docstring": "Convert to dictionary format.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        },
        {
          "name": "HallucinationGuard",
          "line_number": 46,
          "docstring": "Prevents auto-selection of obviously incorrect text variations.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 49,
              "docstring": "Initialize the hallucination guard.\n        \n        Args:\n            scorer: ConsensusScorer instance (creates default if None)\n            guard_thresholds: Guard thresholds configuration",
              "parameters": [
                "self",
                "scorer",
                "guard_thresholds"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "_check_individual_variation_quality",
              "line_number": 62,
              "docstring": "Check if an individual variation meets quality standards.\n        \n        Args:\n            score: VariationScore to check\n            \n        Returns:\n            Tuple of (passes_quality_check, list_of_issues)",
              "parameters": [
                "self",
                "score"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_check_overall_quality",
              "line_number": 102,
              "docstring": "Check if any variations meet minimum quality standards.\n        \n        Args:\n            scores: List of VariationScore objects\n            \n        Returns:\n            Tuple of (has_acceptable_quality, reason)",
              "parameters": [
                "self",
                "scores"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_calculate_confidence",
              "line_number": 131,
              "docstring": "Calculate confidence in the guard decision.\n        \n        Args:\n            selected_score: The selected variation score\n            all_scores: All variation scores\n            \n        Returns:\n            Confidence score (0.0 to 1.0)",
              "parameters": [
                "self",
                "selected_score",
                "all_scores"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "evaluate_variations",
              "line_number": 165,
              "docstring": "Evaluate variations and make a guard decision.\n        \n        Args:\n            variations: List of variation dictionaries\n            context_texts: Optional context texts for similarity scoring\n            \n        Returns:\n            GuardDecision with action and reasoning",
              "parameters": [
                "self",
                "variations",
                "context_texts"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "is_variation_safe_for_auto_selection",
              "line_number": 252,
              "docstring": "Quick check if a single variation is safe for auto-selection.\n        \n        Args:\n            variation_text: Text variation to check\n            engine_name: Name of the engine\n            \n        Returns:\n            True if variation is safe for auto-selection",
              "parameters": [
                "self",
                "variation_text",
                "engine_name"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_anomaly_summary",
              "line_number": 270,
              "docstring": "Get summary of anomalies detected in variations.\n        \n        Args:\n            variations: List of variation dictionaries\n            \n        Returns:\n            Dictionary with anomaly summary",
              "parameters": [
                "self",
                "variations"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "update_guard_thresholds",
              "line_number": 315,
              "docstring": "Update guard thresholds.",
              "parameters": [
                "self",
                "new_thresholds"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_guard_configuration",
              "line_number": 319,
              "docstring": "Get current guard configuration.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        }
      ],
      "total_functions": 6,
      "total_classes": 3,
      "has_main": false,
      "error": null
    },
    {
      "file_path": "src\\compareblocks\\consensus\\merge.py",
      "module_name": "merge",
      "relative_path": "src\\compareblocks\\consensus\\merge.py",
      "functions": [
        {
          "name": "calculate_character_alignment_score",
          "line_number": 496,
          "docstring": "Calculate character-level alignment score between two texts.\n    \n    Args:\n        text1: First text string\n        text2: Second text string\n        \n    Returns:\n        float: Alignment score (0.0 to 1.0)",
          "parameters": [
            "text1",
            "text2"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "find_common_subsequence",
          "line_number": 522,
          "docstring": "Find the longest common subsequence between two texts.\n    \n    Args:\n        text1: First text string\n        text2: Second text string\n        \n    Returns:\n        str: Longest common subsequence",
          "parameters": [
            "text1",
            "text2"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "merge_by_confidence",
          "line_number": 564,
          "docstring": "Merge texts by selecting characters based on confidence scores.\n    \n    Args:\n        texts: List of text strings to merge\n        confidences: Optional confidence scores for each text\n        \n    Returns:\n        str: Merged text result",
          "parameters": [
            "texts",
            "confidences"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "merge_by_majority_vote",
          "line_number": 589,
          "docstring": "Merge texts by character-level majority voting.\n    \n    Args:\n        texts: List of text strings to merge\n        \n    Returns:\n        str: Merged text result",
          "parameters": [
            "texts"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "create_merge_alignment",
          "line_number": 626,
          "docstring": "Create character-level alignment for multiple texts.\n    \n    Args:\n        texts: List of text strings to align\n        \n    Returns:\n        List[List[str]]: Aligned character matrix",
          "parameters": [
            "texts"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "calculate_merge_confidence",
          "line_number": 649,
          "docstring": "Calculate confidence score for a merge result.\n    \n    Args:\n        texts: Original texts that were merged\n        merged_text: Result of merging\n        \n    Returns:\n        float: Confidence score (0.0 to 1.0)",
          "parameters": [
            "texts",
            "merged_text"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "validate_merge_result",
          "line_number": 677,
          "docstring": "Validate the quality of a merge result.\n    \n    Args:\n        original_texts: Original texts that were merged\n        merged_text: Result of merging\n        \n    Returns:\n        Dict: Validation results",
          "parameters": [
            "original_texts",
            "merged_text"
          ],
          "is_private": false,
          "is_main": false
        }
      ],
      "classes": [
        {
          "name": "MergeStrategy",
          "line_number": 13,
          "docstring": "Different strategies for merging text variations.",
          "methods": []
        },
        {
          "name": "TokenAlignment",
          "line_number": 22,
          "docstring": "Alignment information for tokens during merging.",
          "methods": []
        },
        {
          "name": "MergeResult",
          "line_number": 32,
          "docstring": "Result of merging multiple text variations.",
          "methods": [
            {
              "name": "to_dict",
              "line_number": 41,
              "docstring": "Convert to dictionary format.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        },
        {
          "name": "TokenLevelMerger",
          "line_number": 62,
          "docstring": "Implements token-level merging of text variations using dynamic programming.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 65,
              "docstring": "Initialize the token-level merger.",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "_tokenize_text",
              "line_number": 70,
              "docstring": "Tokenize text into words and punctuation.\n        \n        Args:\n            text: Input text\n            \n        Returns:\n            List of tokens",
              "parameters": [
                "self",
                "text"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_calculate_token_similarity",
              "line_number": 114,
              "docstring": "Calculate similarity between two tokens.\n        \n        Args:\n            token1: First token\n            token2: Second token\n            \n        Returns:\n            Similarity score (0.0 to 1.0)",
              "parameters": [
                "self",
                "token1",
                "token2"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_align_token_sequences",
              "line_number": 135,
              "docstring": "Align multiple token sequences using dynamic programming.\n        \n        Args:\n            sequences: List of token sequences to align\n            \n        Returns:\n            List of aligned sequences (with None for gaps)",
              "parameters": [
                "self",
                "sequences"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_pairwise_align",
              "line_number": 160,
              "docstring": "Align two token sequences using dynamic programming.\n        \n        Args:\n            seq1: First token sequence\n            seq2: Second token sequence\n            \n        Returns:\n            Two aligned sequences",
              "parameters": [
                "self",
                "seq1",
                "seq2"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_align_with_existing",
              "line_number": 204,
              "docstring": "Align a new sequence with existing alignment.\n        \n        Args:\n            existing_alignment: Current alignment of sequences\n            new_sequence: New sequence to align\n            \n        Returns:\n            Updated alignment including new sequence",
              "parameters": [
                "self",
                "existing_alignment",
                "new_sequence"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_select_best_token",
              "line_number": 253,
              "docstring": "Select the best token from aligned alternatives.\n        \n        Args:\n            aligned_tokens: List of aligned tokens (with None for gaps)\n            variation_qualities: Optional quality scores for each variation\n            \n        Returns:\n            TokenAlignment with selected token and metadata",
              "parameters": [
                "self",
                "aligned_tokens",
                "variation_qualities"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "merge_variations",
              "line_number": 330,
              "docstring": "Merge multiple text variations using specified strategy.\n        \n        Args:\n            variations: List of text variations to merge\n            variation_qualities: Optional quality scores for each variation\n            strategy: Merging strategy to use\n            \n        Returns:\n            MergeResult with merged text and metadata",
              "parameters": [
                "self",
                "variations",
                "variation_qualities",
                "strategy"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "merge_with_quality_weights",
              "line_number": 424,
              "docstring": "Merge variations using their quality scores as weights.\n        \n        Args:\n            variations: List of variation dictionaries with 'text' and 'quality' keys\n            \n        Returns:\n            MergeResult with merged text and metadata",
              "parameters": [
                "self",
                "variations"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_merge_preview",
              "line_number": 442,
              "docstring": "Get a preview of what merging would produce without full processing.\n        \n        Args:\n            variations: List of text variations\n            max_differences: Maximum number of differences to show\n            \n        Returns:\n            Dictionary with merge preview information",
              "parameters": [
                "self",
                "variations",
                "max_differences"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        }
      ],
      "total_functions": 7,
      "total_classes": 4,
      "has_main": false,
      "error": null
    },
    {
      "file_path": "src\\compareblocks\\consensus\\policy.py",
      "module_name": "policy",
      "relative_path": "src\\compareblocks\\consensus\\policy.py",
      "functions": [
        {
          "name": "create_default_policy_thresholds",
          "line_number": 393,
          "docstring": "Create default policy thresholds for decision making.\n    \n    Returns:\n        PolicyThresholds: Default threshold configuration",
          "parameters": [],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "create_conservative_policy_thresholds",
          "line_number": 403,
          "docstring": "Create conservative policy thresholds that favor manual review.\n    \n    Returns:\n        PolicyThresholds: Conservative threshold configuration",
          "parameters": [],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "calculate_text_similarity",
          "line_number": 418,
          "docstring": "Calculate similarity between two text strings.\n    \n    Args:\n        text1: First text string\n        text2: Second text string\n        \n    Returns:\n        float: Similarity score (0.0 to 1.0)",
          "parameters": [
            "text1",
            "text2"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "identify_merge_candidates",
          "line_number": 448,
          "docstring": "Identify pairs of variations that are candidates for merging.\n    \n    Args:\n        variations: List of text variations\n        similarity_threshold: Minimum similarity for merge candidacy\n        \n    Returns:\n        List[Tuple[int, int]]: Pairs of variation indices that could be merged",
          "parameters": [
            "variations",
            "similarity_threshold"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "should_merge_variations",
          "line_number": 474,
          "docstring": "Determine if variations should be merged based on similarity.\n    \n    Args:\n        variations: List of text variations\n        scores: Optional variation scores\n        threshold: Similarity threshold for merging\n        \n    Returns:\n        bool: True if variations should be merged",
          "parameters": [
            "variations",
            "scores",
            "threshold"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "make_consensus_decision",
          "line_number": 495,
          "docstring": "Make a consensus decision for a set of variations.\n    \n    Args:\n        variations: List of text variations\n        scores: Optional variation scores\n        thresholds: Policy thresholds (uses defaults if None)\n        \n    Returns:\n        ConsensusDecision: Decision result",
          "parameters": [
            "variations",
            "scores",
            "thresholds"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "batch_consensus_decisions",
          "line_number": 573,
          "docstring": "Make consensus decisions for multiple batches of variations.\n    \n    Args:\n        variation_batches: List of variation lists\n        thresholds: Policy thresholds (uses defaults if None)\n        \n    Returns:\n        List[ConsensusDecision]: Decision results for each batch",
          "parameters": [
            "variation_batches",
            "thresholds"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "get_decision_statistics",
          "line_number": 592,
          "docstring": "Calculate statistics for a set of consensus decisions.\n    \n    Args:\n        decisions: List of consensus decisions\n        \n    Returns:\n        Dict: Statistics about decision patterns",
          "parameters": [
            "decisions"
          ],
          "is_private": false,
          "is_main": false
        }
      ],
      "classes": [
        {
          "name": "DecisionAction",
          "line_number": 15,
          "docstring": "Possible decision actions.",
          "methods": []
        },
        {
          "name": "PolicyThresholds",
          "line_number": 24,
          "docstring": "Configurable thresholds for decision policy.",
          "methods": []
        },
        {
          "name": "ConsensusDecision",
          "line_number": 34,
          "docstring": "Complete consensus decision with reasoning.",
          "methods": [
            {
              "name": "to_dict",
              "line_number": 47,
              "docstring": "Convert to dictionary format.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        },
        {
          "name": "DecisionPolicyEngine",
          "line_number": 63,
          "docstring": "Implements decision policy for consensus selection.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 66,
              "docstring": "Initialize the decision policy engine.\n        \n        Args:\n            guard: HallucinationGuard instance (creates default if None)\n            policy_thresholds: Policy thresholds configuration",
              "parameters": [
                "self",
                "guard",
                "policy_thresholds"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "_calculate_text_similarity",
              "line_number": 78,
              "docstring": "Calculate similarity between two text strings.\n        \n        Args:\n            text1: First text string\n            text2: Second text string\n            \n        Returns:\n            Similarity score (0.0 to 1.0)",
              "parameters": [
                "self",
                "text1",
                "text2"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_identify_merge_candidates",
              "line_number": 101,
              "docstring": "Identify variations that are candidates for merging.\n        \n        Args:\n            scores: List of VariationScore objects\n            \n        Returns:\n            List of merge candidate scores",
              "parameters": [
                "self",
                "scores"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_check_for_clear_winner",
              "line_number": 140,
              "docstring": "Check if there's a clear winner among variations.\n        \n        Args:\n            scores: List of VariationScore objects\n            \n        Returns:\n            Clear winner VariationScore or None",
              "parameters": [
                "self",
                "scores"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_should_merge_variations",
              "line_number": 168,
              "docstring": "Determine if variations should be merged.\n        \n        Args:\n            candidates: List of merge candidate scores\n            \n        Returns:\n            True if variations should be merged",
              "parameters": [
                "self",
                "candidates"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "make_decision",
              "line_number": 198,
              "docstring": "Make a consensus decision for the given variations.\n        \n        Args:\n            variations: List of variation dictionaries\n            context_texts: Optional context texts for similarity scoring\n            \n        Returns:\n            ConsensusDecision with action and reasoning",
              "parameters": [
                "self",
                "variations",
                "context_texts"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "batch_decisions",
              "line_number": 307,
              "docstring": "Make decisions for multiple batches of variations.\n        \n        Args:\n            variation_batches: List of variation lists (one per block)\n            context_texts: Optional context texts for similarity scoring\n            \n        Returns:\n            List of ConsensusDecision objects",
              "parameters": [
                "self",
                "variation_batches",
                "context_texts"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_decision_statistics",
              "line_number": 327,
              "docstring": "Get statistics for a set of decisions.\n        \n        Args:\n            decisions: List of ConsensusDecision objects\n            \n        Returns:\n            Dictionary with decision statistics",
              "parameters": [
                "self",
                "decisions"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "update_policy_thresholds",
              "line_number": 377,
              "docstring": "Update policy thresholds.",
              "parameters": [
                "self",
                "new_thresholds"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_policy_configuration",
              "line_number": 381,
              "docstring": "Get current policy configuration.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        }
      ],
      "total_functions": 8,
      "total_classes": 4,
      "has_main": false,
      "error": null
    },
    {
      "file_path": "src\\compareblocks\\consensus\\score.py",
      "module_name": "score",
      "relative_path": "src\\compareblocks\\consensus\\score.py",
      "functions": [
        {
          "name": "create_default_scoring_weights",
          "line_number": 474,
          "docstring": "Create default scoring weights for consensus evaluation.\n    \n    Returns:\n        ScoringWeights: Default weight configuration",
          "parameters": [],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "create_conservative_scoring_weights",
          "line_number": 484,
          "docstring": "Create conservative scoring weights that prioritize quality over speed.\n    \n    Returns:\n        ScoringWeights: Conservative weight configuration with higher anomaly penalty",
          "parameters": [],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "create_default_scoring_thresholds",
          "line_number": 501,
          "docstring": "Create default scoring thresholds for consensus evaluation.\n    \n    Returns:\n        ScoringThresholds: Default threshold configuration",
          "parameters": [],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "create_strict_scoring_thresholds",
          "line_number": 511,
          "docstring": "Create strict scoring thresholds for high-quality requirements.\n    \n    Returns:\n        ScoringThresholds: Strict threshold configuration",
          "parameters": [],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "calculate_median_length_consistency",
          "line_number": 526,
          "docstring": "Calculate length consistency score based on median variation length.\n    \n    Args:\n        variations: List of text variations with 'text' field\n        \n    Returns:\n        float: Length consistency score (0.0 to 1.0)",
          "parameters": [
            "variations"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "calculate_orientation_penalty",
          "line_number": 555,
          "docstring": "Calculate orientation penalty for a variation.\n    \n    Args:\n        variation: Text variation with optional 'orientation' field\n        expected_orientation: Expected orientation in degrees\n        \n    Returns:\n        float: Orientation penalty (0.0 to 1.0, where 0.0 is no penalty)",
          "parameters": [
            "variation",
            "expected_orientation"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "score_single_variation",
          "line_number": 579,
          "docstring": "Score a single text variation using all available features.\n    \n    Args:\n        variation: Text variation to score\n        context_variations: Other variations for context (optional)\n        weights: Scoring weights (uses defaults if None)\n        thresholds: Scoring thresholds (uses defaults if None)\n        \n    Returns:\n        VariationScore: Complete scoring results",
          "parameters": [
            "variation",
            "context_variations",
            "weights",
            "thresholds"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "rank_variations_by_score",
          "line_number": 691,
          "docstring": "Rank variations by their final scores in descending order.\n    \n    Args:\n        scores: List of variation scores\n        \n    Returns:\n        List[VariationScore]: Sorted list with highest scores first",
          "parameters": [
            "scores"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "get_scoring_statistics",
          "line_number": 704,
          "docstring": "Calculate statistics for a set of variation scores.\n    \n    Args:\n        scores: List of variation scores\n        \n    Returns:\n        Dict: Statistics including mean, median, std dev, etc.",
          "parameters": [
            "scores"
          ],
          "is_private": false,
          "is_main": false
        }
      ],
      "classes": [
        {
          "name": "ScoringWeights",
          "line_number": 19,
          "docstring": "Configurable weights for consensus scoring.",
          "methods": [
            {
              "name": "normalize",
              "line_number": 28,
              "docstring": "Normalize weights to sum to 1.0.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        },
        {
          "name": "ScoringThresholds",
          "line_number": 48,
          "docstring": "Configurable thresholds for consensus scoring.",
          "methods": []
        },
        {
          "name": "VariationScore",
          "line_number": 57,
          "docstring": "Complete scoring information for a text variation.",
          "methods": [
            {
              "name": "to_dict",
              "line_number": 74,
              "docstring": "Convert to dictionary format.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        },
        {
          "name": "ConsensusScorer",
          "line_number": 98,
          "docstring": "Implements consensus scoring algorithms for text variations.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 101,
              "docstring": "Initialize the consensus scorer.\n        \n        Args:\n            weights: Scoring weights configuration\n            thresholds: Scoring thresholds configuration",
              "parameters": [
                "self",
                "weights",
                "thresholds"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "_calculate_orientation_penalty",
              "line_number": 120,
              "docstring": "Calculate penalty for orientation mismatch.\n        \n        Args:\n            expected_orientation: Expected text orientation in degrees\n            actual_orientation: Actual text orientation in degrees\n            \n        Returns:\n            Penalty score (0.0 = no penalty, 1.0 = maximum penalty)",
              "parameters": [
                "self",
                "expected_orientation",
                "actual_orientation"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_apply_language_fitness_cap",
              "line_number": 152,
              "docstring": "Apply language fitness cap to score.\n        \n        Args:\n            score: Current score\n            language_fitness: Language fitness score (0.0 to 1.0)\n            \n        Returns:\n            Capped score",
              "parameters": [
                "self",
                "score",
                "language_fitness"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_apply_anomaly_score_cap",
              "line_number": 171,
              "docstring": "Apply anomaly score cap to score.\n        \n        Args:\n            score: Current score\n            anomaly_score: Anomaly score (0.0 to 1.0, higher is more anomalous)\n            \n        Returns:\n            Capped score",
              "parameters": [
                "self",
                "score",
                "anomaly_score"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "score_variation",
              "line_number": 190,
              "docstring": "Score a single text variation.\n        \n        Args:\n            variation_text: The text variation to score\n            engine_name: Name of the engine that produced this variation\n            variation_index: Index of this variation in the list\n            all_variations: All variations for consistency scoring\n            expected_orientation: Expected text orientation in degrees\n            actual_orientation: Actual text orientation in degrees\n            context_texts: Optional context texts for similarity scoring\n            \n        Returns:\n            VariationScore object with complete scoring information",
              "parameters": [
                "self",
                "variation_text",
                "engine_name",
                "variation_index",
                "all_variations",
                "expected_orientation",
                "actual_orientation",
                "context_texts",
                "block_id"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "score_variations",
              "line_number": 311,
              "docstring": "Score multiple text variations.\n        \n        Args:\n            variations: List of variation dictionaries with keys:\n                       'text', 'engine', 'orientation' (optional)\n            context_texts: Optional context texts for similarity scoring\n            \n        Returns:\n            List of VariationScore objects",
              "parameters": [
                "self",
                "variations",
                "context_texts",
                "block_id"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_best_variation",
              "line_number": 358,
              "docstring": "Get the best scoring variation.\n        \n        Args:\n            variations: List of variation dictionaries\n            context_texts: Optional context texts for similarity scoring\n            block_id: Optional block identifier for character consistency tracking\n            \n        Returns:\n            Best VariationScore or None if no variations",
              "parameters": [
                "self",
                "variations",
                "context_texts",
                "block_id"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "rank_variations",
              "line_number": 379,
              "docstring": "Rank variations by score (best first).\n        \n        Args:\n            variations: List of variation dictionaries\n            context_texts: Optional context texts for similarity scoring\n            block_id: Optional block identifier for character consistency tracking\n            \n        Returns:\n            List of VariationScore objects sorted by final_score (descending)",
              "parameters": [
                "self",
                "variations",
                "context_texts",
                "block_id"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_scoring_statistics",
              "line_number": 396,
              "docstring": "Get scoring statistics for a set of variations.\n        \n        Args:\n            variations: List of variation dictionaries\n            context_texts: Optional context texts for similarity scoring\n            block_id: Optional block identifier for character consistency tracking\n            \n        Returns:\n            Dictionary with scoring statistics",
              "parameters": [
                "self",
                "variations",
                "context_texts",
                "block_id"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "update_weights",
              "line_number": 447,
              "docstring": "Update scoring weights.",
              "parameters": [
                "self",
                "new_weights"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "update_thresholds",
              "line_number": 451,
              "docstring": "Update scoring thresholds.",
              "parameters": [
                "self",
                "new_thresholds"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_configuration",
              "line_number": 455,
              "docstring": "Get current scorer configuration.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        }
      ],
      "total_functions": 9,
      "total_classes": 4,
      "has_main": false,
      "error": null
    },
    {
      "file_path": "src\\compareblocks\\debug\\image_extractor.py",
      "module_name": "image_extractor",
      "relative_path": "src\\compareblocks\\debug\\image_extractor.py",
      "functions": [
        {
          "name": "extract_debug_images_for_page",
          "line_number": 292,
          "docstring": "Extract debug images for a specific page.\n    \n    Args:\n        pdf_path: Path to PDF file\n        page_num: Page number to process\n        max_blocks: Maximum number of blocks to extract\n        \n    Returns:\n        Dictionary with extraction results and paths",
          "parameters": [
            "pdf_path",
            "page_num",
            "max_blocks"
          ],
          "is_private": false,
          "is_main": false
        }
      ],
      "classes": [
        {
          "name": "ImageRegionExtractor",
          "line_number": 19,
          "docstring": "Extract and save image regions for OCR debugging.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 22,
              "docstring": "Initialize the image extractor.",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "extract_page_regions",
              "line_number": 27,
              "docstring": "Extract image regions for the first few blocks on a page for debugging.\n        \n        Args:\n            pdf_path: Path to PDF file\n            page_num: Page number to process\n            gbg_blocks: List of GBG blocks for the page\n            max_blocks: Maximum number of blocks to extract\n            \n        Returns:\n            List of extracted region information",
              "parameters": [
                "self",
                "pdf_path",
                "page_num",
                "gbg_blocks",
                "max_blocks"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "_extract_single_region",
              "line_number": 75,
              "docstring": "Extract a single region and save debug images.",
              "parameters": [
                "self",
                "cv_image",
                "gbg_block",
                "page_num",
                "block_index",
                "pdf_path"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_preprocess_for_ocr",
              "line_number": 160,
              "docstring": "Apply the same preprocessing used in the OCR engine.",
              "parameters": [
                "self",
                "image"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "create_debug_report",
              "line_number": 181,
              "docstring": "Create an HTML debug report showing images and OCR results.",
              "parameters": [
                "self",
                "extracted_regions",
                "tesseract_results"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        }
      ],
      "total_functions": 1,
      "total_classes": 1,
      "has_main": false,
      "error": null
    },
    {
      "file_path": "src\\compareblocks\\engines\\comprehensive_engine_gbg_processor.py",
      "module_name": "comprehensive_engine_gbg_processor",
      "relative_path": "src\\compareblocks\\engines\\comprehensive_engine_gbg_processor.py",
      "functions": [
        {
          "name": "process_all_engines_with_gbg_integration",
          "line_number": 825,
          "docstring": "Process all engines with optimized configurations and integrate into GBG analysis.",
          "parameters": [
            "pdf_path",
            "gbg_analysis_path"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "process_engines_with_gbg_integration",
          "line_number": 832,
          "docstring": "Process specific engines with optimized configurations and integrate into GBG analysis.",
          "parameters": [
            "engine_names",
            "pdf_path",
            "gbg_analysis_path"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "get_available_engines_for_gbg_integration",
          "line_number": 840,
          "docstring": "Get list of available engines for GBG integration.",
          "parameters": [],
          "is_private": false,
          "is_main": false
        }
      ],
      "classes": [
        {
          "name": "OverwriteMode",
          "line_number": 23,
          "docstring": "Modes for handling existing extraction results.",
          "methods": []
        },
        {
          "name": "EngineConfigurationResult",
          "line_number": 31,
          "docstring": "Result from engine configuration lookup.",
          "methods": []
        },
        {
          "name": "ComprehensiveEngineResult",
          "line_number": 40,
          "docstring": "Result from comprehensive engine processing.",
          "methods": []
        },
        {
          "name": "ComprehensiveProcessingResult",
          "line_number": 60,
          "docstring": "Result from comprehensive processing of all engines.",
          "methods": []
        },
        {
          "name": "ComprehensiveEngineGBGProcessor",
          "line_number": 74,
          "docstring": "Processes all available extraction engines with optimized configurations\n    and integrates results into GBG full analysis.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 80,
              "docstring": "Initialize the comprehensive processor.",
              "parameters": [
                "self",
                "overwrite_mode"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "get_available_engines",
              "line_number": 88,
              "docstring": "Get list of available extraction engines.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_pdf_hash_for_configuration",
              "line_number": 92,
              "docstring": "Get PDF hash for configuration lookup.\n        \n        Args:\n            pdf_path: Path to PDF file\n            \n        Returns:\n            MD5 hash of PDF content",
              "parameters": [
                "self",
                "pdf_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_configuration_hash",
              "line_number": 110,
              "docstring": "Generate hash for configuration to detect duplicates.\n        \n        Args:\n            configuration: Configuration dictionary\n            \n        Returns:\n            MD5 hash of configuration",
              "parameters": [
                "self",
                "configuration"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "check_existing_results",
              "line_number": 128,
              "docstring": "Check for existing results with same engine and configuration.\n        \n        Args:\n            gbg_analysis: GBG analysis data\n            engine_name: Name of the engine\n            config_hash: Hash of the configuration\n            \n        Returns:\n            List of existing results with same engine+config combination",
              "parameters": [
                "self",
                "gbg_analysis",
                "engine_name",
                "config_hash"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "should_skip_processing",
              "line_number": 165,
              "docstring": "Determine if processing should be skipped based on existing results and overwrite mode.\n        \n        Args:\n            gbg_analysis: GBG analysis data\n            engine_name: Name of the engine\n            config_hash: Hash of the configuration\n            \n        Returns:\n            True if processing should be skipped",
              "parameters": [
                "self",
                "gbg_analysis",
                "engine_name",
                "config_hash"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "enhance_output_with_configuration_metadata",
              "line_number": 189,
              "docstring": "Enhance engine output file with configuration metadata.\n        \n        Args:\n            output_path: Path to engine output file\n            configuration: Configuration used for processing\n            config_hash: Hash of the configuration\n            processing_timestamp: Timestamp of processing",
              "parameters": [
                "self",
                "output_path",
                "configuration",
                "config_hash",
                "processing_timestamp"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "generate_config_hash",
              "line_number": 225,
              "docstring": "Generate hash for configuration to detect duplicates.\n        \n        Args:\n            configuration: Configuration dictionary\n            \n        Returns:\n            MD5 hash of configuration",
              "parameters": [
                "self",
                "configuration"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "check_existing_extraction_results",
              "line_number": 243,
              "docstring": "Check if extraction results already exist for this engine and configuration.\n        \n        Args:\n            engine_name: Name of the engine\n            config_result: Configuration result\n            pdf_path: Path to PDF file\n            \n        Returns:\n            Tuple of (exists, existing_file_path)",
              "parameters": [
                "self",
                "engine_name",
                "config_result",
                "pdf_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "should_process_engine",
              "line_number": 291,
              "docstring": "Determine if engine should be processed based on overwrite mode and existing results.\n        \n        Args:\n            engine_name: Name of the engine\n            overwrite_mode: Whether to overwrite existing results\n            existing_found: Whether existing results were found\n            existing_path: Path to existing results\n            \n        Returns:\n            True if engine should be processed",
              "parameters": [
                "self",
                "engine_name",
                "overwrite_mode",
                "existing_found",
                "existing_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "enhance_engine_output_with_configuration",
              "line_number": 315,
              "docstring": "Enhance engine output file with configuration metadata.\n        \n        Args:\n            output_path: Path to engine output file\n            config_result: Configuration used\n            processing_time: Time taken for processing",
              "parameters": [
                "self",
                "output_path",
                "config_result",
                "processing_time"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_engine_configuration",
              "line_number": 355,
              "docstring": "Get optimized or default configuration for an engine.\n        \n        Args:\n            engine_name: Name of the engine\n            pdf_path: Path to PDF file for configuration lookup\n            \": performance_comparison,\n            \"recommendation\": f\"Best configuration: {best_result.config_source} ({best_result.extraction_time:.1f}s)\"\n        }\n        Returns:\n            EngineConfigurationResult with configuration details",
              "parameters": [
                "self",
                "engine_name",
                "pdf_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "process_engine_with_configuration",
              "line_number": 401,
              "docstring": "Process a single engine with its configuration.\n        \n        Args:\n            engine_name: Name of the engine\n            config_result: Configuration to use\n            pdf_path: Path to PDF file\n            overwrite_mode: Whether to overwrite existing results\n            \n        Returns:\n            ComprehensiveEngineResult with processing results",
              "parameters": [
                "self",
                "engine_name",
                "config_result",
                "pdf_path",
                "overwrite_mode"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "load_existing_gbg_analysis",
              "line_number": 476,
              "docstring": "Load existing GBG analysis file.\n        \n        Args:\n            gbg_analysis_path: Path to GBG analysis file\n            \n        Returns:\n            GBG analysis data or None if not found",
              "parameters": [
                "self",
                "gbg_analysis_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "validate_gbg_analysis_structure",
              "line_number": 499,
              "docstring": "Validate GBG analysis structure.\n        \n        Args:\n            analysis: GBG analysis data\n            \n        Returns:\n            True if structure is valid",
              "parameters": [
                "self",
                "analysis"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "update_gbg_analysis_with_engine_results",
              "line_number": 518,
              "docstring": "Update GBG analysis with engine results.\n        \n        Args:\n            gbg_analysis: Existing GBG analysis\n            engine_results: Results from engine processing\n            \n        Returns:\n            Updated GBG analysis",
              "parameters": [
                "self",
                "gbg_analysis",
                "engine_results"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "save_updated_gbg_analysis",
              "line_number": 572,
              "docstring": "Save updated GBG analysis to file.\n        \n        Args:\n            gbg_analysis: Updated GBG analysis\n            output_path: Path to save file\n            \n        Returns:\n            Path to saved file",
              "parameters": [
                "self",
                "gbg_analysis",
                "output_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "create_processing_summary",
              "line_number": 592,
              "docstring": "Create processing summary.\n        \n        Args:\n            engine_results: Results from engine processing\n            total_time: Total processing time\n            \n        Returns:\n            Processing summary",
              "parameters": [
                "self",
                "engine_results",
                "total_time"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "process_all_engines_comprehensive",
              "line_number": 629,
              "docstring": "Process all available engines with optimized configurations and integrate into GBG analysis.\n        \n        Args:\n            pdf_path: Path to PDF file\n            gbg_analysis_path: Path to existing GBG analysis file\n            overwrite_mode: Whether to overwrite existing extraction results (True) or skip them (False)\n            \n        Returns:\n            ComprehensiveProcessingResult with all results",
              "parameters": [
                "self",
                "pdf_path",
                "gbg_analysis_path",
                "overwrite_mode"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "process_specific_engines",
              "line_number": 778,
              "docstring": "Process specific engines with optimized configurations.\n        \n        Args:\n            engine_names: List of engine names to process\n            pdf_path: Path to PDF file\n            gbg_analysis_path: Path to existing GBG analysis file\n            overwrite_mode: Whether to overwrite existing extraction results\n            \n        Returns:\n            ComprehensiveProcessingResult with results",
              "parameters": [
                "self",
                "engine_names",
                "pdf_path",
                "gbg_analysis_path",
                "overwrite_mode"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        }
      ],
      "total_functions": 3,
      "total_classes": 5,
      "has_main": false,
      "error": null
    },
    {
      "file_path": "src\\compareblocks\\engines\\docling_engine.py",
      "module_name": "docling_engine",
      "relative_path": "src\\compareblocks\\engines\\docling_engine.py",
      "functions": [
        {
          "name": "extract_docling",
          "line_number": 321,
          "docstring": "Extract text using Docling.",
          "parameters": [
            "pdf_path",
            "pipeline",
            "export_format"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "save_docling_extraction",
          "line_number": 329,
          "docstring": "Extract and save Docling data.",
          "parameters": [
            "pdf_path",
            "output_path",
            "pipeline",
            "export_format"
          ],
          "is_private": false,
          "is_main": false
        }
      ],
      "classes": [
        {
          "name": "DoclingBlock",
          "line_number": 24,
          "docstring": "Docling extraction block data.",
          "methods": []
        },
        {
          "name": "DoclingPage",
          "line_number": 36,
          "docstring": "Docling page data.",
          "methods": []
        },
        {
          "name": "DoclingEngine",
          "line_number": 44,
          "docstring": "Docling advanced PDF understanding extraction engine.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 47,
              "docstring": "Initialize Docling engine.\n        \n        Args:\n            pipeline: Processing pipeline ('default', 'vlm', 'ocr')\n            export_format: Export format ('markdown', 'html', 'json', 'doctags')",
              "parameters": [
                "self",
                "pipeline",
                "export_format"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "_get_converter",
              "line_number": 63,
              "docstring": "Get or create Docling converter instance.",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "is_available",
              "line_number": 73,
              "docstring": "Check if Docling is available.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "extract_pdf",
              "line_number": 84,
              "docstring": "Extract text from PDF using Docling.\n        \n        Args:\n            pdf_path: Path to PDF file (defaults to configured target PDF)\n            \n        Returns:\n            Docling extraction results",
              "parameters": [
                "self",
                "pdf_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "_get_docling_version",
              "line_number": 247,
              "docstring": "Get Docling version.",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_generate_summary",
              "line_number": 255,
              "docstring": "Generate Docling extraction summary.",
              "parameters": [
                "self",
                "results"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "save_extraction",
              "line_number": 278,
              "docstring": "Extract and save Docling data.\n        \n        Args:\n            pdf_path: Path to PDF file\n            output_path: Path to save results\n            \n        Returns:\n            Path to saved file",
              "parameters": [
                "self",
                "pdf_path",
                "output_path"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        }
      ],
      "total_functions": 2,
      "total_classes": 3,
      "has_main": false,
      "error": null
    },
    {
      "file_path": "src\\compareblocks\\engines\\dual_output_processor.py",
      "module_name": "dual_output_processor",
      "relative_path": "src\\compareblocks\\engines\\dual_output_processor.py",
      "functions": [
        {
          "name": "process_engine_dual_output",
          "line_number": 532,
          "docstring": "Process single engine with dual output.",
          "parameters": [
            "engine_name",
            "pdf_path"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "process_all_engines_dual_output",
          "line_number": 538,
          "docstring": "Process all available engines with dual output.",
          "parameters": [
            "pdf_path"
          ],
          "is_private": false,
          "is_main": false
        }
      ],
      "classes": [
        {
          "name": "DualOutputResult",
          "line_number": 23,
          "docstring": "Result from dual-output engine processing.",
          "methods": []
        },
        {
          "name": "DualOutputEngineProcessor",
          "line_number": 34,
          "docstring": "Processes PDF with each engine producing both markdown and JSON outputs.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 37,
              "docstring": "Initialize the dual-output processor.",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "_check_engine_availability",
              "line_number": 53,
              "docstring": "Check which engines are available.",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "process_engine_dual_output",
              "line_number": 68,
              "docstring": "Process PDF with a single engine producing both markdown and JSON outputs.\n        \n        Args:\n            engine_name: Name of the engine to use\n            pdf_path: Path to PDF file\n            \n        Returns:\n            DualOutputResult with paths to both output files",
              "parameters": [
                "self",
                "engine_name",
                "pdf_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "_create_markdown_output",
              "line_number": 149,
              "docstring": "Create markdown output file for engine.",
              "parameters": [
                "self",
                "engine_name",
                "engine_result",
                "display_name"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_create_json_output",
              "line_number": 170,
              "docstring": "Create GBG-optimized JSON output file for engine.",
              "parameters": [
                "self",
                "engine_name",
                "engine_result",
                "display_name"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_extract_markdown_from_engine_result",
              "line_number": 191,
              "docstring": "Extract markdown content from engine result.",
              "parameters": [
                "self",
                "engine_name",
                "engine_result"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_extract_pymupdf_markdown",
              "line_number": 230,
              "docstring": "Extract markdown from PyMuPDF result.",
              "parameters": [
                "self",
                "engine_result"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_extract_tesseract_markdown",
              "line_number": 251,
              "docstring": "Extract markdown from Tesseract result.",
              "parameters": [
                "self",
                "engine_result"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_extract_paddleocr_markdown",
              "line_number": 276,
              "docstring": "Extract markdown from PaddleOCR result.",
              "parameters": [
                "self",
                "engine_result"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_extract_kreuzberg_markdown",
              "line_number": 301,
              "docstring": "Extract markdown from Kreuzberg result.",
              "parameters": [
                "self",
                "engine_result"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_extract_docling_markdown",
              "line_number": 331,
              "docstring": "Extract markdown from Docling result.",
              "parameters": [
                "self",
                "engine_result"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_create_gbg_optimized_json",
              "line_number": 368,
              "docstring": "Create GBG-optimized JSON structure.",
              "parameters": [
                "self",
                "engine_name",
                "engine_result"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_extract_pymupdf_gbg_blocks",
              "line_number": 407,
              "docstring": "Extract GBG-optimized blocks from PyMuPDF result.",
              "parameters": [
                "self",
                "engine_result"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_extract_ocr_gbg_blocks",
              "line_number": 430,
              "docstring": "Extract GBG-optimized blocks from OCR engines (Tesseract/PaddleOCR).",
              "parameters": [
                "self",
                "engine_result"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_extract_kreuzberg_gbg_blocks",
              "line_number": 459,
              "docstring": "Extract GBG-optimized blocks from Kreuzberg result.",
              "parameters": [
                "self",
                "engine_result"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_extract_docling_gbg_blocks",
              "line_number": 480,
              "docstring": "Extract GBG-optimized blocks from Docling result.",
              "parameters": [
                "self",
                "engine_result"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "process_all_engines_dual_output",
              "line_number": 501,
              "docstring": "Process PDF with all available engines producing dual outputs.\n        \n        Args:\n            pdf_path: Path to PDF file\n            \n        Returns:\n            Dictionary of engine results",
              "parameters": [
                "self",
                "pdf_path"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        }
      ],
      "total_functions": 2,
      "total_classes": 2,
      "has_main": false,
      "error": null
    },
    {
      "file_path": "src\\compareblocks\\engines\\gbg_guided_tesseract_engine.py",
      "module_name": "gbg_guided_tesseract_engine",
      "relative_path": "src\\compareblocks\\engines\\gbg_guided_tesseract_engine.py",
      "functions": [],
      "classes": [
        {
          "name": "OrientationResult",
          "line_number": 29,
          "docstring": "Result of orientation testing for a text block.",
          "methods": []
        },
        {
          "name": "GBGGuidedBlock",
          "line_number": 40,
          "docstring": "A block processed with GBG guidance.",
          "methods": []
        },
        {
          "name": "GBGGuidedTesseractEngine",
          "line_number": 52,
          "docstring": "Tesseract OCR engine guided by GBG analysis for optimal text extraction.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 55,
              "docstring": "Initialize the GBG-guided Tesseract engine.",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "_build_common_patterns",
              "line_number": 60,
              "docstring": "Build list of common text patterns for orientation validation.",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "extract_text_with_gbg_guidance",
              "line_number": 68,
              "docstring": "Extract text using GBG guidance for optimal OCR processing.\n        \n        Args:\n            pdf_path: Path to the PDF file\n            gbg_data: GBG analysis data for guidance\n            \n        Returns:\n            Dictionary with extracted blocks and metadata",
              "parameters": [
                "self",
                "pdf_path",
                "gbg_data"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "_process_page_with_gbg_guidance",
              "line_number": 138,
              "docstring": "Process a single page using GBG guidance.",
              "parameters": [
                "self",
                "pdf_document",
                "page_num",
                "gbg_data"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_get_gbg_blocks_for_page",
              "line_number": 178,
              "docstring": "Get GBG blocks for a specific page.",
              "parameters": [
                "self",
                "gbg_data",
                "page_num"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_process_gbg_block_region",
              "line_number": 196,
              "docstring": "Process a single GBG block region with orientation testing.",
              "parameters": [
                "self",
                "cv_image",
                "gbg_block",
                "block_id",
                "page_num"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_test_orientations",
              "line_number": 243,
              "docstring": "Test different orientations (0\u00b0, 90\u00b0, 180\u00b0, 270\u00b0) and return the best result.",
              "parameters": [
                "self",
                "region",
                "expected_text",
                "page_num"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_preprocess_for_ocr",
              "line_number": 318,
              "docstring": "Preprocess image region for optimal OCR - optimized for clear text.",
              "parameters": [
                "self",
                "image"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_count_pattern_matches",
              "line_number": 332,
              "docstring": "Count how many common patterns are found in the text.",
              "parameters": [
                "self",
                "text"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_calculate_orientation_confidence",
              "line_number": 343,
              "docstring": "Calculate overall confidence for an orientation.",
              "parameters": [
                "self",
                "text",
                "expected_text",
                "word_count",
                "pattern_matches",
                "ocr_confidence"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_calculate_orientation_distribution",
              "line_number": 371,
              "docstring": "Calculate distribution of orientations used.",
              "parameters": [
                "self",
                "blocks"
              ],
              "is_private": true,
              "is_dunder": false
            }
          ]
        }
      ],
      "total_functions": 0,
      "total_classes": 3,
      "has_main": false,
      "error": null
    },
    {
      "file_path": "src\\compareblocks\\engines\\gbg_integrated_processor.py",
      "module_name": "gbg_integrated_processor",
      "relative_path": "src\\compareblocks\\engines\\gbg_integrated_processor.py",
      "functions": [
        {
          "name": "process_engines_with_gbg_integration",
          "line_number": 546,
          "docstring": "Process engines and integrate into GBG analysis.",
          "parameters": [
            "pdf_path"
          ],
          "is_private": false,
          "is_main": false
        }
      ],
      "classes": [
        {
          "name": "GBGIntegratedResult",
          "line_number": 22,
          "docstring": "Result from GBG-integrated engine processing.",
          "methods": []
        },
        {
          "name": "GBGIntegratedEngineProcessor",
          "line_number": 30,
          "docstring": "Processes engines and integrates results into GBG analysis container.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 33,
              "docstring": "Initialize the GBG-integrated processor.",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "process_engines_with_gbg_integration",
              "line_number": 39,
              "docstring": "Process all engines and integrate results into GBG analysis container.\n        \n        Args:\n            pdf_path: Path to PDF file\n            \n        Returns:\n            GBGIntegratedResult with integrated analysis",
              "parameters": [
                "self",
                "pdf_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "_ensure_gbg_analysis_exists",
              "line_number": 85,
              "docstring": "Ensure GBG analysis file exists, create if needed.",
              "parameters": [
                "self",
                "pdf_path"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_integrate_engines_into_gbg_analysis",
              "line_number": 98,
              "docstring": "Integrate engine data into the main GBG analysis file.",
              "parameters": [
                "self",
                "gbg_analysis_path",
                "engine_results"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_create_engine_associations",
              "line_number": 170,
              "docstring": "Create associations between engine blocks and GBG blocks.",
              "parameters": [
                "self",
                "gbg_data",
                "engine_data",
                "engine_name"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_create_engine_comparisons",
              "line_number": 303,
              "docstring": "Create comparisons between engine and GBG results.",
              "parameters": [
                "self",
                "gbg_data",
                "engine_data",
                "engine_name"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_calculate_text_similarity",
              "line_number": 364,
              "docstring": "Calculate simple text similarity score.",
              "parameters": [
                "self",
                "text1",
                "text2"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_process_engines_with_gbg_guidance",
              "line_number": 380,
              "docstring": "Process engines with GBG guidance where applicable.",
              "parameters": [
                "self",
                "pdf_path",
                "gbg_data"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_process_tesseract_with_gbg_guidance",
              "line_number": 404,
              "docstring": "Process Tesseract with GBG guidance.",
              "parameters": [
                "self",
                "pdf_path",
                "gbg_data"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_save_tesseract_markdown",
              "line_number": 464,
              "docstring": "Save Tesseract results as Markdown.",
              "parameters": [
                "self",
                "extraction_result",
                "markdown_path"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_create_integration_summary",
              "line_number": 504,
              "docstring": "Create summary of integration process.",
              "parameters": [
                "self",
                "engine_results",
                "gbg_analysis_path"
              ],
              "is_private": true,
              "is_dunder": false
            }
          ]
        }
      ],
      "total_functions": 1,
      "total_classes": 2,
      "has_main": false,
      "error": null
    },
    {
      "file_path": "src\\compareblocks\\engines\\integrated_processor.py",
      "module_name": "integrated_processor",
      "relative_path": "src\\compareblocks\\engines\\integrated_processor.py",
      "functions": [
        {
          "name": "process_pdf_with_integrated_engines",
          "line_number": 370,
          "docstring": "Process PDF with integrated engine approach.",
          "parameters": [
            "pdf_path"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "save_integrated_engine_processing",
          "line_number": 376,
          "docstring": "Process and save integrated engine results.",
          "parameters": [
            "pdf_path",
            "output_path"
          ],
          "is_private": false,
          "is_main": false
        }
      ],
      "classes": [
        {
          "name": "BlockAlignment",
          "line_number": 24,
          "docstring": "Alignment of engine output to established blocks.",
          "methods": []
        },
        {
          "name": "IntegratedResult",
          "line_number": 35,
          "docstring": "Result from integrated engine processing.",
          "methods": []
        },
        {
          "name": "IntegratedEngineProcessor",
          "line_number": 44,
          "docstring": "Processes PDF with PyMuPDF first, then aligns other engines to established blocks.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 47,
              "docstring": "Initialize the integrated processor.",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "_check_engine_availability",
              "line_number": 63,
              "docstring": "Check which engines are available.",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "process_pdf_integrated",
              "line_number": 75,
              "docstring": "Process PDF with integrated approach: PyMuPDF first, then align other engines.\n        \n        Args:\n            pdf_path: Path to PDF file\n            \n        Returns:\n            IntegratedResult with all engine outputs aligned to established blocks",
              "parameters": [
                "self",
                "pdf_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "_extract_blocks_from_pymupdf",
              "line_number": 154,
              "docstring": "Extract block structure from PyMuPDF results.",
              "parameters": [
                "self",
                "pymupdf_results"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_align_engine_to_blocks",
              "line_number": 176,
              "docstring": "Align engine output to established blocks.",
              "parameters": [
                "self",
                "engine_name",
                "engine_result",
                "established_blocks"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_extract_texts_from_engine_result",
              "line_number": 207,
              "docstring": "Extract text content from engine-specific result format.",
              "parameters": [
                "self",
                "engine_name",
                "engine_result"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_create_processing_summary",
              "line_number": 275,
              "docstring": "Create summary of integrated processing.",
              "parameters": [
                "self",
                "established_blocks",
                "engine_results",
                "block_alignments"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "save_integrated_results",
              "line_number": 321,
              "docstring": "Save integrated processing results.\n        \n        Args:\n            result: IntegratedResult to save\n            output_path: Path to save results\n            \n        Returns:\n            Path to saved file",
              "parameters": [
                "self",
                "result",
                "output_path"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        }
      ],
      "total_functions": 2,
      "total_classes": 3,
      "has_main": false,
      "error": null
    },
    {
      "file_path": "src\\compareblocks\\engines\\kreuzberg_engine.py",
      "module_name": "kreuzberg_engine",
      "relative_path": "src\\compareblocks\\engines\\kreuzberg_engine.py",
      "functions": [
        {
          "name": "extract_kreuzberg",
          "line_number": 253,
          "docstring": "Extract text using Kreuzberg.",
          "parameters": [
            "pdf_path",
            "ocr_backend",
            "output_format"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "save_kreuzberg_extraction",
          "line_number": 261,
          "docstring": "Extract and save Kreuzberg data.",
          "parameters": [
            "pdf_path",
            "output_path",
            "ocr_backend",
            "output_format"
          ],
          "is_private": false,
          "is_main": false
        }
      ],
      "classes": [
        {
          "name": "KreuzbergBlock",
          "line_number": 23,
          "docstring": "Kreuzberg extraction block data.",
          "methods": []
        },
        {
          "name": "KreuzbergPage",
          "line_number": 33,
          "docstring": "Kreuzberg page data.",
          "methods": []
        },
        {
          "name": "KreuzbergEngine",
          "line_number": 40,
          "docstring": "Kreuzberg document intelligence extraction engine.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 43,
              "docstring": "Initialize Kreuzberg engine.\n        \n        Args:\n            ocr_backend: OCR backend to use ('tesseract', 'easyocr')\n            output_format: Output format ('text', 'markdown', 'json')",
              "parameters": [
                "self",
                "ocr_backend",
                "output_format"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "is_available",
              "line_number": 58,
              "docstring": "Check if Kreuzberg is available.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "extract_pdf",
              "line_number": 62,
              "docstring": "Extract text from PDF using Kreuzberg.\n        \n        Args:\n            pdf_path: Path to PDF file (defaults to configured target PDF)\n            \n        Returns:\n            Kreuzberg extraction results",
              "parameters": [
                "self",
                "pdf_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "_create_blocks_from_content",
              "line_number": 162,
              "docstring": "Create blocks from content text.",
              "parameters": [
                "self",
                "content"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_get_kreuzberg_version",
              "line_number": 182,
              "docstring": "Get Kreuzberg version.",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_generate_summary",
              "line_number": 190,
              "docstring": "Generate Kreuzberg extraction summary.",
              "parameters": [
                "self",
                "results"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "save_extraction",
              "line_number": 210,
              "docstring": "Extract and save Kreuzberg data.\n        \n        Args:\n            pdf_path: Path to PDF file\n            output_path: Path to save results\n            \n        Returns:\n            Path to saved file",
              "parameters": [
                "self",
                "pdf_path",
                "output_path"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        }
      ],
      "total_functions": 2,
      "total_classes": 3,
      "has_main": false,
      "error": null
    },
    {
      "file_path": "src\\compareblocks\\engines\\manager.py",
      "module_name": "manager",
      "relative_path": "src\\compareblocks\\engines\\manager.py",
      "functions": [
        {
          "name": "extract_with_all_engines",
          "line_number": 386,
          "docstring": "Extract text using all available engines.",
          "parameters": [
            "pdf_path",
            "parallel"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "extract_with_engines",
          "line_number": 392,
          "docstring": "Extract text using specified engines.",
          "parameters": [
            "engine_names",
            "pdf_path",
            "parallel"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "get_available_engines",
          "line_number": 399,
          "docstring": "Get list of available extraction engines.",
          "parameters": [],
          "is_private": false,
          "is_main": false
        }
      ],
      "classes": [
        {
          "name": "EngineResult",
          "line_number": 26,
          "docstring": "Result from a single extraction engine.",
          "methods": []
        },
        {
          "name": "ExtractionEngineManager",
          "line_number": 36,
          "docstring": "Manages multiple PDF extraction engines.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 39,
              "docstring": "Initialize the engine manager.",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "_detect_available_engines",
              "line_number": 44,
              "docstring": "Detect which engines are available.",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "get_available_engines",
              "line_number": 84,
              "docstring": "Get list of available engine names.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "extract_with_engine",
              "line_number": 88,
              "docstring": "Extract text using a specific engine.\n        \n        Args:\n            engine_name: Name of the engine to use\n            pdf_path: Path to PDF file\n            \n        Returns:\n            EngineResult with extraction results",
              "parameters": [
                "self",
                "engine_name",
                "pdf_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "extract_with_all_engines",
              "line_number": 163,
              "docstring": "Extract text using all available engines.\n        \n        Args:\n            pdf_path: Path to PDF file\n            parallel: Whether to run engines in parallel\n            \n        Returns:\n            Dictionary of engine results",
              "parameters": [
                "self",
                "pdf_path",
                "parallel"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "extract_with_engines",
              "line_number": 228,
              "docstring": "Extract text using specified engines.\n        \n        Args:\n            engine_names: List of engine names to use\n            pdf_path: Path to PDF file\n            parallel: Whether to run engines in parallel\n            \n        Returns:\n            Dictionary of engine results",
              "parameters": [
                "self",
                "engine_names",
                "pdf_path",
                "parallel"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "create_extraction_summary",
              "line_number": 294,
              "docstring": "Create a summary of all extraction results.\n        \n        Args:\n            results: Dictionary of engine results\n            pdf_path: Path to PDF file\n            \n        Returns:\n            Extraction summary",
              "parameters": [
                "self",
                "results",
                "pdf_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "save_extraction_summary",
              "line_number": 349,
              "docstring": "Save extraction summary to file.\n        \n        Args:\n            results: Dictionary of engine results\n            pdf_path: Path to PDF file\n            output_path: Path to save summary\n            \n        Returns:\n            Path to saved summary file",
              "parameters": [
                "self",
                "results",
                "pdf_path",
                "output_path"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        }
      ],
      "total_functions": 3,
      "total_classes": 2,
      "has_main": false,
      "error": null
    },
    {
      "file_path": "src\\compareblocks\\engines\\paddleocr_engine.py",
      "module_name": "paddleocr_engine",
      "relative_path": "src\\compareblocks\\engines\\paddleocr_engine.py",
      "functions": [
        {
          "name": "extract_paddleocr",
          "line_number": 339,
          "docstring": "Extract text using PaddleOCR.",
          "parameters": [
            "pdf_path",
            "lang",
            "use_gpu"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "save_paddleocr_extraction",
          "line_number": 346,
          "docstring": "Extract and save PaddleOCR data.",
          "parameters": [
            "pdf_path",
            "output_path",
            "lang",
            "use_gpu"
          ],
          "is_private": false,
          "is_main": false
        }
      ],
      "classes": [
        {
          "name": "PaddleOCRBlock",
          "line_number": 25,
          "docstring": "PaddleOCR block data.",
          "methods": []
        },
        {
          "name": "PaddleOCRPage",
          "line_number": 35,
          "docstring": "PaddleOCR page data.",
          "methods": []
        },
        {
          "name": "PaddleOCREngine",
          "line_number": 45,
          "docstring": "PaddleOCR extraction engine.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 48,
              "docstring": "Initialize PaddleOCR engine.\n        \n        Args:\n            lang: Language code for OCR\n            use_gpu: Whether to use GPU acceleration",
              "parameters": [
                "self",
                "lang",
                "use_gpu"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "_get_ocr_engine",
              "line_number": 64,
              "docstring": "Get or create PaddleOCR engine instance.",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "is_available",
              "line_number": 79,
              "docstring": "Check if PaddleOCR is available.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "extract_pdf",
              "line_number": 90,
              "docstring": "Extract text from PDF using PaddleOCR.\n        \n        Args:\n            pdf_path: Path to PDF file (defaults to configured target PDF)\n            \n        Returns:\n            PaddleOCR extraction results",
              "parameters": [
                "self",
                "pdf_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "_extract_page_ocr",
              "line_number": 178,
              "docstring": "Extract OCR data from a single page using PaddleOCR.",
              "parameters": [
                "self",
                "page",
                "page_num",
                "ocr"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_polygon_to_bbox",
              "line_number": 251,
              "docstring": "Convert polygon coordinates to bounding box.",
              "parameters": [
                "self",
                "polygon"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_get_paddleocr_version",
              "line_number": 266,
              "docstring": "Get PaddleOCR version.",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_generate_summary",
              "line_number": 274,
              "docstring": "Generate PaddleOCR extraction summary.",
              "parameters": [
                "self",
                "all_blocks",
                "page_summaries",
                "total_pages"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "save_extraction",
              "line_number": 296,
              "docstring": "Extract and save PaddleOCR data.\n        \n        Args:\n            pdf_path: Path to PDF file\n            output_path: Path to save results\n            \n        Returns:\n            Path to saved file",
              "parameters": [
                "self",
                "pdf_path",
                "output_path"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        }
      ],
      "total_functions": 2,
      "total_classes": 3,
      "has_main": false,
      "error": null
    },
    {
      "file_path": "src\\compareblocks\\engines\\pymupdf_engine.py",
      "module_name": "pymupdf_engine",
      "relative_path": "src\\compareblocks\\engines\\pymupdf_engine.py",
      "functions": [
        {
          "name": "extract_raw_pymupdf",
          "line_number": 249,
          "docstring": "Extract raw PyMuPDF data from PDF.",
          "parameters": [
            "pdf_path"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "save_raw_pymupdf_extraction",
          "line_number": 255,
          "docstring": "Extract and save raw PyMuPDF data.",
          "parameters": [
            "pdf_path",
            "output_path"
          ],
          "is_private": false,
          "is_main": false
        }
      ],
      "classes": [
        {
          "name": "PyMuPDFBlock",
          "line_number": 18,
          "docstring": "Raw PyMuPDF block data.",
          "methods": []
        },
        {
          "name": "PyMuPDFPage",
          "line_number": 29,
          "docstring": "Raw PyMuPDF page data.",
          "methods": []
        },
        {
          "name": "PyMuPDFEngine",
          "line_number": 39,
          "docstring": "Raw PyMuPDF extraction engine.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 42,
              "docstring": "Initialize PyMuPDF engine.",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "extract_pdf",
              "line_number": 46,
              "docstring": "Extract raw PyMuPDF data from PDF.\n        \n        Args:\n            pdf_path: Path to PDF file (defaults to configured target PDF)\n            \n        Returns:\n            Raw PyMuPDF extraction results",
              "parameters": [
                "self",
                "pdf_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "_extract_page_data",
              "line_number": 119,
              "docstring": "Extract raw data from a single page.",
              "parameters": [
                "self",
                "page",
                "page_num"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_generate_summary",
              "line_number": 191,
              "docstring": "Generate extraction summary.",
              "parameters": [
                "self",
                "all_blocks",
                "page_summaries",
                "total_pages"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "save_extraction",
              "line_number": 211,
              "docstring": "Extract and save raw PyMuPDF data.\n        \n        Args:\n            pdf_path: Path to PDF file\n            output_path: Path to save results\n            \n        Returns:\n            Path to saved file",
              "parameters": [
                "self",
                "pdf_path",
                "output_path"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        }
      ],
      "total_functions": 2,
      "total_classes": 3,
      "has_main": false,
      "error": null
    },
    {
      "file_path": "src\\compareblocks\\engines\\tesseract_engine.py",
      "module_name": "tesseract_engine",
      "relative_path": "src\\compareblocks\\engines\\tesseract_engine.py",
      "functions": [
        {
          "name": "extract_tesseract_ocr",
          "line_number": 352,
          "docstring": "Extract text using Tesseract OCR.",
          "parameters": [
            "pdf_path",
            "dpi",
            "lang"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "save_tesseract_extraction",
          "line_number": 359,
          "docstring": "Extract and save Tesseract OCR data.",
          "parameters": [
            "pdf_path",
            "output_path",
            "dpi",
            "lang"
          ],
          "is_private": false,
          "is_main": false
        }
      ],
      "classes": [
        {
          "name": "TesseractBlock",
          "line_number": 26,
          "docstring": "Tesseract OCR block data.",
          "methods": []
        },
        {
          "name": "TesseractPage",
          "line_number": 36,
          "docstring": "Tesseract OCR page data.",
          "methods": []
        },
        {
          "name": "TesseractEngine",
          "line_number": 46,
          "docstring": "Tesseract OCR extraction engine.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 49,
              "docstring": "Initialize Tesseract engine.\n        \n        Args:\n            dpi: DPI for PDF to image conversion\n            lang: Tesseract language code",
              "parameters": [
                "self",
                "dpi",
                "lang"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "is_available",
              "line_number": 64,
              "docstring": "Check if Tesseract is available.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "extract_pdf",
              "line_number": 77,
              "docstring": "Extract text from PDF using Tesseract OCR.\n        \n        Args:\n            pdf_path: Path to PDF file (defaults to configured target PDF)\n            \n        Returns:\n            Tesseract OCR extraction results",
              "parameters": [
                "self",
                "pdf_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "_extract_page_ocr",
              "line_number": 158,
              "docstring": "Extract OCR data from a single page.",
              "parameters": [
                "self",
                "page",
                "page_num"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_get_tesseract_version",
              "line_number": 272,
              "docstring": "Get Tesseract version.",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_generate_summary",
              "line_number": 281,
              "docstring": "Generate OCR extraction summary.",
              "parameters": [
                "self",
                "all_blocks",
                "page_summaries",
                "total_pages"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "save_extraction",
              "line_number": 305,
              "docstring": "Extract and save Tesseract OCR data.\n        \n        Args:\n            pdf_path: Path to PDF file\n            output_path: Path to save results\n            \n        Returns:\n            Path to saved file",
              "parameters": [
                "self",
                "pdf_path",
                "output_path"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        }
      ],
      "total_functions": 2,
      "total_classes": 3,
      "has_main": false,
      "error": null
    },
    {
      "file_path": "src\\compareblocks\\features\\anomaly.py",
      "module_name": "anomaly",
      "relative_path": "src\\compareblocks\\features\\anomaly.py",
      "functions": [],
      "classes": [
        {
          "name": "AnomalyFeatures",
          "line_number": 15,
          "docstring": "Anomaly detection features for text variations.",
          "methods": [
            {
              "name": "to_dict",
              "line_number": 26,
              "docstring": "Convert features to dictionary format.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        },
        {
          "name": "AnomalyDetector",
          "line_number": 40,
          "docstring": "Detects anomalies in text that indicate poor extraction quality.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 43,
              "docstring": "Initialize the anomaly detector.",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "calculate_entropy",
              "line_number": 53,
              "docstring": "Calculate Shannon entropy of text.\n        \n        Args:\n            text: Input text\n            \n        Returns:\n            Entropy in bits",
              "parameters": [
                "self",
                "text"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "calculate_repetition_score",
              "line_number": 79,
              "docstring": "Calculate repetition score based on repeated patterns.\n        \n        Args:\n            text: Input text\n            \n        Returns:\n            Repetition score (0.0 = no repetition, 1.0 = highly repetitive)",
              "parameters": [
                "self",
                "text"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "calculate_space_ratio",
              "line_number": 119,
              "docstring": "Calculate ratio of whitespace characters to total characters.\n        \n        Args:\n            text: Input text\n            \n        Returns:\n            Space ratio (0.0 to 1.0)",
              "parameters": [
                "self",
                "text"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "calculate_char_per_line_ratio",
              "line_number": 135,
              "docstring": "Calculate average characters per line.\n        \n        Args:\n            text: Input text\n            \n        Returns:\n            Average characters per line",
              "parameters": [
                "self",
                "text"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "calculate_special_char_ratio",
              "line_number": 157,
              "docstring": "Calculate ratio of special characters (non-alphanumeric, non-space).\n        \n        Args:\n            text: Input text\n            \n        Returns:\n            Special character ratio (0.0 to 1.0)",
              "parameters": [
                "self",
                "text"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "calculate_digit_ratio",
              "line_number": 174,
              "docstring": "Calculate ratio of digit characters to total characters.\n        \n        Args:\n            text: Input text\n            \n        Returns:\n            Digit ratio (0.0 to 1.0)",
              "parameters": [
                "self",
                "text"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "detect_specific_patterns",
              "line_number": 190,
              "docstring": "Detect specific anomaly patterns in text.\n        \n        Args:\n            text: Input text\n            \n        Returns:\n            List of detected anomaly pattern names",
              "parameters": [
                "self",
                "text"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "extract_anomaly_features",
              "line_number": 251,
              "docstring": "Extract anomaly detection features from text.\n        \n        Args:\n            text: The text to analyze\n            \n        Returns:\n            AnomalyFeatures object with computed metrics",
              "parameters": [
                "self",
                "text"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "extract_features_for_variations",
              "line_number": 328,
              "docstring": "Extract anomaly features for multiple variations.\n        \n        Args:\n            variations: List of text variations\n            \n        Returns:\n            List of AnomalyFeatures",
              "parameters": [
                "self",
                "variations"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_anomaly_statistics",
              "line_number": 340,
              "docstring": "Get anomaly statistics for a set of variations.\n        \n        Args:\n            variations: List of text variations\n            \n        Returns:\n            Dictionary with anomaly statistics",
              "parameters": [
                "self",
                "variations"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "rank_by_anomaly_score",
              "line_number": 390,
              "docstring": "Rank variations by anomaly score (lower is better).\n        \n        Args:\n            variations: List of text variations\n            \n        Returns:\n            List of (index, anomaly_score) tuples sorted by anomaly score",
              "parameters": [
                "self",
                "variations"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "is_anomalous",
              "line_number": 412,
              "docstring": "Check if text is anomalous based on threshold.\n        \n        Args:\n            text: Input text\n            threshold: Anomaly score threshold (default 0.5)\n            \n        Returns:\n            True if text is considered anomalous",
              "parameters": [
                "self",
                "text",
                "threshold"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        }
      ],
      "total_functions": 0,
      "total_classes": 2,
      "has_main": false,
      "error": null
    },
    {
      "file_path": "src\\compareblocks\\features\\consistency.py",
      "module_name": "consistency",
      "relative_path": "src\\compareblocks\\features\\consistency.py",
      "functions": [
        {
          "name": "track_character_consistency",
          "line_number": 614,
          "docstring": "Convenience function to track character consistency for a block.\n    \n    Args:\n        block_id: Unique identifier for the block\n        variations: List of text variations\n        override_terms: Optional list of override terms\n        \n    Returns:\n        CharacterConsistency object",
          "parameters": [
            "block_id",
            "variations",
            "override_terms"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "calculate_block_consistency_for_json",
          "line_number": 634,
          "docstring": "Calculate consistency metrics for a block formatted for JSON output.\n    \n    Args:\n        block_id: Unique identifier for the block\n        variations: List of text variations for this block\n        override_terms: Optional list of override terms\n        normalize_for_comparison: Whether to normalize text before comparison\n        \n    Returns:\n        Dictionary with consistency metrics formatted for JSON inclusion",
          "parameters": [
            "block_id",
            "variations",
            "override_terms",
            "normalize_for_comparison"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "calculate_dynamic_consistency_percentage",
          "line_number": 681,
          "docstring": "Calculate dynamic consistency percentages across multiple blocks.\n    \n    Args:\n        consistencies: List of consistency objects\n        \n    Returns:\n        Dictionary with overall consistency metrics",
          "parameters": [
            "consistencies"
          ],
          "is_private": false,
          "is_main": false
        }
      ],
      "classes": [
        {
          "name": "CharacterConsistency",
          "line_number": 16,
          "docstring": "Character-level consistency metrics for a text block.",
          "methods": [
            {
              "name": "to_dict",
              "line_number": 30,
              "docstring": "Convert to dictionary format.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        },
        {
          "name": "WordConsistency",
          "line_number": 48,
          "docstring": "Word-level consistency tracking.",
          "methods": []
        },
        {
          "name": "CharacterConsistencyTracker",
          "line_number": 58,
          "docstring": "Tracks character-level consistency across all associated files.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 61,
              "docstring": "Initialize consistency tracker.",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "add_override_terms",
              "line_number": 70,
              "docstring": "Add terms where consistency trumps spelling.",
              "parameters": [
                "self",
                "terms"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "is_override_term",
              "line_number": 74,
              "docstring": "Check if word is an override term (acronym/domain term).",
              "parameters": [
                "self",
                "word"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "_normalize_variations_for_comparison",
              "line_number": 89,
              "docstring": "Normalize text variations for consistent character-level comparison.\n        Handles whitespace, newlines, and special characters that shouldn't affect consistency.\n        \n        Args:\n            variations: List of text variations to normalize\n            \n        Returns:\n            List of normalized text variations",
              "parameters": [
                "self",
                "variations"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_additional_consistency_cleanup",
              "line_number": 128,
              "docstring": "Additional text cleanup specifically for consistency comparison.\n        \n        Args:\n            text: Text to clean up\n            \n        Returns:\n            Cleaned text",
              "parameters": [
                "self",
                "text"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_calculate_multiple_scoring_methods",
              "line_number": 153,
              "docstring": "Calculate multiple scoring methods to determine accuracy from different perspectives.\n        \n        Args:\n            variations: Normalized text variations\n            reference_text: Reference text for comparison\n            \n        Returns:\n            Dictionary with different scoring method results",
              "parameters": [
                "self",
                "variations",
                "reference_text"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_longest_common_subsequence_length",
              "line_number": 208,
              "docstring": "Calculate the length of the longest common subsequence.",
              "parameters": [
                "self",
                "text1",
                "text2"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_levenshtein_distance",
              "line_number": 222,
              "docstring": "Calculate the Levenshtein (edit) distance between two strings.",
              "parameters": [
                "self",
                "text1",
                "text2"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_jaccard_similarity_chars",
              "line_number": 243,
              "docstring": "Calculate Jaccard similarity using character n-grams.",
              "parameters": [
                "self",
                "text1",
                "text2",
                "n"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "calculate_character_consistency",
              "line_number": 262,
              "docstring": "Calculate character-by-character consistency across variations for a single block.\n        Uses multiple scoring methods to determine accuracy from different perspectives.\n        \n        Args:\n            variations: List of text variations for the same block to compare\n            normalize_for_comparison: Whether to apply normalization before comparison\n                                    (handles whitespace, newlines, special characters)\n            include_multiple_methods: Whether to calculate multiple scoring methods\n            \n        Returns:\n            Tuple of (primary_consistency_score, details_dict_with_multiple_methods)",
              "parameters": [
                "self",
                "variations",
                "normalize_for_comparison",
                "include_multiple_methods"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "calculate_word_consistency",
              "line_number": 345,
              "docstring": "Calculate word-level consistency with spelling accuracy.\n        \n        Args:\n            variations: List of text variations to compare\n            \n        Returns:\n            Tuple of (consistency_score, word_details)",
              "parameters": [
                "self",
                "variations"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "_are_spelling_variants",
              "line_number": 405,
              "docstring": "Check if two words are likely spelling variants.",
              "parameters": [
                "self",
                "word1",
                "word2"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "calculate_spelling_accuracy",
              "line_number": 414,
              "docstring": "Calculate spelling accuracy score based on word consistency.\n        \n        Args:\n            word_details: Dictionary of word consistency details\n            \n        Returns:\n            Spelling accuracy score (0.0 to 1.0)",
              "parameters": [
                "self",
                "word_details"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "track_consistency_for_block_with_context",
              "line_number": 443,
              "docstring": "Track consistency for a block with optional surrounding block context.\n        \n        Args:\n            block_id: Unique identifier for the block\n            variations: List of text variations for this block\n            surrounding_blocks: Optional dict of {position: [variations]} for context\n                               where position can be 'before' or 'after'\n            \n        Returns:\n            CharacterConsistency object with all metrics",
              "parameters": [
                "self",
                "block_id",
                "variations",
                "surrounding_blocks"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "track_consistency_for_block",
              "line_number": 479,
              "docstring": "Track comprehensive consistency metrics for a block.\n        \n        Args:\n            block_id: Unique identifier for the block\n            variations: List of text variations for this block\n            \n        Returns:\n            CharacterConsistency object with all metrics",
              "parameters": [
                "self",
                "block_id",
                "variations"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "update_consistency_with_new_files",
              "line_number": 535,
              "docstring": "Update consistency metrics when new associated files are added.\n        \n        Args:\n            existing_consistency: Current consistency metrics\n            new_variations: New variations to include\n            \n        Returns:\n            Updated CharacterConsistency object",
              "parameters": [
                "self",
                "existing_consistency",
                "new_variations"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        },
        {
          "name": "ConsistencyOverrideManager",
          "line_number": 558,
          "docstring": "Manages consistency override system for acronyms and domain terms.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 561,
              "docstring": "Initialize override manager.",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "add_domain_terms",
              "line_number": 567,
              "docstring": "Add domain-specific terms.",
              "parameters": [
                "self",
                "terms"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "add_acronyms",
              "line_number": 571,
              "docstring": "Add known acronyms.",
              "parameters": [
                "self",
                "acronyms"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "add_custom_overrides",
              "line_number": 575,
              "docstring": "Add custom override terms.",
              "parameters": [
                "self",
                "terms"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "should_override_spelling",
              "line_number": 579,
              "docstring": "Determine if consistency should trump spelling for a word.\n        \n        Args:\n            word: The word to check\n            consistency_score: Consistency score for the word\n            spelling_score: Spelling accuracy score for the word\n            \n        Returns:\n            True if consistency should override spelling concerns",
              "parameters": [
                "self",
                "word",
                "consistency_score",
                "spelling_score"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_all_override_terms",
              "line_number": 607,
              "docstring": "Get all override terms.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        }
      ],
      "total_functions": 3,
      "total_classes": 4,
      "has_main": false,
      "error": null
    },
    {
      "file_path": "src\\compareblocks\\features\\consistency_integration.py",
      "module_name": "consistency_integration",
      "relative_path": "src\\compareblocks\\features\\consistency_integration.py",
      "functions": [
        {
          "name": "create_consistency_integration_manager",
          "line_number": 395,
          "docstring": "Create a new consistency integration manager with default settings.",
          "parameters": [],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "track_pdf_consistency",
          "line_number": 400,
          "docstring": "Convenience function to track consistency for all blocks in a PDF.\n    \n    Args:\n        pdf_path: Path to the PDF file\n        block_variations: Dictionary mapping block_id to list of variations\n        \n    Returns:\n        Dictionary mapping block_id to CharacterConsistency",
          "parameters": [
            "pdf_path",
            "block_variations"
          ],
          "is_private": false,
          "is_main": false
        }
      ],
      "classes": [
        {
          "name": "BlockConsistencyState",
          "line_number": 19,
          "docstring": "State tracking for block consistency across associated files.",
          "methods": []
        },
        {
          "name": "ConsistencyIntegrationManager",
          "line_number": 29,
          "docstring": "Manages integration between consistency tracking and association management.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 32,
              "docstring": "Initialize the integration manager.",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "_setup_default_overrides",
              "line_number": 44,
              "docstring": "Set up default override terms for education domain.",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "track_block_consistency_with_associations",
              "line_number": 63,
              "docstring": "Track block consistency including all associated files for the PDF.\n        Focuses on block-level comparisons across different extraction sources.\n        \n        Args:\n            pdf_path: Path to the PDF file\n            block_id: Unique identifier for the block\n            block_variations: Text variations for this specific block from different engines\n            block_position: Optional position of block in document for context\n            \n        Returns:\n            CharacterConsistency object with comprehensive metrics",
              "parameters": [
                "self",
                "pdf_path",
                "block_id",
                "block_variations",
                "block_position"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "_extract_block_equivalent_content",
              "line_number": 118,
              "docstring": "Extract block-equivalent content from full text based on position.\n        This is a simplified implementation - in practice, this would use\n        more sophisticated block mapping algorithms.\n        \n        Args:\n            full_text: Full text content from associated file\n            block_position: Position of the block in the document\n            \n        Returns:\n            Block-equivalent text content or None",
              "parameters": [
                "self",
                "full_text",
                "block_position"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "track_block_consistency_with_surrounding_context",
              "line_number": 142,
              "docstring": "Track block consistency with surrounding block context when needed.\n        \n        Args:\n            pdf_path: Path to the PDF file\n            block_id: Unique identifier for the block\n            block_variations: Text variations for this block\n            surrounding_blocks: Optional dict with 'before' and 'after' block variations\n                              Format: {'before': {'block_id': [variations]}, 'after': {'block_id': [variations]}}\n            \n        Returns:\n            CharacterConsistency object with context-aware metrics",
              "parameters": [
                "self",
                "pdf_path",
                "block_id",
                "block_variations",
                "surrounding_blocks"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "update_consistency_with_new_association",
              "line_number": 198,
              "docstring": "Update block consistency when a new associated file is added.\n        \n        Args:\n            pdf_path: Path to the PDF file\n            block_id: Block identifier\n            new_file_path: Path to the new associated file\n            \n        Returns:\n            Updated CharacterConsistency object",
              "parameters": [
                "self",
                "pdf_path",
                "block_id",
                "new_file_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_dynamic_consistency_percentages",
              "line_number": 246,
              "docstring": "Get dynamic consistency percentages for all blocks in a PDF.\n        \n        Args:\n            pdf_path: Path to the PDF file\n            \n        Returns:\n            Dictionary with overall consistency metrics",
              "parameters": [
                "self",
                "pdf_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "apply_consistency_overrides",
              "line_number": 273,
              "docstring": "Apply consistency overrides for specific terms in a block.\n        \n        Args:\n            block_id: Block identifier\n            override_terms: List of terms to override",
              "parameters": [
                "self",
                "block_id",
                "override_terms"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_consistency_summary_for_pdf",
              "line_number": 293,
              "docstring": "Get comprehensive consistency summary for a PDF.\n        \n        Args:\n            pdf_path: Path to the PDF file\n            \n        Returns:\n            Dictionary with consistency summary",
              "parameters": [
                "self",
                "pdf_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "validate_consistency_state",
              "line_number": 341,
              "docstring": "Validate consistency state for a PDF and identify issues.\n        \n        Args:\n            pdf_path: Path to the PDF file\n            \n        Returns:\n            Dictionary with validation results",
              "parameters": [
                "self",
                "pdf_path"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        }
      ],
      "total_functions": 2,
      "total_classes": 2,
      "has_main": false,
      "error": null
    },
    {
      "file_path": "src\\compareblocks\\features\\context.py",
      "module_name": "context",
      "relative_path": "src\\compareblocks\\features\\context.py",
      "functions": [],
      "classes": [
        {
          "name": "ContextFeatures",
          "line_number": 15,
          "docstring": "Context similarity features for text variations.",
          "methods": [
            {
              "name": "to_dict",
              "line_number": 24,
              "docstring": "Convert features to dictionary format.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        },
        {
          "name": "ContextSimilarityExtractor",
          "line_number": 36,
          "docstring": "Extracts context similarity features from text variations.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 39,
              "docstring": "Initialize the context similarity extractor.",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "_extract_keywords",
              "line_number": 123,
              "docstring": "Extract meaningful keywords from text.\n        \n        Args:\n            text: Input text\n            min_length: Minimum word length to consider\n            \n        Returns:\n            List of keywords",
              "parameters": [
                "self",
                "text",
                "min_length"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_calculate_keyword_overlap",
              "line_number": 152,
              "docstring": "Calculate overlap ratio between two keyword lists.\n        \n        Args:\n            keywords1: First keyword list\n            keywords2: Second keyword list\n            \n        Returns:\n            Overlap ratio (0.0 to 1.0)",
              "parameters": [
                "self",
                "keywords1",
                "keywords2"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_calculate_cosine_similarity",
              "line_number": 174,
              "docstring": "Calculate cosine similarity between two keyword lists.\n        \n        Args:\n            keywords1: First keyword list\n            keywords2: Second keyword list\n            \n        Returns:\n            Cosine similarity (0.0 to 1.0)",
              "parameters": [
                "self",
                "keywords1",
                "keywords2"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_identify_domain_context",
              "line_number": 211,
              "docstring": "Identify the domain context of keywords.\n        \n        Args:\n            keywords: List of keywords\n            \n        Returns:\n            Tuple of (domain_name, confidence_score)",
              "parameters": [
                "self",
                "keywords"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_calculate_semantic_coherence",
              "line_number": 238,
              "docstring": "Calculate semantic coherence of text based on keyword consistency.\n        \n        Args:\n            text: Input text\n            \n        Returns:\n            Coherence score (0.0 to 1.0)",
              "parameters": [
                "self",
                "text"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "extract_context_features",
              "line_number": 281,
              "docstring": "Extract context similarity features from text.\n        \n        Args:\n            text: The text to analyze\n            context_texts: Optional list of context texts for comparison\n            \n        Returns:\n            ContextFeatures object with computed metrics",
              "parameters": [
                "self",
                "text",
                "context_texts"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "extract_features_for_variations",
              "line_number": 358,
              "docstring": "Extract context features for multiple variations.\n        \n        Args:\n            variations: List of text variations\n            context_texts: Optional list of context texts for comparison\n            \n        Returns:\n            List of ContextFeatures",
              "parameters": [
                "self",
                "variations",
                "context_texts"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "compare_context_relevance",
              "line_number": 372,
              "docstring": "Compare context relevance scores across variations.\n        \n        Args:\n            variations: List of text variations\n            context_texts: Optional list of context texts for comparison\n            \n        Returns:\n            Dictionary mapping variation index to relative relevance score",
              "parameters": [
                "self",
                "variations",
                "context_texts"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_context_statistics",
              "line_number": 405,
              "docstring": "Get context statistics for a set of variations.\n        \n        Args:\n            variations: List of text variations\n            context_texts: Optional list of context texts for comparison\n            \n        Returns:\n            Dictionary with context statistics",
              "parameters": [
                "self",
                "variations",
                "context_texts"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "rank_by_context_relevance",
              "line_number": 456,
              "docstring": "Rank variations by context relevance score.\n        \n        Args:\n            variations: List of text variations\n            context_texts: Optional list of context texts for comparison\n            \n        Returns:\n            List of (index, relevance_score) tuples sorted by relevance score (descending)",
              "parameters": [
                "self",
                "variations",
                "context_texts"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        }
      ],
      "total_functions": 0,
      "total_classes": 2,
      "has_main": false,
      "error": null
    },
    {
      "file_path": "src\\compareblocks\\features\\core.py",
      "module_name": "core",
      "relative_path": "src\\compareblocks\\features\\core.py",
      "functions": [],
      "classes": [
        {
          "name": "LengthFeatures",
          "line_number": 13,
          "docstring": "Core length and line statistics for text variations.",
          "methods": [
            {
              "name": "to_dict",
              "line_number": 22,
              "docstring": "Convert features to dictionary format.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        },
        {
          "name": "CoreFeatureExtractor",
          "line_number": 34,
          "docstring": "Extracts core length and line features from text variations.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 37,
              "docstring": "Initialize the core feature extractor.",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "extract_length_features",
              "line_number": 41,
              "docstring": "Extract length and line features from a single text variation.\n        \n        Args:\n            text: The text to analyze\n            \n        Returns:\n            LengthFeatures object with computed metrics",
              "parameters": [
                "self",
                "text"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "compute_consistency_score",
              "line_number": 91,
              "docstring": "Compute length consistency scores for variations based on median length.\n        \n        Args:\n            variations: List of text variations to compare\n            \n        Returns:\n            Dictionary mapping variation index to consistency score",
              "parameters": [
                "self",
                "variations"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "extract_features_for_variations",
              "line_number": 132,
              "docstring": "Extract features for multiple variations and compute consistency scores.\n        \n        Args:\n            variations: List of text variations\n            \n        Returns:\n            List of LengthFeatures with updated consistency scores",
              "parameters": [
                "self",
                "variations"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_variation_statistics",
              "line_number": 157,
              "docstring": "Get summary statistics for a set of variations.\n        \n        Args:\n            variations: List of text variations\n            \n        Returns:\n            Dictionary with summary statistics",
              "parameters": [
                "self",
                "variations"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        }
      ],
      "total_functions": 0,
      "total_classes": 2,
      "has_main": false,
      "error": null
    },
    {
      "file_path": "src\\compareblocks\\features\\language.py",
      "module_name": "language",
      "relative_path": "src\\compareblocks\\features\\language.py",
      "functions": [],
      "classes": [
        {
          "name": "LanguageFeatures",
          "line_number": 14,
          "docstring": "Language fitness features for text variations.",
          "methods": [
            {
              "name": "to_dict",
              "line_number": 25,
              "docstring": "Convert features to dictionary format.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        },
        {
          "name": "LanguageFeatureExtractor",
          "line_number": 39,
          "docstring": "Extracts language fitness features from text variations.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 42,
              "docstring": "Initialize the language feature extractor.",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "_load_common_english_words",
              "line_number": 49,
              "docstring": "Load a set of common English words for basic language detection.",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_initialize_language_detector",
              "line_number": 133,
              "docstring": "Initialize language detection if langdetect is available.",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_clean_text_for_analysis",
              "line_number": 142,
              "docstring": "Clean text for language analysis.",
              "parameters": [
                "self",
                "text"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_extract_words",
              "line_number": 156,
              "docstring": "Extract words from text for analysis.",
              "parameters": [
                "self",
                "text"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_detect_language",
              "line_number": 166,
              "docstring": "Detect language of text.\n        \n        Returns:\n            Tuple of (language_code, confidence)",
              "parameters": [
                "self",
                "text"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_calculate_word_in_language_rate",
              "line_number": 202,
              "docstring": "Calculate how many words are recognized as being in the detected language.\n        \n        Returns:\n            Tuple of (words_in_language_count, total_word_count)",
              "parameters": [
                "self",
                "words",
                "language"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "extract_language_features",
              "line_number": 223,
              "docstring": "Extract language fitness features from text.\n        \n        Args:\n            text: The text to analyze\n            \n        Returns:\n            LanguageFeatures object with computed metrics",
              "parameters": [
                "self",
                "text"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "extract_features_for_variations",
              "line_number": 292,
              "docstring": "Extract language features for multiple variations.\n        \n        Args:\n            variations: List of text variations\n            \n        Returns:\n            List of LanguageFeatures",
              "parameters": [
                "self",
                "variations"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_language_statistics",
              "line_number": 304,
              "docstring": "Get language statistics for a set of variations.\n        \n        Args:\n            variations: List of text variations\n            \n        Returns:\n            Dictionary with language statistics",
              "parameters": [
                "self",
                "variations"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "compare_language_fitness",
              "line_number": 350,
              "docstring": "Compare language fitness scores across variations.\n        \n        Args:\n            variations: List of text variations\n            \n        Returns:\n            Dictionary mapping variation index to relative fitness score",
              "parameters": [
                "self",
                "variations"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        }
      ],
      "total_functions": 0,
      "total_classes": 2,
      "has_main": false,
      "error": null
    },
    {
      "file_path": "src\\compareblocks\\gbg\\ids.py",
      "module_name": "ids",
      "relative_path": "src\\compareblocks\\gbg\\ids.py",
      "functions": [],
      "classes": [
        {
          "name": "BlockIDGenerator",
          "line_number": 12,
          "docstring": "Generates stable, deterministic block identifiers.",
          "methods": [
            {
              "name": "generate_block_id",
              "line_number": 16,
              "docstring": "Generate a stable block ID using hash of page number and normalized coordinates.\n        \n        Args:\n            page: Page number (0-indexed)\n            bbox: Bounding box coordinates\n            page_width: Width of the page for normalization\n            page_height: Height of the page for normalization\n            \n        Returns:\n            Stable block ID string",
              "parameters": [
                "page",
                "bbox",
                "page_width",
                "page_height"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "validate_block_id",
              "line_number": 49,
              "docstring": "Validate that a block ID follows the expected format.\n        \n        Args:\n            block_id: Block ID to validate\n            \n        Returns:\n            True if valid, False otherwise",
              "parameters": [
                "block_id"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "extract_coordinates_from_id_string",
              "line_number": 77,
              "docstring": "Extract page and normalized coordinates from the ID string (for debugging).\n        \n        Args:\n            id_string: The string used to generate the hash\n            \n        Returns:\n            Tuple of (page, x, y, width, height)",
              "parameters": [
                "id_string"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        }
      ],
      "total_functions": 0,
      "total_classes": 1,
      "has_main": false,
      "error": null
    },
    {
      "file_path": "src\\compareblocks\\gbg\\orientation.py",
      "module_name": "orientation",
      "relative_path": "src\\compareblocks\\gbg\\orientation.py",
      "functions": [],
      "classes": [
        {
          "name": "OrientationDetector",
          "line_number": 17,
          "docstring": "Detects page orientation and text block skew using OpenCV.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 20,
              "docstring": "",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "detect_page_orientation",
              "line_number": 24,
              "docstring": "Detect page-level orientation using projection profile analysis.\n        \n        Args:\n            image: Grayscale image array\n            \n        Returns:\n            OrientationHints with page rotation and confidence",
              "parameters": [
                "self",
                "image"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "detect_block_skew",
              "line_number": 65,
              "docstring": "Detect individual text block skew using Hough line detection.\n        \n        Args:\n            image: Grayscale image array\n            bbox_region: Optional cropped region for the specific block\n            \n        Returns:\n            OrientationHints with block skew angle and confidence",
              "parameters": [
                "self",
                "image",
                "bbox_region"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "detect_combined_orientation",
              "line_number": 122,
              "docstring": "Combine page-level and block-level orientation detection.\n        \n        Args:\n            image: Full page grayscale image\n            bbox_region: Optional cropped region for specific block\n            \n        Returns:\n            Combined OrientationHints",
              "parameters": [
                "self",
                "image",
                "bbox_region"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "_rotate_image",
              "line_number": 149,
              "docstring": "Rotate image by specified angle.\n        \n        Args:\n            image: Input image\n            angle: Rotation angle in degrees\n            \n        Returns:\n            Rotated image",
              "parameters": [
                "self",
                "image",
                "angle"
              ],
              "is_private": true,
              "is_dunder": false
            }
          ]
        },
        {
          "name": "ProjectionProfileAnalyzer",
          "line_number": 187,
          "docstring": "Analyzes projection profiles for text orientation detection.",
          "methods": [
            {
              "name": "calculate_horizontal_projection",
              "line_number": 191,
              "docstring": "Calculate horizontal projection profile (sum of pixels per row).",
              "parameters": [
                "image"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "calculate_vertical_projection",
              "line_number": 196,
              "docstring": "Calculate vertical projection profile (sum of pixels per column).",
              "parameters": [
                "image"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "analyze_projection_variance",
              "line_number": 201,
              "docstring": "Calculate variance of projection profile.",
              "parameters": [
                "projection"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "find_text_lines",
              "line_number": 206,
              "docstring": "Find text line boundaries from horizontal projection.\n        \n        Args:\n            horizontal_projection: Horizontal projection array\n            threshold_ratio: Ratio of max value to use as threshold\n            \n        Returns:\n            List of (start, end) tuples for text lines",
              "parameters": [
                "horizontal_projection",
                "threshold_ratio"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        }
      ],
      "total_functions": 0,
      "total_classes": 2,
      "has_main": false,
      "error": null
    },
    {
      "file_path": "src\\compareblocks\\gbg\\processor.py",
      "module_name": "processor",
      "relative_path": "src\\compareblocks\\gbg\\processor.py",
      "functions": [
        {
          "name": "main",
          "line_number": 294,
          "docstring": "Main function for command-line usage.",
          "parameters": [],
          "is_private": false,
          "is_main": true
        }
      ],
      "classes": [
        {
          "name": "GBGProcessor",
          "line_number": 19,
          "docstring": "Complete Global Block Grid processor for PDF analysis.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 22,
              "docstring": "Initialize the GBG processor with all required components.",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "process_pdf",
              "line_number": 30,
              "docstring": "Process entire PDF through complete GBG pipeline.\n        \n        Args:\n            pdf_path: Path to PDF file (defaults to configured target PDF)\n            output_path: Optional path to save results JSON (defaults to configured output path)\n            \n        Returns:\n            Complete GBG analysis results",
              "parameters": [
                "self",
                "pdf_path",
                "output_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "process_page",
              "line_number": 114,
              "docstring": "Process single page through complete GBG pipeline.\n        \n        Args:\n            pdf_path: Path to PDF file\n            page_num: Page number (0-indexed)\n            \n        Returns:\n            Complete page analysis results",
              "parameters": [
                "self",
                "pdf_path",
                "page_num"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "_analyze_block_geometry",
              "line_number": 163,
              "docstring": "Analyze geometric properties of a block.",
              "parameters": [
                "self",
                "block",
                "page_info"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_categorize_size",
              "line_number": 203,
              "docstring": "Categorize block size.",
              "parameters": [
                "self",
                "area"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_generate_summary",
              "line_number": 212,
              "docstring": "Generate summary statistics for the entire PDF.",
              "parameters": [
                "self",
                "all_blocks",
                "page_summaries",
                "total_pages"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_get_total_pages",
              "line_number": 265,
              "docstring": "Get total number of pages in PDF.",
              "parameters": [
                "self",
                "pdf_path"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_get_timestamp",
              "line_number": 279,
              "docstring": "Get current timestamp.",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_save_results",
              "line_number": 284,
              "docstring": "Save results to JSON file.",
              "parameters": [
                "self",
                "results",
                "output_path"
              ],
              "is_private": true,
              "is_dunder": false
            }
          ]
        }
      ],
      "total_functions": 1,
      "total_classes": 1,
      "has_main": true,
      "error": null
    },
    {
      "file_path": "src\\compareblocks\\gbg\\seed.py",
      "module_name": "seed",
      "relative_path": "src\\compareblocks\\gbg\\seed.py",
      "functions": [],
      "classes": [
        {
          "name": "SeedBlockDetector",
          "line_number": 20,
          "docstring": "Detects and extracts seed blocks from PDF pages using PyMuPDF.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 23,
              "docstring": "Initialize the seed block detector.\n        \n        Args:\n            min_block_area: Minimum area for a block to be considered valid\n            merge_threshold: Distance threshold for merging nearby blocks",
              "parameters": [
                "self",
                "min_block_area",
                "merge_threshold"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "extract_seed_blocks",
              "line_number": 36,
              "docstring": "Extract seed blocks from a specific PDF page.\n        \n        Args:\n            pdf_path: Path to the PDF file\n            page_num: Page number (0-indexed)\n            \n        Returns:\n            List of SeedBlock objects",
              "parameters": [
                "self",
                "pdf_path",
                "page_num"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "extract_all_seed_blocks",
              "line_number": 104,
              "docstring": "Extract seed blocks from all pages in a PDF.\n        \n        Args:\n            pdf_path: Path to the PDF file\n            \n        Returns:\n            List of all SeedBlock objects from all pages",
              "parameters": [
                "self",
                "pdf_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "_extract_text_blocks",
              "line_number": 127,
              "docstring": "Extract text blocks from a PyMuPDF page.\n        \n        Args:\n            page: PyMuPDF page object\n            \n        Returns:\n            List of (BoundingBox, text_content) tuples",
              "parameters": [
                "self",
                "page"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_detect_page_orientation",
              "line_number": 169,
              "docstring": "Detect page-level orientation using image analysis.\n        \n        Args:\n            page: PyMuPDF page object\n            \n        Returns:\n            OrientationHints for the page",
              "parameters": [
                "self",
                "page"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_separate_column_blocks",
              "line_number": 202,
              "docstring": "Separate blocks that span multiple columns into individual column blocks.\n        \n        Args:\n            blocks: List of seed blocks\n            \n        Returns:\n            List of separated blocks",
              "parameters": [
                "self",
                "blocks"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_is_multi_column_block",
              "line_number": 227,
              "docstring": "Determine if a block likely contains multiple columns.\n        \n        Args:\n            block: SeedBlock to analyze\n            \n        Returns:\n            True if block appears to be multi-column",
              "parameters": [
                "self",
                "block"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_split_into_columns",
              "line_number": 246,
              "docstring": "Split a multi-column block into separate column blocks.\n        \n        Args:\n            block: Multi-column block to split\n            \n        Returns:\n            List of individual column blocks",
              "parameters": [
                "self",
                "block"
              ],
              "is_private": true,
              "is_dunder": false
            }
          ]
        },
        {
          "name": "PDFPageAnalyzer",
          "line_number": 312,
          "docstring": "Analyzes PDF pages for layout and structure information.",
          "methods": [
            {
              "name": "get_page_info",
              "line_number": 316,
              "docstring": "Get basic information about a PDF page.\n        \n        Args:\n            pdf_path: Path to PDF file\n            page_num: Page number (0-indexed)\n            \n        Returns:\n            Dictionary with page information",
              "parameters": [
                "pdf_path",
                "page_num"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "analyze_layout_structure",
              "line_number": 349,
              "docstring": "Analyze the overall layout structure of a PDF.\n        \n        Args:\n            pdf_path: Path to PDF file\n            \n        Returns:\n            Dictionary with layout analysis",
              "parameters": [
                "pdf_path"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        }
      ],
      "total_functions": 0,
      "total_classes": 2,
      "has_main": false,
      "error": null
    },
    {
      "file_path": "src\\compareblocks\\gbg\\types.py",
      "module_name": "types",
      "relative_path": "src\\compareblocks\\gbg\\types.py",
      "functions": [],
      "classes": [
        {
          "name": "BoundingBox",
          "line_number": 12,
          "docstring": "Represents a rectangular bounding box with normalized coordinates.",
          "methods": [
            {
              "name": "__post_init__",
              "line_number": 19,
              "docstring": "Validate bounding box coordinates.",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "area",
              "line_number": 26,
              "docstring": "Calculate the area of the bounding box.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "center",
              "line_number": 30,
              "docstring": "Get the center point of the bounding box.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "normalize_coordinates",
              "line_number": 34,
              "docstring": "Normalize coordinates to 0-1 range based on page dimensions.",
              "parameters": [
                "self",
                "page_width",
                "page_height"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        },
        {
          "name": "OrientationHints",
          "line_number": 45,
          "docstring": "Metadata about text orientation and skew for a block.",
          "methods": [
            {
              "name": "__post_init__",
              "line_number": 52,
              "docstring": "Validate orientation hints.",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": true
            }
          ]
        },
        {
          "name": "SeedBlock",
          "line_number": 59,
          "docstring": "Represents a seed block from the Global Block Grid.",
          "methods": [
            {
              "name": "__post_init__",
              "line_number": 68,
              "docstring": "Validate seed block data.",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": true
            }
          ]
        }
      ],
      "total_functions": 0,
      "total_classes": 3,
      "has_main": false,
      "error": null
    },
    {
      "file_path": "src\\compareblocks\\gui\\app.py",
      "module_name": "app",
      "relative_path": "src\\compareblocks\\gui\\app.py",
      "functions": [
        {
          "name": "main",
          "line_number": 426,
          "docstring": "Main entry point for BECR GUI application.\n    \n    Args:\n        args: Command line arguments (optional)\n        \n    Returns:\n        Exit code (0 for success, non-zero for error)",
          "parameters": [
            "args"
          ],
          "is_private": false,
          "is_main": true
        },
        {
          "name": "run_gui_mode",
          "line_number": 443,
          "docstring": "Run the GUI application.",
          "parameters": [],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "run_cli_mode",
          "line_number": 460,
          "docstring": "Run the CLI version of the application.",
          "parameters": [],
          "is_private": false,
          "is_main": false
        }
      ],
      "classes": [
        {
          "name": "DebugImageWidget",
          "line_number": 28,
          "docstring": "Widget for displaying debug images and OCR results.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 31,
              "docstring": "",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "setup_ui",
              "line_number": 36,
              "docstring": "Setup the debug image UI.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "extract_debug_images",
              "line_number": 81,
              "docstring": "Extract debug images for the selected page.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "display_debug_results",
              "line_number": 111,
              "docstring": "Display the debug results in the UI.",
              "parameters": [
                "self",
                "result"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "load_tesseract_results",
              "line_number": 131,
              "docstring": "Load Tesseract results for the page.",
              "parameters": [
                "self",
                "page_num"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "create_block_widget",
              "line_number": 145,
              "docstring": "Create a widget for displaying a single block's debug information.",
              "parameters": [
                "self",
                "region",
                "tesseract_results",
                "block_index"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "create_image_label",
              "line_number": 227,
              "docstring": "Create a label widget for displaying an image.",
              "parameters": [
                "self",
                "image_path",
                "title",
                "max_size"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        },
        {
          "name": "BECRMainWindow",
          "line_number": 260,
          "docstring": "Main window for BECR application.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 263,
              "docstring": "",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "setup_ui",
              "line_number": 271,
              "docstring": "Setup the main UI.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "setup_menus",
              "line_number": 303,
              "docstring": "Setup application menus.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "create_individual_config_files",
              "line_number": 330,
              "docstring": "Create individual configuration files for each engine.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "show_engine_statistics",
              "line_number": 343,
              "docstring": "Show comprehensive engine statistics.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "add_pdf_configuration",
              "line_number": 383,
              "docstring": "Add PDF-specific configuration for an engine.",
              "parameters": [
                "self",
                "engine_name"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        }
      ],
      "total_functions": 3,
      "total_classes": 2,
      "has_main": true,
      "error": null
    },
    {
      "file_path": "src\\compareblocks\\gui\\config_forms.py",
      "module_name": "config_forms",
      "relative_path": "src\\compareblocks\\gui\\config_forms.py",
      "functions": [],
      "classes": [
        {
          "name": "ParameterWidget",
          "line_number": 36,
          "docstring": "Widget for editing a single configuration parameter.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 41,
              "docstring": "",
              "parameters": [
                "self",
                "parameter",
                "current_value"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "setup_ui",
              "line_number": 47,
              "docstring": "Setup the parameter editing UI.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "set_value",
              "line_number": 92,
              "docstring": "Set the current value of the parameter.",
              "parameters": [
                "self",
                "value"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_value",
              "line_number": 106,
              "docstring": "Get the current value of the parameter.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "_on_bool_changed",
              "line_number": 119,
              "docstring": "",
              "parameters": [
                "self",
                "state"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_on_int_changed",
              "line_number": 122,
              "docstring": "",
              "parameters": [
                "self",
                "value"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_on_float_changed",
              "line_number": 125,
              "docstring": "",
              "parameters": [
                "self",
                "value"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_on_choice_changed",
              "line_number": 128,
              "docstring": "",
              "parameters": [
                "self",
                "text"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_on_text_changed",
              "line_number": 131,
              "docstring": "",
              "parameters": [
                "self",
                "text"
              ],
              "is_private": true,
              "is_dunder": false
            }
          ]
        },
        {
          "name": "EngineConfigurationForm",
          "line_number": 135,
          "docstring": "Form for editing engine configuration settings.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 140,
              "docstring": "",
              "parameters": [
                "self",
                "config_manager",
                "engine_name"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "setup_ui",
              "line_number": 149,
              "docstring": "Setup the configuration form UI.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "load_configuration",
              "line_number": 179,
              "docstring": "Load current configuration for the engine.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "_on_parameter_changed",
              "line_number": 196,
              "docstring": "Handle parameter value change.",
              "parameters": [
                "self",
                "param_name",
                "value"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "reset_to_defaults",
              "line_number": 201,
              "docstring": "Reset all parameters to default values.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "apply_changes",
              "line_number": 214,
              "docstring": "Apply configuration changes.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        },
        {
          "name": "PDFOverrideForm",
          "line_number": 220,
          "docstring": "Form for managing PDF-specific configuration overrides.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 225,
              "docstring": "",
              "parameters": [
                "self",
                "config_manager",
                "engine_name",
                "pdf_path"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "setup_ui",
              "line_number": 234,
              "docstring": "Setup the PDF override form UI.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "load_current_overrides",
              "line_number": 276,
              "docstring": "Load current PDF-specific overrides.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "add_override_parameter",
              "line_number": 292,
              "docstring": "Add a new override parameter.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "add_override_widget",
              "line_number": 330,
              "docstring": "Add widget for override parameter.",
              "parameters": [
                "self",
                "param_name",
                "value"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "remove_override_widget",
              "line_number": 375,
              "docstring": "Remove override parameter widget.",
              "parameters": [
                "self",
                "param_name"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_override_values",
              "line_number": 382,
              "docstring": "Get current override values from widgets.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "save_overrides",
              "line_number": 412,
              "docstring": "Save PDF-specific overrides.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "update_effective_config_display",
              "line_number": 429,
              "docstring": "Update the effective configuration display.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        },
        {
          "name": "OptimizationProposalWidget",
          "line_number": 436,
          "docstring": "Widget for reviewing and approving optimization proposals.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 442,
              "docstring": "",
              "parameters": [
                "self",
                "config_manager"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "setup_ui",
              "line_number": 447,
              "docstring": "Setup the optimization proposal UI.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "load_proposals",
              "line_number": 471,
              "docstring": "Load optimization proposals from configuration.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "approve_proposal",
              "line_number": 525,
              "docstring": "Approve an optimization proposal.",
              "parameters": [
                "self",
                "proposal_id"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "reject_proposal",
              "line_number": 535,
              "docstring": "Reject an optimization proposal.",
              "parameters": [
                "self",
                "proposal_id"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "show_proposal_details",
              "line_number": 546,
              "docstring": "Show detailed information about a proposal.",
              "parameters": [
                "self",
                "proposal"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        },
        {
          "name": "ConfigurationManagerWidget",
          "line_number": 582,
          "docstring": "Main widget for managing engine configurations.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 585,
              "docstring": "",
              "parameters": [
                "self",
                "config_manager"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "setup_ui",
              "line_number": 590,
              "docstring": "Setup the main configuration management UI.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "add_pdf_override_tab",
              "line_number": 611,
              "docstring": "Add a tab for PDF-specific overrides.",
              "parameters": [
                "self",
                "engine_name",
                "pdf_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "on_configuration_changed",
              "line_number": 628,
              "docstring": "Handle configuration changes.",
              "parameters": [
                "self",
                "engine_name",
                "settings"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "on_override_created",
              "line_number": 634,
              "docstring": "Handle PDF override creation.",
              "parameters": [
                "self",
                "engine_name",
                "pdf_path",
                "overrides"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "on_proposal_approved",
              "line_number": 638,
              "docstring": "Handle proposal approval.",
              "parameters": [
                "self",
                "proposal_id"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "on_proposal_rejected",
              "line_number": 642,
              "docstring": "Handle proposal rejection.",
              "parameters": [
                "self",
                "proposal_id"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        }
      ],
      "total_functions": 0,
      "total_classes": 5,
      "has_main": false,
      "error": null
    },
    {
      "file_path": "src\\compareblocks\\gui\\import_dialog.py",
      "module_name": "import_dialog",
      "relative_path": "src\\compareblocks\\gui\\import_dialog.py",
      "functions": [],
      "classes": [
        {
          "name": "ValidationWorker",
          "line_number": 24,
          "docstring": "Worker thread for validating NDJSON files.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 30,
              "docstring": "",
              "parameters": [
                "self",
                "file_path"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "run",
              "line_number": 35,
              "docstring": "Run validation in background thread.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        },
        {
          "name": "NDJSONPreviewWidget",
          "line_number": 77,
          "docstring": "Widget for previewing NDJSON file contents.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 80,
              "docstring": "",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "setup_ui",
              "line_number": 85,
              "docstring": "Setup the preview UI.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "set_records",
              "line_number": 107,
              "docstring": "Set the records to preview.",
              "parameters": [
                "self",
                "records"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        },
        {
          "name": "ImportOptionsWidget",
          "line_number": 158,
          "docstring": "Widget for configuring import options.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 161,
              "docstring": "",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "setup_ui",
              "line_number": 165,
              "docstring": "Setup the import options UI.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_import_options",
              "line_number": 222,
              "docstring": "Get the current import options.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "set_available_engines",
              "line_number": 234,
              "docstring": "Set the available engines for filtering.",
              "parameters": [
                "self",
                "engines"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        },
        {
          "name": "ImportDialog",
          "line_number": 249,
          "docstring": "Dialog for importing external NDJSON variations.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 254,
              "docstring": "",
              "parameters": [
                "self",
                "parent"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "setup_ui",
              "line_number": 266,
              "docstring": "Setup the import dialog UI.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "browse_file",
              "line_number": 330,
              "docstring": "Browse for NDJSON file.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "validate_file",
              "line_number": 348,
              "docstring": "Validate the selected NDJSON file.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "on_progress_update",
              "line_number": 367,
              "docstring": "Handle validation progress updates.",
              "parameters": [
                "self",
                "progress",
                "status"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "on_validation_complete",
              "line_number": 372,
              "docstring": "Handle validation completion.",
              "parameters": [
                "self",
                "success",
                "message",
                "records"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "import_variations",
              "line_number": 396,
              "docstring": "Import the validated variations.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "apply_import_filters",
              "line_number": 424,
              "docstring": "Apply import filters to records.",
              "parameters": [
                "self",
                "records",
                "options"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "handle_duplicates",
              "line_number": 453,
              "docstring": "Handle duplicate records based on strategy.",
              "parameters": [
                "self",
                "records",
                "handling"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        }
      ],
      "total_functions": 0,
      "total_classes": 4,
      "has_main": false,
      "error": null
    },
    {
      "file_path": "src\\compareblocks\\gui\\pdf_viewer.py",
      "module_name": "pdf_viewer",
      "relative_path": "src\\compareblocks\\gui\\pdf_viewer.py",
      "functions": [],
      "classes": [
        {
          "name": "BlockHighlight",
          "line_number": 24,
          "docstring": "Information for highlighting a block on the PDF.",
          "methods": []
        },
        {
          "name": "PDFPageWidget",
          "line_number": 33,
          "docstring": "Widget for displaying a single PDF page with block highlighting.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 38,
              "docstring": "",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "load_pdf",
              "line_number": 59,
              "docstring": "Load a PDF document.",
              "parameters": [
                "self",
                "pdf_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "set_page",
              "line_number": 71,
              "docstring": "Set the current page to display.",
              "parameters": [
                "self",
                "page_num"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "set_zoom",
              "line_number": 84,
              "docstring": "Set the zoom factor and re-render.",
              "parameters": [
                "self",
                "zoom_factor"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "set_block_highlights",
              "line_number": 90,
              "docstring": "Set the blocks to highlight on the page.",
              "parameters": [
                "self",
                "highlights"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "select_block",
              "line_number": 96,
              "docstring": "Select a specific block for highlighting.",
              "parameters": [
                "self",
                "block_id"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "_render_page",
              "line_number": 107,
              "docstring": "Render the current page with highlights.",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_draw_highlights",
              "line_number": 132,
              "docstring": "Draw block highlights on the pixmap.",
              "parameters": [
                "self",
                "pixmap"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "mousePressEvent",
              "line_number": 168,
              "docstring": "Handle mouse press events for block selection and panning.",
              "parameters": [
                "self",
                "event"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "mouseMoveEvent",
              "line_number": 183,
              "docstring": "Handle mouse move events for panning.",
              "parameters": [
                "self",
                "event"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "mouseReleaseEvent",
              "line_number": 196,
              "docstring": "Handle mouse release events.",
              "parameters": [
                "self",
                "event"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "wheelEvent",
              "line_number": 204,
              "docstring": "Handle wheel events for zooming.",
              "parameters": [
                "self",
                "event"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "_get_block_at_position",
              "line_number": 216,
              "docstring": "Get the block ID at the given position.",
              "parameters": [
                "self",
                "pos"
              ],
              "is_private": true,
              "is_dunder": false
            }
          ]
        },
        {
          "name": "PDFViewer",
          "line_number": 235,
          "docstring": "Complete PDF viewer with navigation and zoom controls.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 241,
              "docstring": "",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "setup_ui",
              "line_number": 250,
              "docstring": "Setup the PDF viewer UI.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "load_pdf",
              "line_number": 307,
              "docstring": "Load a PDF file.",
              "parameters": [
                "self",
                "pdf_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "go_to_page",
              "line_number": 328,
              "docstring": "Go to a specific page (1-based).",
              "parameters": [
                "self",
                "page_num"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "previous_page",
              "line_number": 344,
              "docstring": "Go to the previous page.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "next_page",
              "line_number": 349,
              "docstring": "Go to the next page.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "set_zoom_percent",
              "line_number": 354,
              "docstring": "Set zoom as percentage.",
              "parameters": [
                "self",
                "percent"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "fit_width",
              "line_number": 360,
              "docstring": "Fit the page width to the viewer.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "set_block_highlights",
              "line_number": 376,
              "docstring": "Set blocks to highlight on the current page.",
              "parameters": [
                "self",
                "highlights"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "select_block",
              "line_number": 380,
              "docstring": "Select a specific block.",
              "parameters": [
                "self",
                "block_id"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "set_controls_enabled",
              "line_number": 384,
              "docstring": "Enable or disable navigation controls.",
              "parameters": [
                "self",
                "enabled"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        }
      ],
      "total_functions": 0,
      "total_classes": 3,
      "has_main": false,
      "error": null
    },
    {
      "file_path": "src\\compareblocks\\gui\\review_gui.py",
      "module_name": "review_gui",
      "relative_path": "src\\compareblocks\\gui\\review_gui.py",
      "functions": [
        {
          "name": "main",
          "line_number": 678,
          "docstring": "Main entry point for the Review GUI.",
          "parameters": [],
          "is_private": false,
          "is_main": true
        }
      ],
      "classes": [
        {
          "name": "ReviewDataManager",
          "line_number": 32,
          "docstring": "Manages data for the review GUI.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 35,
              "docstring": "",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "load_pdf",
              "line_number": 48,
              "docstring": "Load a PDF and generate GBG analysis.",
              "parameters": [
                "self",
                "pdf_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "_initialize_seed_variations",
              "line_number": 65,
              "docstring": "Initialize seed variations from GBG results.",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "add_external_variations",
              "line_number": 100,
              "docstring": "Add external variations from NDJSON import.",
              "parameters": [
                "self",
                "variations"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "_map_variation_to_block",
              "line_number": 137,
              "docstring": "Map a variation to an existing block.",
              "parameters": [
                "self",
                "variation"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_calculate_iou",
              "line_number": 166,
              "docstring": "Calculate Intersection over Union for two bounding boxes.",
              "parameters": [
                "self",
                "bbox1",
                "bbox2"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "get_page_blocks",
              "line_number": 186,
              "docstring": "Get all blocks for a specific page.",
              "parameters": [
                "self",
                "page_num"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_block_variations",
              "line_number": 197,
              "docstring": "Get variation display data for a block.",
              "parameters": [
                "self",
                "block_id"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "_score_variations",
              "line_number": 226,
              "docstring": "Score variations using consensus scorer.",
              "parameters": [
                "self",
                "variations"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "set_consensus_decision",
              "line_number": 260,
              "docstring": "Set the consensus decision for a block.",
              "parameters": [
                "self",
                "block_id",
                "variation_id"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "set_manual_correction",
              "line_number": 264,
              "docstring": "Set a manual correction for a block.",
              "parameters": [
                "self",
                "block_id",
                "corrected_text"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "export_consensus",
              "line_number": 272,
              "docstring": "Export consensus decisions to NDJSON.",
              "parameters": [
                "self",
                "output_path"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        },
        {
          "name": "ReviewGUI",
          "line_number": 326,
          "docstring": "Main Review GUI with PDF Visualization.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 329,
              "docstring": "",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "setup_ui",
              "line_number": 348,
              "docstring": "Setup the main UI.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "setup_menus",
              "line_number": 411,
              "docstring": "Setup application menus.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "setup_status_bar",
              "line_number": 452,
              "docstring": "Setup the status bar.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "connect_signals",
              "line_number": 470,
              "docstring": "Connect UI signals.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "open_pdf",
              "line_number": 481,
              "docstring": "Open a PDF file.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "load_pdf",
              "line_number": 490,
              "docstring": "Load a PDF file.",
              "parameters": [
                "self",
                "pdf_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "import_variations",
              "line_number": 520,
              "docstring": "Import external variations.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "on_import_requested",
              "line_number": 526,
              "docstring": "Handle import request.",
              "parameters": [
                "self",
                "file_path",
                "options",
                "records"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "export_consensus",
              "line_number": 544,
              "docstring": "Export consensus decisions.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "on_page_changed",
              "line_number": 560,
              "docstring": "Handle page change.",
              "parameters": [
                "self",
                "page_num"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "update_page_highlights",
              "line_number": 565,
              "docstring": "Update block highlights for the current page.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "should_show_block",
              "line_number": 599,
              "docstring": "Check if block should be shown based on filters.",
              "parameters": [
                "self",
                "block_id",
                "variations"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "apply_block_filters",
              "line_number": 614,
              "docstring": "Apply block filters and update display.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "on_block_selected",
              "line_number": 618,
              "docstring": "Handle block selection.",
              "parameters": [
                "self",
                "block_id"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "on_variation_selected",
              "line_number": 633,
              "docstring": "Handle variation selection.",
              "parameters": [
                "self",
                "variation_id"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "on_consensus_changed",
              "line_number": 637,
              "docstring": "Handle consensus decision change.",
              "parameters": [
                "self",
                "variation_id"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "on_manual_correction",
              "line_number": 643,
              "docstring": "Handle manual correction.",
              "parameters": [
                "self",
                "block_id",
                "corrected_text"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "previous_block",
              "line_number": 652,
              "docstring": "Navigate to previous block with variations.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "next_block",
              "line_number": 657,
              "docstring": "Navigate to next block with variations.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "recalculate_surrounding_blocks",
              "line_number": 662,
              "docstring": "Recalculate surrounding blocks after changes.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "preview_changes",
              "line_number": 672,
              "docstring": "Preview changes from one file to another.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        }
      ],
      "total_functions": 1,
      "total_classes": 2,
      "has_main": true,
      "error": null
    },
    {
      "file_path": "src\\compareblocks\\gui\\variations_panel.py",
      "module_name": "variations_panel",
      "relative_path": "src\\compareblocks\\gui\\variations_panel.py",
      "functions": [],
      "classes": [
        {
          "name": "VariationDisplayData",
          "line_number": 25,
          "docstring": "Data for displaying a variation in the comparison table.",
          "methods": []
        },
        {
          "name": "TextDiffWidget",
          "line_number": 40,
          "docstring": "Widget for displaying text with diff highlighting.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 43,
              "docstring": "",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "set_diff_text",
              "line_number": 49,
              "docstring": "Set text with diff highlighting against reference.",
              "parameters": [
                "self",
                "text",
                "reference_text"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "_insert_char_diff",
              "line_number": 94,
              "docstring": "Insert character-level diff highlighting.",
              "parameters": [
                "self",
                "cursor",
                "text",
                "reference_text",
                "add_format",
                "del_format",
                "normal_format"
              ],
              "is_private": true,
              "is_dunder": false
            }
          ]
        },
        {
          "name": "VariationsTable",
          "line_number": 110,
          "docstring": "Table widget for displaying text variations with metrics.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 116,
              "docstring": "",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "setup_table",
              "line_number": 121,
              "docstring": "Setup the variations table.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "set_variations",
              "line_number": 152,
              "docstring": "Set the variations to display.",
              "parameters": [
                "self",
                "variations"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "_populate_row",
              "line_number": 160,
              "docstring": "Populate a single table row.",
              "parameters": [
                "self",
                "row",
                "variation"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_on_selection_changed",
              "line_number": 207,
              "docstring": "Handle row selection changes.",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "highlight_consensus",
              "line_number": 214,
              "docstring": "Highlight the consensus variation.",
              "parameters": [
                "self",
                "variation_id"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        },
        {
          "name": "VariationsPanel",
          "line_number": 223,
          "docstring": "Complete variations comparison panel.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 230,
              "docstring": "",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "setup_ui",
              "line_number": 239,
              "docstring": "Setup the variations panel UI.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "set_block_variations",
              "line_number": 316,
              "docstring": "Set the variations for a specific block.",
              "parameters": [
                "self",
                "block_id",
                "variations"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "select_variation",
              "line_number": 335,
              "docstring": "Select a specific variation for detailed view.",
              "parameters": [
                "self",
                "variation_id"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "set_consensus_variation",
              "line_number": 356,
              "docstring": "Set the consensus variation.",
              "parameters": [
                "self",
                "variation_id"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "_apply_filters",
              "line_number": 364,
              "docstring": "Apply current filters to the variations display.",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_show_manual_correction_dialog",
              "line_number": 379,
              "docstring": "Show dialog for manual text correction.",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_show_merge_dialog",
              "line_number": 415,
              "docstring": "Show dialog for merging multiple variations.",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "set_controls_enabled",
              "line_number": 490,
              "docstring": "Enable or disable panel controls.",
              "parameters": [
                "self",
                "enabled"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        }
      ],
      "total_functions": 0,
      "total_classes": 4,
      "has_main": false,
      "error": null
    },
    {
      "file_path": "src\\compareblocks\\io\\loader.py",
      "module_name": "loader",
      "relative_path": "src\\compareblocks\\io\\loader.py",
      "functions": [
        {
          "name": "load_ndjson_file",
          "line_number": 212,
          "docstring": "Convenience function to load and validate an NDJSON file.\n    \n    Args:\n        file_path: Path to the NDJSON file\n        \n    Returns:\n        List of validated records\n        \n    Raises:\n        ValidationException: If validation fails",
          "parameters": [
            "file_path"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "validate_ndjson_record",
          "line_number": 229,
          "docstring": "Convenience function to validate a single NDJSON record.\n    \n    Args:\n        record: The record to validate\n        \n    Returns:\n        Validated and normalized record\n        \n    Raises:\n        ValidationException: If validation fails",
          "parameters": [
            "record"
          ],
          "is_private": false,
          "is_main": false
        }
      ],
      "classes": [
        {
          "name": "ValidationException",
          "line_number": 17,
          "docstring": "Exception raised when NDJSON validation fails.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 20,
              "docstring": "",
              "parameters": [
                "self",
                "message",
                "line_number",
                "record"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "_format_message",
              "line_number": 26,
              "docstring": "Format the error message with context.",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": false
            }
          ]
        },
        {
          "name": "NDJSONLoader",
          "line_number": 33,
          "docstring": "Loads and validates NDJSON files containing text extraction variations.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 36,
              "docstring": "",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "load_file",
              "line_number": 40,
              "docstring": "Load and validate an entire NDJSON file.\n        \n        Args:\n            file_path: Path to the NDJSON file (str or Path)\n            \n        Returns:\n            List of validated records\n            \n        Raises:\n            ValidationException: If any record fails validation\n            FileNotFoundError: If file doesn't exist\n            json.JSONDecodeError: If JSON parsing fails",
              "parameters": [
                "self",
                "file_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "load_stream",
              "line_number": 82,
              "docstring": "Stream and validate NDJSON records one at a time.\n        \n        Args:\n            file_path: Path to the NDJSON file\n            \n        Yields:\n            Validated records\n            \n        Raises:\n            ValidationException: If any record fails validation\n            FileNotFoundError: If file doesn't exist\n            json.JSONDecodeError: If JSON parsing fails",
              "parameters": [
                "self",
                "file_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "validate_record",
              "line_number": 117,
              "docstring": "Validate a single record against the input schema.\n        \n        Args:\n            record: The record to validate\n            line_number: Optional line number for error reporting\n            \n        Returns:\n            The validated record (potentially with normalized fields)\n            \n        Raises:\n            ValidationException: If validation fails",
              "parameters": [
                "self",
                "record",
                "line_number"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "_validate_mapping_requirements",
              "line_number": 145,
              "docstring": "Validate that record has either block_id or bbox for mapping flexibility.\n        \n        Args:\n            record: The record to validate\n            line_number: Optional line number for error reporting\n            \n        Raises:\n            ValidationException: If neither block_id nor bbox is present",
              "parameters": [
                "self",
                "record",
                "line_number"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_normalize_record",
              "line_number": 166,
              "docstring": "Normalize record fields for consistent processing.\n        \n        Args:\n            record: The record to normalize\n            \n        Returns:\n            Normalized record",
              "parameters": [
                "self",
                "record"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_format_validation_error",
              "line_number": 195,
              "docstring": "Format a jsonschema ValidationError into a clear error message.\n        \n        Args:\n            error: The validation error\n            \n        Returns:\n            Formatted error message",
              "parameters": [
                "self",
                "error"
              ],
              "is_private": true,
              "is_dunder": false
            }
          ]
        }
      ],
      "total_functions": 2,
      "total_classes": 2,
      "has_main": false,
      "error": null
    },
    {
      "file_path": "src\\compareblocks\\io\\pdf_metadata.py",
      "module_name": "pdf_metadata",
      "relative_path": "src\\compareblocks\\io\\pdf_metadata.py",
      "functions": [
        {
          "name": "extract_pdf_metadata",
          "line_number": 193,
          "docstring": "Extract PDF metadata using the PDFMetadataExtractor.",
          "parameters": [
            "pdf_path"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "create_root_pdf_json",
          "line_number": 199,
          "docstring": "Create root PDF JSON using the PDFMetadataExtractor.",
          "parameters": [
            "pdf_path",
            "associated_files"
          ],
          "is_private": false,
          "is_main": false
        }
      ],
      "classes": [
        {
          "name": "PDFMetadataExtractor",
          "line_number": 14,
          "docstring": "Extract and normalize PDF metadata with proper filename handling.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 17,
              "docstring": "Initialize the PDF metadata extractor.",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "extract_pdf_metadata",
              "line_number": 21,
              "docstring": "Extract comprehensive PDF metadata with proper filename normalization.\n        \n        Args:\n            pdf_path: Path to the PDF file\n            \n        Returns:\n            Dictionary containing normalized PDF metadata",
              "parameters": [
                "self",
                "pdf_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "_normalize_filename",
              "line_number": 98,
              "docstring": "Normalize filename by removing problematic characters and formatting.\n        \n        Args:\n            filename: Original filename\n            \n        Returns:\n            Normalized filename",
              "parameters": [
                "self",
                "filename"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "get_display_name",
              "line_number": 121,
              "docstring": "Get a clean display name for the PDF.\n        \n        Args:\n            pdf_path: Path to the PDF file\n            \n        Returns:\n            Clean display name",
              "parameters": [
                "self",
                "pdf_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "create_root_pdf_json",
              "line_number": 142,
              "docstring": "Create comprehensive root PDF JSON with proper metadata.\n        \n        Args:\n            pdf_path: Path to the PDF file\n            associated_files: List of associated files (optional)\n            \n        Returns:\n            Complete root PDF JSON structure",
              "parameters": [
                "self",
                "pdf_path",
                "associated_files"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        }
      ],
      "total_functions": 2,
      "total_classes": 1,
      "has_main": false,
      "error": null
    },
    {
      "file_path": "src\\compareblocks\\io\\schemas.py",
      "module_name": "schemas",
      "relative_path": "src\\compareblocks\\io\\schemas.py",
      "functions": [
        {
          "name": "get_input_schema",
          "line_number": 172,
          "docstring": "Get the input variation schema for validation.",
          "parameters": [],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "get_consensus_schema",
          "line_number": 176,
          "docstring": "Get the consensus output schema for validation.",
          "parameters": [],
          "is_private": false,
          "is_main": false
        }
      ],
      "classes": [],
      "total_functions": 2,
      "total_classes": 0,
      "has_main": false,
      "error": null
    },
    {
      "file_path": "src\\compareblocks\\io\\writer.py",
      "module_name": "writer",
      "relative_path": "src\\compareblocks\\io\\writer.py",
      "functions": [
        {
          "name": "write_consensus_file",
          "line_number": 238,
          "docstring": "Convenience function to write consensus records to NDJSON file.\n    \n    Args:\n        records: List of consensus decision records\n        file_path: Output file path\n        overwrite: Whether to overwrite existing files\n        \n    Raises:\n        ExportException: If export fails",
          "parameters": [
            "records",
            "file_path",
            "overwrite"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "write_analytics_file",
          "line_number": 254,
          "docstring": "Convenience function to write analytics data to NDJSON file.\n    \n    Args:\n        analytics_data: Analytics data dictionary\n        file_path: Output file path\n        overwrite: Whether to overwrite existing files\n        \n    Raises:\n        ExportException: If export fails",
          "parameters": [
            "analytics_data",
            "file_path",
            "overwrite"
          ],
          "is_private": false,
          "is_main": false
        }
      ],
      "classes": [
        {
          "name": "ExportException",
          "line_number": 17,
          "docstring": "Exception raised when NDJSON export fails.",
          "methods": []
        },
        {
          "name": "NDJSONWriter",
          "line_number": 22,
          "docstring": "Writes consensus decisions and analytics to NDJSON format.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 25,
              "docstring": "Initialize the NDJSON writer.\n        \n        Args:\n            validate_output: Whether to validate records against schema before writing",
              "parameters": [
                "self",
                "validate_output"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "write_file",
              "line_number": 37,
              "docstring": "Write consensus records to an NDJSON file.\n        \n        Args:\n            records: List of consensus decision records\n            file_path: Output file path (str or Path)\n            overwrite: Whether to overwrite existing files\n            \n        Raises:\n            ExportException: If export fails\n            FileExistsError: If file exists and overwrite=False",
              "parameters": [
                "self",
                "records",
                "file_path",
                "overwrite"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "write_stream",
              "line_number": 66,
              "docstring": "Write consensus records to a stream.\n        \n        Args:\n            records: List of consensus decision records\n            stream: Output stream\n            \n        Raises:\n            ExportException: If export fails",
              "parameters": [
                "self",
                "records",
                "stream"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "write_consensus_records",
              "line_number": 92,
              "docstring": "Write consensus records to NDJSON file.\n        \n        Args:\n            records: List of consensus decision records\n            file_path: Output file path (str or Path)\n            \n        Raises:\n            ExportException: If export fails",
              "parameters": [
                "self",
                "records",
                "file_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "validate_consensus_record",
              "line_number": 105,
              "docstring": "Validate a consensus record against the output schema.\n        \n        Args:\n            record: The consensus record to validate\n            \n        Returns:\n            The validated record (potentially with normalized fields)\n            \n        Raises:\n            ExportException: If validation fails",
              "parameters": [
                "self",
                "record"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "_normalize_consensus_record",
              "line_number": 129,
              "docstring": "Normalize consensus record fields for consistent output.\n        \n        Args:\n            record: The record to normalize\n            \n        Returns:\n            Normalized record",
              "parameters": [
                "self",
                "record"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_format_validation_error",
              "line_number": 166,
              "docstring": "Format a jsonschema ValidationError into a clear error message.\n        \n        Args:\n            error: The validation error\n            \n        Returns:\n            Formatted error message",
              "parameters": [
                "self",
                "error"
              ],
              "is_private": true,
              "is_dunder": false
            }
          ]
        },
        {
          "name": "AnalyticsWriter",
          "line_number": 183,
          "docstring": "Specialized writer for analytics and reporting data.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 186,
              "docstring": "",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "write_analytics_report",
              "line_number": 189,
              "docstring": "Write analytics report to NDJSON format.\n        \n        Args:\n            analytics_data: Analytics data dictionary\n            file_path: Output file path\n            overwrite: Whether to overwrite existing files\n            \n        Raises:\n            ExportException: If export fails",
              "parameters": [
                "self",
                "analytics_data",
                "file_path",
                "overwrite"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        }
      ],
      "total_functions": 2,
      "total_classes": 3,
      "has_main": false,
      "error": null
    },
    {
      "file_path": "src\\compareblocks\\mapping\\match.py",
      "module_name": "match",
      "relative_path": "src\\compareblocks\\mapping\\match.py",
      "functions": [],
      "classes": [
        {
          "name": "MatchConfig",
          "line_number": 13,
          "docstring": "Configuration for IoU-based matching.",
          "methods": []
        },
        {
          "name": "MatchResult",
          "line_number": 22,
          "docstring": "Result of matching an external variation to seed blocks.",
          "methods": []
        },
        {
          "name": "IoUMatcher",
          "line_number": 31,
          "docstring": "IoU-based matcher for mapping external variations to seed blocks.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 34,
              "docstring": "Initialize the matcher with configuration.",
              "parameters": [
                "self",
                "config"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "calculate_iou",
              "line_number": 38,
              "docstring": "Calculate Intersection over Union (IoU) between two bounding boxes.\n        \n        Args:\n            bbox1: First bounding box\n            bbox2: Second bounding box\n            \n        Returns:\n            IoU score between 0 and 1",
              "parameters": [
                "self",
                "bbox1",
                "bbox2"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "calculate_overlap_area",
              "line_number": 73,
              "docstring": "Calculate the overlap area between two bounding boxes.\n        \n        Args:\n            bbox1: First bounding box\n            bbox2: Second bounding box\n            \n        Returns:\n            Overlap area",
              "parameters": [
                "self",
                "bbox1",
                "bbox2"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "match_to_seed_blocks",
              "line_number": 96,
              "docstring": "Match an external bounding box to seed blocks using IoU.\n        \n        Args:\n            external_bbox: Bounding box from external extraction\n            seed_blocks: List of seed blocks to match against\n            page_filter: Optional page number to filter seed blocks\n            \n        Returns:\n            List of match results sorted by IoU score (descending)",
              "parameters": [
                "self",
                "external_bbox",
                "seed_blocks",
                "page_filter"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "find_best_match",
              "line_number": 154,
              "docstring": "Find the best matching seed block for an external bounding box.\n        \n        Args:\n            external_bbox: Bounding box from external extraction\n            seed_blocks: List of seed blocks to match against\n            page_filter: Optional page number to filter seed blocks\n            \n        Returns:\n            Best match result or None if no good match found",
              "parameters": [
                "self",
                "external_bbox",
                "seed_blocks",
                "page_filter"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "handle_exact_matches",
              "line_number": 184,
              "docstring": "Handle exact matches and slightly larger/smaller bounding boxes.\n        \n        Args:\n            external_bbox: Bounding box from external extraction\n            seed_blocks: List of seed blocks to match against\n            page_filter: Optional page number to filter seed blocks\n            \n        Returns:\n            List of exact or near-exact matches",
              "parameters": [
                "self",
                "external_bbox",
                "seed_blocks",
                "page_filter"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_match_statistics",
              "line_number": 211,
              "docstring": "Get statistics about matching performance across multiple external boxes.\n        \n        Args:\n            external_bboxes: List of external bounding boxes\n            seed_blocks: List of seed blocks\n            \n        Returns:\n            Dictionary with matching statistics",
              "parameters": [
                "self",
                "external_bboxes",
                "seed_blocks"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        }
      ],
      "total_functions": 0,
      "total_classes": 3,
      "has_main": false,
      "error": null
    },
    {
      "file_path": "src\\compareblocks\\mapping\\variation_block.py",
      "module_name": "variation_block",
      "relative_path": "src\\compareblocks\\mapping\\variation_block.py",
      "functions": [],
      "classes": [
        {
          "name": "VariationType",
          "line_number": 14,
          "docstring": "Types of variation blocks.",
          "methods": []
        },
        {
          "name": "VariationBlock",
          "line_number": 23,
          "docstring": "Represents a text variation block from any engine.",
          "methods": [
            {
              "name": "__post_init__",
              "line_number": 52,
              "docstring": "Validate variation block data.",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "is_mapped",
              "line_number": 65,
              "docstring": "Check if this variation is mapped to a seed block.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "is_child_variation",
              "line_number": 69,
              "docstring": "Check if this is a child variation block.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "is_orphan",
              "line_number": 73,
              "docstring": "Check if this is an orphaned (unmatched) variation.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "add_child",
              "line_number": 77,
              "docstring": "Add a child variation to this block.",
              "parameters": [
                "self",
                "child_variation_id"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_metadata_value",
              "line_number": 82,
              "docstring": "Get a value from original metadata.",
              "parameters": [
                "self",
                "key",
                "default"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        },
        {
          "name": "ExternalVariation",
          "line_number": 88,
          "docstring": "Represents an external variation before mapping.",
          "methods": []
        },
        {
          "name": "VariationBlockManager",
          "line_number": 101,
          "docstring": "Manages variation blocks and handles mapping to seed blocks.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 104,
              "docstring": "Initialize the variation block manager.",
              "parameters": [
                "self",
                "match_config"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "_generate_variation_id",
              "line_number": 111,
              "docstring": "Generate a unique variation ID.",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "add_seed_blocks",
              "line_number": 117,
              "docstring": "Add seed blocks to the manager.",
              "parameters": [
                "self",
                "seed_blocks"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "map_external_variation",
              "line_number": 141,
              "docstring": "Map an external variation to seed blocks and create variation block.\n        \n        Args:\n            external_var: External variation to map\n            \n        Returns:\n            Created variation block",
              "parameters": [
                "self",
                "external_var"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_variations_for_block",
              "line_number": 247,
              "docstring": "Get all variations mapped to a specific seed block.",
              "parameters": [
                "self",
                "block_id"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_child_variations",
              "line_number": 255,
              "docstring": "Get all child variations for a parent block.",
              "parameters": [
                "self",
                "parent_block_id"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_orphan_variations",
              "line_number": 264,
              "docstring": "Get all orphaned (unmatched) variations.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_variations_by_page",
              "line_number": 272,
              "docstring": "Get all variations for a specific page.",
              "parameters": [
                "self",
                "page"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_variations_by_engine",
              "line_number": 280,
              "docstring": "Get all variations from a specific engine.",
              "parameters": [
                "self",
                "engine"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_mapping_statistics",
              "line_number": 288,
              "docstring": "Get statistics about variation mapping.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "create_overlapping_regions",
              "line_number": 336,
              "docstring": "Create child variation blocks for overlapping regions.\n        \n        Args:\n            variations: List of variations to analyze for overlaps\n            \n        Returns:\n            List of new child variation blocks for overlapping regions",
              "parameters": [
                "self",
                "variations"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        }
      ],
      "total_functions": 0,
      "total_classes": 4,
      "has_main": false,
      "error": null
    },
    {
      "file_path": "src\\compareblocks\\mcp\\client.py",
      "module_name": "client",
      "relative_path": "src\\compareblocks\\mcp\\client.py",
      "functions": [],
      "classes": [
        {
          "name": "MCPClient",
          "line_number": 20,
          "docstring": "MCP Client for connecting to BECR MCP servers.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 23,
              "docstring": "",
              "parameters": [
                "self",
                "server_url"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "set_notification_handler",
              "line_number": 188,
              "docstring": "Set handler for notification events.",
              "parameters": [
                "self",
                "event_type",
                "handler"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "is_connected",
              "line_number": 270,
              "docstring": "Check if client is connected.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "is_initialized",
              "line_number": 274,
              "docstring": "Check if client is initialized.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_client_info",
              "line_number": 278,
              "docstring": "Get client information.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        }
      ],
      "total_functions": 0,
      "total_classes": 1,
      "has_main": false,
      "error": null
    },
    {
      "file_path": "src\\compareblocks\\mcp\\handlers.py",
      "module_name": "handlers",
      "relative_path": "src\\compareblocks\\mcp\\handlers.py",
      "functions": [],
      "classes": [
        {
          "name": "ProcessingSession",
          "line_number": 27,
          "docstring": "Represents a processing session.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 30,
              "docstring": "",
              "parameters": [
                "self",
                "session_id",
                "pdf_path",
                "metadata"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "update_status",
              "line_number": 42,
              "docstring": "Update session status.",
              "parameters": [
                "self",
                "status",
                "progress",
                "error"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "to_dict",
              "line_number": 51,
              "docstring": "Convert session to dictionary.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        },
        {
          "name": "ExtractionHandler",
          "line_number": 66,
          "docstring": "Handler for extraction submission requests.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 69,
              "docstring": "",
              "parameters": [
                "self",
                "validator",
                "protocol"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "_map_variations_to_blocks",
              "line_number": 159,
              "docstring": "Map external variations to seed blocks.",
              "parameters": [
                "self",
                "variations",
                "seed_blocks"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_calculate_iou",
              "line_number": 186,
              "docstring": "Calculate Intersection over Union for two bounding boxes.",
              "parameters": [
                "self",
                "bbox1",
                "bbox2"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_generate_results",
              "line_number": 223,
              "docstring": "Generate final processing results.",
              "parameters": [
                "self",
                "consensus_results",
                "metadata"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "get_session",
              "line_number": 264,
              "docstring": "Get processing session by ID.",
              "parameters": [
                "self",
                "session_id"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "list_sessions",
              "line_number": 268,
              "docstring": "List all processing sessions.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        },
        {
          "name": "StatusHandler",
          "line_number": 273,
          "docstring": "Handler for status monitoring requests.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 276,
              "docstring": "",
              "parameters": [
                "self",
                "extraction_handler"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "handle_status_request",
              "line_number": 279,
              "docstring": "Handle status request.",
              "parameters": [
                "self",
                "params"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "handle_results_request",
              "line_number": 310,
              "docstring": "Handle results retrieval request.",
              "parameters": [
                "self",
                "params"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "_generate_analytics",
              "line_number": 348,
              "docstring": "Generate analytics for session results.",
              "parameters": [
                "self",
                "session"
              ],
              "is_private": true,
              "is_dunder": false
            }
          ]
        }
      ],
      "total_functions": 0,
      "total_classes": 3,
      "has_main": false,
      "error": null
    },
    {
      "file_path": "src\\compareblocks\\mcp\\protocol.py",
      "module_name": "protocol",
      "relative_path": "src\\compareblocks\\mcp\\protocol.py",
      "functions": [],
      "classes": [
        {
          "name": "MCPMessageType",
          "line_number": 18,
          "docstring": "MCP message types.",
          "methods": []
        },
        {
          "name": "MCPMethod",
          "line_number": 26,
          "docstring": "Supported MCP methods.",
          "methods": []
        },
        {
          "name": "MCPMessage",
          "line_number": 37,
          "docstring": "Base MCP message structure.",
          "methods": [
            {
              "name": "__post_init__",
              "line_number": 46,
              "docstring": "",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "to_dict",
              "line_number": 50,
              "docstring": "Convert message to dictionary.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "to_json",
              "line_number": 56,
              "docstring": "Convert message to JSON string.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "from_dict",
              "line_number": 61,
              "docstring": "Create message from dictionary.",
              "parameters": [
                "cls",
                "data"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "from_json",
              "line_number": 66,
              "docstring": "Create message from JSON string.",
              "parameters": [
                "cls",
                "json_str"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        },
        {
          "name": "MCPError",
          "line_number": 73,
          "docstring": "MCP error structure.",
          "methods": []
        },
        {
          "name": "MCPErrorCode",
          "line_number": 80,
          "docstring": "Standard MCP error codes.",
          "methods": []
        },
        {
          "name": "MCPProtocol",
          "line_number": 90,
          "docstring": "MCP Protocol handler for BECR system.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 93,
              "docstring": "",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "create_request",
              "line_number": 103,
              "docstring": "Create an MCP request message.",
              "parameters": [
                "self",
                "method",
                "params"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "create_response",
              "line_number": 110,
              "docstring": "Create an MCP response message.",
              "parameters": [
                "self",
                "request_id",
                "result"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "create_error_response",
              "line_number": 117,
              "docstring": "Create an MCP error response.",
              "parameters": [
                "self",
                "request_id",
                "error_code",
                "message",
                "data"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "create_notification",
              "line_number": 130,
              "docstring": "Create an MCP notification message.",
              "parameters": [
                "self",
                "method",
                "params"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "validate_message",
              "line_number": 137,
              "docstring": "Validate MCP message structure.",
              "parameters": [
                "self",
                "message"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "handle_initialize",
              "line_number": 155,
              "docstring": "Handle MCP initialize request.",
              "parameters": [
                "self",
                "params"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "subscribe_client",
              "line_number": 169,
              "docstring": "Subscribe client to event notifications.",
              "parameters": [
                "self",
                "client_id",
                "event_types"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "unsubscribe_client",
              "line_number": 178,
              "docstring": "Unsubscribe client from event notifications.",
              "parameters": [
                "self",
                "client_id",
                "event_types"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_subscribers",
              "line_number": 186,
              "docstring": "Get list of subscribers for an event type.",
              "parameters": [
                "self",
                "event_type"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "create_status_update",
              "line_number": 190,
              "docstring": "Create status update notification.",
              "parameters": [
                "self",
                "status_data"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "create_processing_complete",
              "line_number": 200,
              "docstring": "Create processing complete notification.",
              "parameters": [
                "self",
                "result_data"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        }
      ],
      "total_functions": 0,
      "total_classes": 6,
      "has_main": false,
      "error": null
    },
    {
      "file_path": "src\\compareblocks\\mcp\\server.py",
      "module_name": "server",
      "relative_path": "src\\compareblocks\\mcp\\server.py",
      "functions": [],
      "classes": [
        {
          "name": "MCPServer",
          "line_number": 23,
          "docstring": "MCP Server for BECR system.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 26,
              "docstring": "",
              "parameters": [
                "self",
                "host",
                "port"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "get_server_info",
              "line_number": 260,
              "docstring": "Get server information.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_client_info",
              "line_number": 271,
              "docstring": "Get information about connected clients.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        }
      ],
      "total_functions": 0,
      "total_classes": 1,
      "has_main": false,
      "error": null
    },
    {
      "file_path": "src\\compareblocks\\mcp\\validation.py",
      "module_name": "validation",
      "relative_path": "src\\compareblocks\\mcp\\validation.py",
      "functions": [],
      "classes": [
        {
          "name": "MCPValidator",
          "line_number": 18,
          "docstring": "Validator for MCP messages and extraction data.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 21,
              "docstring": "",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "_load_mcp_schemas",
              "line_number": 24,
              "docstring": "Load MCP message schemas.",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "validate_extraction_submission",
              "line_number": 81,
              "docstring": "Validate extraction submission data.",
              "parameters": [
                "self",
                "data"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "validate_status_request",
              "line_number": 106,
              "docstring": "Validate status request data.",
              "parameters": [
                "self",
                "data"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "validate_results_request",
              "line_number": 114,
              "docstring": "Validate results request data.",
              "parameters": [
                "self",
                "data"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "validate_subscription_request",
              "line_number": 122,
              "docstring": "Validate subscription request data.",
              "parameters": [
                "self",
                "data"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "validate_consensus_output",
              "line_number": 130,
              "docstring": "Validate consensus output data.",
              "parameters": [
                "self",
                "data"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "sanitize_extraction_data",
              "line_number": 138,
              "docstring": "Sanitize extraction data for security.",
              "parameters": [
                "self",
                "data"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "validate_pdf_path",
              "line_number": 174,
              "docstring": "Validate PDF file path for security.",
              "parameters": [
                "self",
                "pdf_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_schema",
              "line_number": 206,
              "docstring": "Get MCP schema by name.",
              "parameters": [
                "self",
                "schema_name"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "list_schemas",
              "line_number": 210,
              "docstring": "List available schema names.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        }
      ],
      "total_functions": 0,
      "total_classes": 1,
      "has_main": false,
      "error": null
    },
    {
      "file_path": "src\\compareblocks\\normalize\\textnorm.py",
      "module_name": "textnorm",
      "relative_path": "src\\compareblocks\\normalize\\textnorm.py",
      "functions": [
        {
          "name": "normalize_text",
          "line_number": 366,
          "docstring": "Convenience function for basic text normalization.\n    \n    Args:\n        text: Text to normalize\n        config: Optional normalization configuration\n        \n    Returns:\n        Normalized text",
          "parameters": [
            "text",
            "config"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "normalize_preserving_structure",
          "line_number": 381,
          "docstring": "Convenience function for structure-preserving normalization.\n    \n    Args:\n        text: Text to normalize\n        config: Optional normalization configuration\n        \n    Returns:\n        Normalized text with preserved structure",
          "parameters": [
            "text",
            "config"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "create_standard_config",
          "line_number": 396,
          "docstring": "Create standard normalization configuration for PDF text.",
          "parameters": [],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "create_aggressive_config",
          "line_number": 412,
          "docstring": "Create aggressive normalization configuration for noisy OCR text.",
          "parameters": [],
          "is_private": false,
          "is_main": false
        }
      ],
      "classes": [
        {
          "name": "NormalizationConfig",
          "line_number": 15,
          "docstring": "Configuration for text normalization behavior.",
          "methods": []
        },
        {
          "name": "TextNormalizer",
          "line_number": 37,
          "docstring": "Core text normalization engine with configurable behavior.\n    Handles UTF-8 normalization, whitespace, and hyphenation joining.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 43,
              "docstring": "Initialize normalizer with configuration.",
              "parameters": [
                "self",
                "config"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "_load_dictionaries",
              "line_number": 49,
              "docstring": "Load word dictionaries for hyphenation confidence.",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_compile_patterns",
              "line_number": 74,
              "docstring": "Compile regex patterns for normalization.",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "normalize_text",
              "line_number": 95,
              "docstring": "Apply complete text normalization pipeline.\n        \n        Args:\n            text: Raw input text to normalize\n            \n        Returns:\n            Normalized text with consistent formatting",
              "parameters": [
                "self",
                "text"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "_normalize_unicode",
              "line_number": 125,
              "docstring": "Apply Unicode normalization (NFC by default).",
              "parameters": [
                "self",
                "text"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_normalize_special_characters",
              "line_number": 129,
              "docstring": "Normalize fancy spaces, quotes, and dashes.",
              "parameters": [
                "self",
                "text"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_normalize_whitespace",
              "line_number": 147,
              "docstring": "Normalize whitespace while preserving intentional formatting.",
              "parameters": [
                "self",
                "text"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_join_hyphenated_words",
              "line_number": 168,
              "docstring": "Join hyphenated words across line breaks with confidence checking.\n        Only joins when dictionary/bigram confidence is high.",
              "parameters": [
                "self",
                "text"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_calculate_join_confidence",
              "line_number": 193,
              "docstring": "Calculate confidence for joining hyphenated words.\n        \n        Args:\n            word1: First part of hyphenated word\n            word2: Second part of hyphenated word\n            joined_word: Potential joined word\n            \n        Returns:\n            Confidence score (0.0 to 1.0)",
              "parameters": [
                "self",
                "word1",
                "word2",
                "joined_word"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_has_valid_word_pattern",
              "line_number": 236,
              "docstring": "Check if word has valid English word patterns.",
              "parameters": [
                "self",
                "word"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_final_cleanup",
              "line_number": 258,
              "docstring": "Final cleanup and trimming.",
              "parameters": [
                "self",
                "text"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "get_normalization_stats",
              "line_number": 279,
              "docstring": "Get statistics about the normalization process.\n        \n        Args:\n            original: Original text\n            normalized: Normalized text\n            \n        Returns:\n            Dictionary with normalization statistics",
              "parameters": [
                "self",
                "original",
                "normalized"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        },
        {
          "name": "TokenPreservingNormalizer",
          "line_number": 302,
          "docstring": "Extended normalizer that preserves intentional line breaks and tokenization.\n    Suitable for structured documents where formatting carries meaning.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 308,
              "docstring": "Initialize with preservation-focused configuration.",
              "parameters": [
                "self",
                "config"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "normalize_preserving_structure",
              "line_number": 319,
              "docstring": "Normalize text while preserving document structure.\n        \n        Args:\n            text: Input text with structural formatting\n            \n        Returns:\n            Normalized text with preserved structure",
              "parameters": [
                "self",
                "text"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "_protect_structural_elements",
              "line_number": 340,
              "docstring": "Protect structural elements during normalization.",
              "parameters": [
                "self",
                "text"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_restore_structural_elements",
              "line_number": 353,
              "docstring": "Restore protected structural elements.",
              "parameters": [
                "self",
                "text"
              ],
              "is_private": true,
              "is_dunder": false
            }
          ]
        }
      ],
      "total_functions": 4,
      "total_classes": 3,
      "has_main": false,
      "error": null
    },
    {
      "file_path": "src\\compareblocks\\processing\\dynamic_reprocessor.py",
      "module_name": "dynamic_reprocessor",
      "relative_path": "src\\compareblocks\\processing\\dynamic_reprocessor.py",
      "functions": [
        {
          "name": "rebuild_all_comparisons",
          "line_number": 629,
          "docstring": "Rebuild all comparisons for a PDF.",
          "parameters": [
            "pdf_path",
            "storage_mode"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "incremental_processing_for_new_files",
          "line_number": 636,
          "docstring": "Process new files incrementally.",
          "parameters": [
            "pdf_path",
            "new_files"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "update_consistency_percentages",
          "line_number": 642,
          "docstring": "Update consistency percentages for a PDF.",
          "parameters": [
            "pdf_path"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "detect_reprocessing_needs",
          "line_number": 648,
          "docstring": "Detect if reprocessing is needed for a PDF.",
          "parameters": [
            "pdf_path"
          ],
          "is_private": false,
          "is_main": false
        }
      ],
      "classes": [
        {
          "name": "ProcessingMode",
          "line_number": 28,
          "docstring": "Processing modes for dynamic reprocessing.",
          "methods": []
        },
        {
          "name": "VersionStorageMode",
          "line_number": 36,
          "docstring": "Storage modes for version tracking.",
          "methods": []
        },
        {
          "name": "ProcessingVersion",
          "line_number": 44,
          "docstring": "Version information for a processing run.",
          "methods": []
        },
        {
          "name": "ReprocessingTrigger",
          "line_number": 63,
          "docstring": "Trigger for reprocessing based on changes.",
          "methods": []
        },
        {
          "name": "IncrementalUpdate",
          "line_number": 72,
          "docstring": "Information about an incremental update.",
          "methods": []
        },
        {
          "name": "DynamicReprocessor",
          "line_number": 83,
          "docstring": "Dynamic reprocessing engine for BECR system.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 86,
              "docstring": "Initialize the dynamic reprocessor.",
              "parameters": [
                "self",
                "storage_directory"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "generate_configuration_hash",
              "line_number": 107,
              "docstring": "Generate hash for configuration to detect changes.",
              "parameters": [
                "self",
                "configuration"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_current_configuration",
              "line_number": 117,
              "docstring": "Get current effective configuration for all engines.",
              "parameters": [
                "self",
                "pdf_path",
                "include_timestamp"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "create_processing_version",
              "line_number": 137,
              "docstring": "Create a new processing version.",
              "parameters": [
                "self",
                "pdf_path",
                "processing_mode",
                "storage_mode",
                "engines_used",
                "parent_version_id",
                "description"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "save_processing_version",
              "line_number": 165,
              "docstring": "Save processing version to storage.",
              "parameters": [
                "self",
                "version"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "load_processing_versions",
              "line_number": 175,
              "docstring": "Load all processing versions.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_latest_version",
              "line_number": 195,
              "docstring": "Get the latest processing version for a PDF.",
              "parameters": [
                "self",
                "pdf_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "detect_configuration_changes",
              "line_number": 207,
              "docstring": "Detect if configuration has changed since last processing.",
              "parameters": [
                "self",
                "pdf_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "_compare_configurations",
              "line_number": 232,
              "docstring": "Compare two configurations and identify changes.",
              "parameters": [
                "self",
                "old_config",
                "new_config"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "detect_new_associated_files",
              "line_number": 262,
              "docstring": "Detect if new associated files have been added.",
              "parameters": [
                "self",
                "pdf_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "create_reprocessing_trigger",
              "line_number": 283,
              "docstring": "Create a reprocessing trigger.",
              "parameters": [
                "self",
                "trigger_type",
                "trigger_data",
                "requires_full_rebuild"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "rebuild_all_comparisons",
              "line_number": 299,
              "docstring": "Rebuild all comparisons from scratch.\n        \n        Args:\n            pdf_path: Path to PDF file\n            storage_mode: How to store the results\n            description: Description of the rebuild\n            \n        Returns:\n            ProcessingVersion with results",
              "parameters": [
                "self",
                "pdf_path",
                "storage_mode",
                "description"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "incremental_processing",
              "line_number": 379,
              "docstring": "Process only new associated files incrementally.\n        \n        Args:\n            pdf_path: Path to PDF file\n            new_files: List of new files to process\n            base_version_id: Base version to build upon\n            \n        Returns:\n            IncrementalUpdate with results",
              "parameters": [
                "self",
                "pdf_path",
                "new_files",
                "base_version_id"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "update_consistency_percentages",
              "line_number": 444,
              "docstring": "Update consistency percentages without full reprocessing.\n        \n        Args:\n            pdf_path: Path to PDF file\n            \n        Returns:\n            Updated consistency statistics",
              "parameters": [
                "self",
                "pdf_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "_extract_blocks_from_content",
              "line_number": 501,
              "docstring": "Extract blocks from text content (simplified implementation).",
              "parameters": [
                "self",
                "text_content"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_get_block_variations",
              "line_number": 517,
              "docstring": "Get all variations of a block from all associated files.",
              "parameters": [
                "self",
                "block_id",
                "associations"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_save_full_processing_data",
              "line_number": 528,
              "docstring": "Save full processing data.",
              "parameters": [
                "self",
                "version",
                "consistency_results",
                "associations"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_save_stats_only",
              "line_number": 554,
              "docstring": "Save only statistics and configuration.",
              "parameters": [
                "self",
                "version"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_save_config_only",
              "line_number": 573,
              "docstring": "Save only configuration metadata.",
              "parameters": [
                "self",
                "version"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "get_processing_history",
              "line_number": 589,
              "docstring": "Get processing history for a PDF.",
              "parameters": [
                "self",
                "pdf_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "cleanup_old_versions",
              "line_number": 594,
              "docstring": "Clean up old processing versions, keeping only the most recent.",
              "parameters": [
                "self",
                "pdf_path",
                "keep_count"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        }
      ],
      "total_functions": 4,
      "total_classes": 6,
      "has_main": false,
      "error": null
    },
    {
      "file_path": "src\\compareblocks\\project\\manager.py",
      "module_name": "manager",
      "relative_path": "src\\compareblocks\\project\\manager.py",
      "functions": [
        {
          "name": "create_project_structure",
          "line_number": 361,
          "docstring": "Convenience function to create project structure.",
          "parameters": [
            "pdf_path"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "validate_project_structure",
          "line_number": 367,
          "docstring": "Convenience function to validate project structure.",
          "parameters": [
            "pdf_path"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "get_project_summary",
          "line_number": 373,
          "docstring": "Convenience function to get project summary.",
          "parameters": [
            "pdf_path"
          ],
          "is_private": false,
          "is_main": false
        }
      ],
      "classes": [
        {
          "name": "FileStatus",
          "line_number": 19,
          "docstring": "Status information for a tracked file.",
          "methods": []
        },
        {
          "name": "ProjectStructure",
          "line_number": 30,
          "docstring": "Project structure information.",
          "methods": []
        },
        {
          "name": "ProjectManager",
          "line_number": 42,
          "docstring": "Comprehensive project management for BECR system.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 45,
              "docstring": "Initialize project manager.",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "create_project_structure",
              "line_number": 52,
              "docstring": "Create comprehensive project structure for a PDF.",
              "parameters": [
                "self",
                "pdf_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "_find_previous_results",
              "line_number": 84,
              "docstring": "Find previous processing results for a PDF.",
              "parameters": [
                "self",
                "pdf_path"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_validate_project_files",
              "line_number": 106,
              "docstring": "Validate all files in project structure.",
              "parameters": [
                "self",
                "structure"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "get_file_status",
              "line_number": 117,
              "docstring": "Get comprehensive status for a file.",
              "parameters": [
                "self",
                "file_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "_calculate_checksum",
              "line_number": 158,
              "docstring": "Calculate MD5 checksum for a file.",
              "parameters": [
                "self",
                "file_path"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "validate_project_structure",
              "line_number": 169,
              "docstring": "Validate project structure and return detailed report.",
              "parameters": [
                "self",
                "pdf_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_project_structure",
              "line_number": 202,
              "docstring": "Get project structure, creating if necessary.",
              "parameters": [
                "self",
                "pdf_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "find_moved_files",
              "line_number": 215,
              "docstring": "Find files that may have been moved by searching for similar names.",
              "parameters": [
                "self",
                "pdf_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "relocate_file",
              "line_number": 247,
              "docstring": "Relocate a file in the project structure.",
              "parameters": [
                "self",
                "old_path",
                "new_path",
                "pdf_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_reprocessing_files",
              "line_number": 279,
              "docstring": "Get all files that should be considered for reprocessing.",
              "parameters": [
                "self",
                "pdf_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "create_project_manifest",
              "line_number": 292,
              "docstring": "Create a comprehensive project manifest.",
              "parameters": [
                "self",
                "pdf_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "save_project_manifest",
              "line_number": 324,
              "docstring": "Save project manifest to file.",
              "parameters": [
                "self",
                "pdf_path",
                "output_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "clear_cache",
              "line_number": 338,
              "docstring": "Clear all cached data.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_project_summary",
              "line_number": 343,
              "docstring": "Get a summary of the project status.",
              "parameters": [
                "self",
                "pdf_path"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        }
      ],
      "total_functions": 3,
      "total_classes": 3,
      "has_main": false,
      "error": null
    },
    {
      "file_path": "src\\compareblocks\\testing\\coverage_tracker.py",
      "module_name": "coverage_tracker",
      "relative_path": "src\\compareblocks\\testing\\coverage_tracker.py",
      "functions": [
        {
          "name": "track_parameter_test",
          "line_number": 569,
          "docstring": "Track a parameter test result.",
          "parameters": [
            "engine_name",
            "function_name",
            "parameter_set",
            "test_success",
            "execution_time",
            "pdf_file",
            "test_output_size",
            "error_message"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "track_file_type_test",
          "line_number": 591,
          "docstring": "Track a file type test result.",
          "parameters": [
            "engine_name",
            "file_type",
            "file_path",
            "test_success",
            "extraction_time",
            "output_quality_score",
            "error_message"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "generate_coverage_report",
          "line_number": 612,
          "docstring": "Generate coverage report for engines.",
          "parameters": [
            "engine_name"
          ],
          "is_private": false,
          "is_main": false
        }
      ],
      "classes": [
        {
          "name": "ParameterTestRecord",
          "line_number": 21,
          "docstring": "Record of parameter testing for a function.",
          "methods": []
        },
        {
          "name": "FileTypeTestRecord",
          "line_number": 35,
          "docstring": "Record of file type testing for an engine.",
          "methods": []
        },
        {
          "name": "CoverageGap",
          "line_number": 48,
          "docstring": "Represents a gap in test coverage.",
          "methods": []
        },
        {
          "name": "CoverageTracker",
          "line_number": 59,
          "docstring": "Tracks and manages test coverage for engine functions.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 62,
              "docstring": "Initialize coverage tracker.\n        \n        Args:\n            db_path: Path to SQLite database file",
              "parameters": [
                "self",
                "db_path"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "_init_database",
              "line_number": 77,
              "docstring": "Initialize SQLite database for coverage tracking.",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "record_parameter_test",
              "line_number": 134,
              "docstring": "Record a parameter test result.\n        \n        Args:\n            record: Parameter test record",
              "parameters": [
                "self",
                "record"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "record_file_type_test",
              "line_number": 167,
              "docstring": "Record a file type test result.\n        \n        Args:\n            record: File type test record",
              "parameters": [
                "self",
                "record"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "_update_coverage_summary",
              "line_number": 196,
              "docstring": "Update coverage summary for a function.",
              "parameters": [
                "self",
                "cursor",
                "engine_name",
                "function_name"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "get_parameter_coverage",
              "line_number": 243,
              "docstring": "Get parameter coverage for a specific function.\n        \n        Args:\n            engine_name: Name of the engine\n            function_name: Name of the function\n            \n        Returns:\n            Parameter coverage information",
              "parameters": [
                "self",
                "engine_name",
                "function_name"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_file_type_coverage",
              "line_number": 294,
              "docstring": "Get file type coverage for an engine.\n        \n        Args:\n            engine_name: Name of the engine\n            \n        Returns:\n            File type coverage information",
              "parameters": [
                "self",
                "engine_name"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "identify_coverage_gaps",
              "line_number": 341,
              "docstring": "Identify coverage gaps for an engine.\n        \n        Args:\n            engine_name: Name of the engine\n            \n        Returns:\n            List of coverage gaps",
              "parameters": [
                "self",
                "engine_name"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "generate_coverage_report",
              "line_number": 418,
              "docstring": "Generate comprehensive coverage report.\n        \n        Args:\n            engine_name: Specific engine name, or None for all engines\n            \n        Returns:\n            Coverage report data",
              "parameters": [
                "self",
                "engine_name"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "_generate_recommendations",
              "line_number": 501,
              "docstring": "Generate recommendations based on coverage analysis.",
              "parameters": [
                "self",
                "engine_summaries"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "export_coverage_data",
              "line_number": 524,
              "docstring": "Export coverage data to JSON file.\n        \n        Args:\n            output_path: Path to save export file\n            \n        Returns:\n            Path to exported file",
              "parameters": [
                "self",
                "output_path"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        }
      ],
      "total_functions": 3,
      "total_classes": 4,
      "has_main": false,
      "error": null
    },
    {
      "file_path": "src\\compareblocks\\testing\\engine_validator.py",
      "module_name": "engine_validator",
      "relative_path": "src\\compareblocks\\testing\\engine_validator.py",
      "functions": [
        {
          "name": "validate_engine_coverage",
          "line_number": 621,
          "docstring": "Validate test coverage for a specific engine.",
          "parameters": [
            "engine_name"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "validate_all_engines",
          "line_number": 627,
          "docstring": "Validate test coverage for all engines.",
          "parameters": [],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "run_comprehensive_engine_validation",
          "line_number": 633,
          "docstring": "Run comprehensive validation of all engines.",
          "parameters": [
            "pdf_path"
          ],
          "is_private": false,
          "is_main": false
        }
      ],
      "classes": [
        {
          "name": "FunctionTestStatus",
          "line_number": 25,
          "docstring": "Test status for a single function.",
          "methods": [
            {
              "name": "__post_init__",
              "line_number": 39,
              "docstring": "",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": true
            }
          ]
        },
        {
          "name": "EngineTestCoverage",
          "line_number": 47,
          "docstring": "Test coverage summary for an engine.",
          "methods": []
        },
        {
          "name": "EngineValidator",
          "line_number": 58,
          "docstring": "Validates engine functions and tracks test coverage.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 61,
              "docstring": "Initialize engine validator.",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "discover_engine_functions",
              "line_number": 75,
              "docstring": "Discover all functions in an engine.\n        \n        Args:\n            engine_name: Name of the engine\n            \n        Returns:\n            List of (function_name, module_name) tuples",
              "parameters": [
                "self",
                "engine_name"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "find_test_files",
              "line_number": 118,
              "docstring": "Find all test files in the test directory.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "analyze_test_file",
              "line_number": 129,
              "docstring": "Analyze a test file to find tested functions.\n        \n        Args:\n            test_file: Path to test file\n            \n        Returns:\n            Dictionary mapping engine names to tested functions",
              "parameters": [
                "self",
                "test_file"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "validate_engine_coverage",
              "line_number": 184,
              "docstring": "Validate test coverage for a specific engine.\n        \n        Args:\n            engine_name: Name of the engine to validate\n            \n        Returns:\n            Engine test coverage summary",
              "parameters": [
                "self",
                "engine_name"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "validate_all_engines",
              "line_number": 261,
              "docstring": "Validate test coverage for all engines.\n        \n        Returns:\n            Dictionary mapping engine names to coverage summaries",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "run_engine_function_tests",
              "line_number": 296,
              "docstring": "Run actual tests for engine functions with real PDF.\n        \n        Args:\n            engine_name: Name of the engine\n            pdf_path: Path to PDF file for testing\n            \n        Returns:\n            Test execution results",
              "parameters": [
                "self",
                "engine_name",
                "pdf_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "_validate_function_result",
              "line_number": 421,
              "docstring": "Validate function result based on expected output.",
              "parameters": [
                "self",
                "func_name",
                "result"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "generate_coverage_report",
              "line_number": 441,
              "docstring": "Generate comprehensive coverage report.\n        \n        Args:\n            coverage_results: Coverage results for all engines\n            \n        Returns:\n            Path to generated report",
              "parameters": [
                "self",
                "coverage_results"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "run_comprehensive_validation",
              "line_number": 502,
              "docstring": "Run comprehensive validation of all engines.\n        \n        Args:\n            pdf_path: Path to PDF file for testing\n            \n        Returns:\n            Path to comprehensive validation report",
              "parameters": [
                "self",
                "pdf_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "_generate_validation_summary",
              "line_number": 546,
              "docstring": "Generate validation summary.",
              "parameters": [
                "self",
                "coverage_results",
                "function_test_results"
              ],
              "is_private": true,
              "is_dunder": false
            }
          ]
        }
      ],
      "total_functions": 3,
      "total_classes": 3,
      "has_main": false,
      "error": null
    },
    {
      "file_path": "src\\compareblocks\\testing\\performance_tracker.py",
      "module_name": "performance_tracker",
      "relative_path": "src\\compareblocks\\testing\\performance_tracker.py",
      "functions": [
        {
          "name": "record_performance",
          "line_number": 563,
          "docstring": "Record a performance metric.",
          "parameters": [
            "engine_name",
            "function_name",
            "pdf_file",
            "pdf_size_mb",
            "pdf_pages",
            "execution_time",
            "success",
            "memory_usage_mb",
            "cpu_usage_percent",
            "output_size_bytes",
            "error_message"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "generate_performance_report",
          "line_number": 588,
          "docstring": "Generate performance report for engines.",
          "parameters": [
            "engine_name"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "compare_engine_performance",
          "line_number": 594,
          "docstring": "Compare performance across engines for a function.",
          "parameters": [
            "engine_names",
            "function_name"
          ],
          "is_private": false,
          "is_main": false
        }
      ],
      "classes": [
        {
          "name": "PerformanceMetric",
          "line_number": 22,
          "docstring": "Performance metric for a single test run.",
          "methods": [
            {
              "name": "__post_init__",
              "line_number": 37,
              "docstring": "",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": true
            }
          ]
        },
        {
          "name": "PerformanceBenchmark",
          "line_number": 43,
          "docstring": "Performance benchmark for an engine function.",
          "methods": []
        },
        {
          "name": "OptimizationOpportunity",
          "line_number": 59,
          "docstring": "Represents a performance optimization opportunity.",
          "methods": []
        },
        {
          "name": "PerformanceTracker",
          "line_number": 72,
          "docstring": "Tracks and analyzes performance metrics for engine functions.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 75,
              "docstring": "Initialize performance tracker.\n        \n        Args:\n            db_path: Path to SQLite database file",
              "parameters": [
                "self",
                "db_path"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "_init_database",
              "line_number": 90,
              "docstring": "Initialize SQLite database for performance tracking.",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "record_performance_metric",
              "line_number": 156,
              "docstring": "Record a performance metric.\n        \n        Args:\n            metric: Performance metric to record",
              "parameters": [
                "self",
                "metric"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "calculate_benchmarks",
              "line_number": 189,
              "docstring": "Calculate performance benchmarks for an engine function.\n        \n        Args:\n            engine_name: Name of the engine\n            function_name: Name of the function\n            days_back: Number of days to look back for data\n            \n        Returns:\n            Performance benchmark or None if insufficient data",
              "parameters": [
                "self",
                "engine_name",
                "function_name",
                "days_back"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "identify_optimization_opportunities",
              "line_number": 279,
              "docstring": "Identify performance optimization opportunities.\n        \n        Args:\n            engine_name: Specific engine name, or None for all engines\n            \n        Returns:\n            List of optimization opportunities",
              "parameters": [
                "self",
                "engine_name"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_performance_comparison",
              "line_number": 398,
              "docstring": "Compare performance across multiple engines for a function.\n        \n        Args:\n            engine_names: List of engine names to compare\n            function_name: Function name to compare\n            \n        Returns:\n            Performance comparison data",
              "parameters": [
                "self",
                "engine_names",
                "function_name"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "generate_performance_report",
              "line_number": 445,
              "docstring": "Generate comprehensive performance report.\n        \n        Args:\n            engine_name: Specific engine name, or None for all engines\n            days_back: Number of days to include in analysis\n            \n        Returns:\n            Performance report data",
              "parameters": [
                "self",
                "engine_name",
                "days_back"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "export_performance_data",
              "line_number": 521,
              "docstring": "Export performance data to JSON file.\n        \n        Args:\n            output_path: Path to save export file\n            \n        Returns:\n            Path to exported file",
              "parameters": [
                "self",
                "output_path"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        }
      ],
      "total_functions": 3,
      "total_classes": 4,
      "has_main": false,
      "error": null
    },
    {
      "file_path": "validate_configuration.py",
      "module_name": "validate_configuration",
      "relative_path": "validate_configuration.py",
      "functions": [
        {
          "name": "test_configuration",
          "line_number": 13,
          "docstring": "Test the configuration setup.",
          "parameters": [],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "test_file_paths",
          "line_number": 49,
          "docstring": "Test all configured file paths.",
          "parameters": [],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "test_gbg_processor",
          "line_number": 89,
          "docstring": "Test the GBG processor with configuration.",
          "parameters": [],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "test_output_generation",
          "line_number": 136,
          "docstring": "Test output file generation.",
          "parameters": [],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "main",
          "line_number": 177,
          "docstring": "Run all validation tests.",
          "parameters": [],
          "is_private": false,
          "is_main": true
        }
      ],
      "classes": [],
      "total_functions": 5,
      "total_classes": 0,
      "has_main": true,
      "error": null
    },
    {
      "file_path": "validate_function_catalog.py",
      "module_name": "validate_function_catalog",
      "relative_path": "validate_function_catalog.py",
      "functions": [
        {
          "name": "main",
          "line_number": 20,
          "docstring": "Run the function catalog validation.",
          "parameters": [],
          "is_private": false,
          "is_main": true
        }
      ],
      "classes": [],
      "total_functions": 1,
      "total_classes": 0,
      "has_main": true,
      "error": null
    },
    {
      "file_path": "validate_setup.py",
      "module_name": "validate_setup",
      "relative_path": "validate_setup.py",
      "functions": [
        {
          "name": "check_python_version",
          "line_number": 11,
          "docstring": "Check Python version requirement.",
          "parameters": [],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "check_virtual_environment",
          "line_number": 21,
          "docstring": "Check if virtual environment exists and is activated.",
          "parameters": [],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "check_package_structure",
          "line_number": 40,
          "docstring": "Check if package structure is correct.",
          "parameters": [],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "check_immutable_runners",
          "line_number": 71,
          "docstring": "Check if immutable runner files exist and work.",
          "parameters": [],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "check_dependencies",
          "line_number": 88,
          "docstring": "Check if key dependencies are installed.",
          "parameters": [],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "check_project_files",
          "line_number": 123,
          "docstring": "Check if essential project files exist.",
          "parameters": [],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "run_basic_tests",
          "line_number": 145,
          "docstring": "Run basic project structure tests.",
          "parameters": [],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "main",
          "line_number": 168,
          "docstring": "Main validation function.",
          "parameters": [],
          "is_private": false,
          "is_main": true
        }
      ],
      "classes": [],
      "total_functions": 8,
      "total_classes": 0,
      "has_main": true,
      "error": null
    },
    {
      "file_path": "visual_ocr_testing_tool.py",
      "module_name": "visual_ocr_testing_tool",
      "relative_path": "visual_ocr_testing_tool.py",
      "functions": [
        {
          "name": "run_cli_optimization",
          "line_number": 2187,
          "docstring": "Run CLI OCR optimization.",
          "parameters": [
            "args"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "run_engine_test",
          "line_number": 2244,
          "docstring": "Run improved engine test.",
          "parameters": [
            "args"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "run_debug_extraction",
          "line_number": 2281,
          "docstring": "Run debug image extraction.",
          "parameters": [
            "args"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "main",
          "line_number": 2317,
          "docstring": "Main entry point with multi-input feed support.",
          "parameters": [],
          "is_private": false,
          "is_main": true
        },
        {
          "name": "run_cli_optimization",
          "line_number": 2466,
          "docstring": "Run CLI OCR optimization with feed support.",
          "parameters": [
            "args",
            "engine"
          ],
          "is_private": false,
          "is_main": false
        },
        {
          "name": "run_engine_test",
          "line_number": 2556,
          "docstring": "Run improved engine test with feed support.",
          "parameters": [
            "args",
            "engine"
          ],
          "is_private": false,
          "is_main": false
        }
      ],
      "classes": [
        {
          "name": "InputFeedConfig",
          "line_number": 88,
          "docstring": "Configuration for input feed sources.",
          "methods": []
        },
        {
          "name": "TestResult",
          "line_number": 99,
          "docstring": "Standardized test result structure.",
          "methods": []
        },
        {
          "name": "InputFeedManager",
          "line_number": 116,
          "docstring": "Manages multiple input feeds for the OCR testing tool.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 119,
              "docstring": "",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "register_feed",
              "line_number": 126,
              "docstring": "Register a new input feed.",
              "parameters": [
                "self",
                "config"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "add_callback",
              "line_number": 135,
              "docstring": "Add callback for feed updates.",
              "parameters": [
                "self",
                "callback"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "start_feeds",
              "line_number": 139,
              "docstring": "Start all enabled feeds.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "stop_feeds",
              "line_number": 146,
              "docstring": "Stop all feeds.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "_run_feed",
              "line_number": 150,
              "docstring": "Run a specific feed in background.",
              "parameters": [
                "self",
                "feed_name"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_fetch_mcp_data",
              "line_number": 192,
              "docstring": "Fetch data from MCP source.",
              "parameters": [
                "self",
                "config"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_fetch_json_data",
              "line_number": 223,
              "docstring": "Fetch data from JSON file or configuration.",
              "parameters": [
                "self",
                "config"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_fetch_api_data",
              "line_number": 245,
              "docstring": "Fetch data from API endpoint.",
              "parameters": [
                "self",
                "config"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_fetch_file_data",
              "line_number": 266,
              "docstring": "Fetch data from file system monitoring.",
              "parameters": [
                "self",
                "config"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_fetch_database_data",
              "line_number": 297,
              "docstring": "Fetch data from database connection.",
              "parameters": [
                "self",
                "config"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_fetch_code_data",
              "line_number": 331,
              "docstring": "Fetch data from direct code integration.",
              "parameters": [
                "self",
                "config"
              ],
              "is_private": true,
              "is_dunder": false
            }
          ]
        },
        {
          "name": "TestResultDatabase",
          "line_number": 363,
          "docstring": "Database for storing and retrieving test results.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 366,
              "docstring": "",
              "parameters": [
                "self",
                "db_path"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "_init_database",
              "line_number": 371,
              "docstring": "Initialize the database schema.",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "save_test_result",
              "line_number": 408,
              "docstring": "Save a test result to the database.",
              "parameters": [
                "self",
                "result"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_test_results",
              "line_number": 438,
              "docstring": "Retrieve test results from the database.",
              "parameters": [
                "self",
                "limit",
                "test_type"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "save_feed_data",
              "line_number": 479,
              "docstring": "Save feed data to the database.",
              "parameters": [
                "self",
                "feed_name",
                "feed_type",
                "data"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        },
        {
          "name": "OCROptimizationEngine",
          "line_number": 498,
          "docstring": "Core OCR optimization and testing engine with multi-input feed support.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 501,
              "docstring": "",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "_setup_default_feeds",
              "line_number": 529,
              "docstring": "Setup default input feeds.",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_discover_source_docs_feeds",
              "line_number": 601,
              "docstring": "Auto-discover and register JSON feeds from Source_docs directory.",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_handle_feed_update",
              "line_number": 654,
              "docstring": "Handle updates from input feeds.",
              "parameters": [
                "self",
                "feed_name",
                "data"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_process_gbg_update",
              "line_number": 668,
              "docstring": "Process GBG analysis updates.",
              "parameters": [
                "self",
                "data"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_process_mcp_update",
              "line_number": 680,
              "docstring": "Process MCP configuration updates.",
              "parameters": [
                "self",
                "data"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_process_system_status",
              "line_number": 691,
              "docstring": "Process system status updates.",
              "parameters": [
                "self",
                "data"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "start_feeds",
              "line_number": 715,
              "docstring": "Start all input feeds.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "stop_feeds",
              "line_number": 719,
              "docstring": "Stop all input feeds.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "get_feed_status",
              "line_number": 723,
              "docstring": "Get status of all input feeds.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "add_custom_feed",
              "line_number": 736,
              "docstring": "Add a custom input feed.",
              "parameters": [
                "self",
                "config"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "load_configuration_from_feed",
              "line_number": 740,
              "docstring": "Load configuration from a specific feed.",
              "parameters": [
                "self",
                "feed_name"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "_minimal_preprocessing",
              "line_number": 747,
              "docstring": "Minimal preprocessing - just grayscale.",
              "parameters": [
                "self",
                "image"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_light_preprocessing",
              "line_number": 755,
              "docstring": "Light preprocessing - optimal for clear text.",
              "parameters": [
                "self",
                "image"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_enhanced_preprocessing",
              "line_number": 764,
              "docstring": "Enhanced preprocessing with morphological operations.",
              "parameters": [
                "self",
                "image"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_aggressive_preprocessing",
              "line_number": 775,
              "docstring": "Aggressive preprocessing (for comparison).",
              "parameters": [
                "self",
                "image"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "extract_block_region",
              "line_number": 788,
              "docstring": "Extract specific block region for testing.",
              "parameters": [
                "self",
                "pdf_path",
                "page_num",
                "block_index"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "test_ocr_configuration",
              "line_number": 830,
              "docstring": "Test specific OCR configuration.",
              "parameters": [
                "self",
                "region",
                "expected_text",
                "preprocessing_func",
                "tesseract_config"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "optimize_ocr_parameters",
              "line_number": 877,
              "docstring": "Run full OCR parameter optimization.",
              "parameters": [
                "self",
                "pdf_path",
                "page_num",
                "block_index"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "test_improved_engine",
              "line_number": 903,
              "docstring": "Test the improved GBG-guided Tesseract engine.",
              "parameters": [
                "self",
                "pdf_path",
                "page_num"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        },
        {
          "name": "VisualOCRTestingWidget",
          "line_number": 924,
          "docstring": "GUI widget for visual OCR testing and optimization with multi-input feeds.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 927,
              "docstring": "",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": true
            },
            {
              "name": "setup_ui",
              "line_number": 938,
              "docstring": "Setup the visual testing UI with input feeds.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "create_feeds_tab",
              "line_number": 971,
              "docstring": "Create input feeds monitoring tab.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "create_configuration_tab",
              "line_number": 1010,
              "docstring": "Create configuration management tab.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "create_history_tab",
              "line_number": 1059,
              "docstring": "Create test results history tab.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "update_feed_status",
              "line_number": 1109,
              "docstring": "Update the feed status display.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "refresh_feeds",
              "line_number": 1135,
              "docstring": "Refresh all input feeds.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "add_custom_feed",
              "line_number": 1151,
              "docstring": "Add a custom input feed with enhanced source selection.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "browse_feed_source",
              "line_number": 1225,
              "docstring": "Browse for feed source based on type.",
              "parameters": [
                "self",
                "feed_type",
                "source_edit"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "browse_source_docs_for_feed",
              "line_number": 1244,
              "docstring": "Browse Source_docs directory for feed source.",
              "parameters": [
                "self",
                "source_edit"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "update_source_options",
              "line_number": 1258,
              "docstring": "Update source options based on feed type.",
              "parameters": [
                "self",
                "type_combo",
                "source_layout"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "discover_and_enable_feeds",
              "line_number": 1263,
              "docstring": "Discover and enable Source_docs feeds through GUI selection.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "load_configuration",
              "line_number": 1356,
              "docstring": "Load configuration from selected source.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "save_configuration",
              "line_number": 1388,
              "docstring": "Save current configuration.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "apply_configuration",
              "line_number": 1403,
              "docstring": "Apply current configuration to the testing engine.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "load_test_history",
              "line_number": 1426,
              "docstring": "Load test results history.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "browse_json_files",
              "line_number": 1463,
              "docstring": "Browse and select JSON files with enhanced filtering.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "browse_source_docs_json",
              "line_number": 1475,
              "docstring": "Browse JSON files specifically in Source_docs directory with recursive selection.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "populate_json_tree",
              "line_number": 1538,
              "docstring": "Populate the JSON tree with files from Source_docs directory.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "preview_json_file",
              "line_number": 1609,
              "docstring": "Preview selected JSON file content.",
              "parameters": [
                "self",
                "item",
                "column"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "load_json_file",
              "line_number": 1664,
              "docstring": "Load and display JSON file content in the configuration editor with comprehensive validation.",
              "parameters": [
                "self",
                "file_path"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "_validate_json_format",
              "line_number": 1774,
              "docstring": "Validate JSON format and return validation result with examples.",
              "parameters": [
                "self",
                "data"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_validate_gbg_json_format",
              "line_number": 1801,
              "docstring": "Validate GBG analysis JSON format with detailed examples.",
              "parameters": [
                "self",
                "data"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "_validate_consensus_json_format",
              "line_number": 1865,
              "docstring": "Validate consensus decisions JSON format with detailed examples.",
              "parameters": [
                "self",
                "data"
              ],
              "is_private": true,
              "is_dunder": false
            },
            {
              "name": "closeEvent",
              "line_number": 1906,
              "docstring": "Handle widget close event.",
              "parameters": [
                "self",
                "event"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "create_optimization_tab",
              "line_number": 1911,
              "docstring": "Create OCR optimization testing tab.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "create_engine_testing_tab",
              "line_number": 1947,
              "docstring": "Create engine testing tab.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "create_debug_images_tab",
              "line_number": 1976,
              "docstring": "Create debug images tab.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "run_ocr_optimization",
              "line_number": 2016,
              "docstring": "Run OCR parameter optimization.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "test_improved_engine",
              "line_number": 2064,
              "docstring": "Test the improved OCR engine.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "extract_debug_images",
              "line_number": 2125,
              "docstring": "Extract debug images.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            },
            {
              "name": "open_debug_report",
              "line_number": 2164,
              "docstring": "Open the HTML debug report.",
              "parameters": [
                "self"
              ],
              "is_private": false,
              "is_dunder": false
            }
          ]
        },
        {
          "name": "VisualOCRTestingApp",
          "line_number": 2174,
          "docstring": "Main application window for visual OCR testing.",
          "methods": [
            {
              "name": "__init__",
              "line_number": 2177,
              "docstring": "",
              "parameters": [
                "self"
              ],
              "is_private": true,
              "is_dunder": true
            }
          ]
        }
      ],
      "total_functions": 6,
      "total_classes": 7,
      "has_main": true,
      "error": null
    }
  ]
}