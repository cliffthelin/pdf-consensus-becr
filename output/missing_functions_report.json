{
  "timestamp": "2025-10-27 17:30:24",
  "total_missing": 329,
  "by_module": {
    "compareblocks.analytics.dashboard": 6,
    "compareblocks.analytics.engine_analytics": 12,
    "compareblocks.analytics.export": 11,
    "compareblocks.analytics.report_generator": 10,
    "compareblocks.association.alignment": 4,
    "compareblocks.association.manager": 7,
    "compareblocks.association.parsers": 16,
    "compareblocks.associationmupdf_matcher": 3,
    "compareblocks.association.tesseract_matcher": 2,
    "compareblocks.config.engine_config": 20,
    "compareblocks.config.file_manager": 4,
    "compareblocks.debug.image_extractor": 4,
    "compareblocks.engines.docling_engine": 6,
    "compareblocks.engines.dual_output_processor": 5,
    "compareblocks.engines.gbg_guided_tesseract_engine": 2,
    "compareblocks.engines.gbg_integrated_processor": 3,
    "compareblocks.engines.integrated_processor": 5,
    "compareblocks.engines.kreuzberg_engine": 6,
    "compareblocks.engines.manager": 10,
    "compareblocks.engines.paddleocr_engine": 6,
    "compareblocks.enginesmupdf_engine": 5,
    "compareblocks.engines.tesseract_engine": 6,
    "compareblocks.features.anomaly": 1,
    "compareblocks.features.context": 1,
    "compareblocks.features.core": 1,
    "compareblocks.features.language": 1,
    "compareblocks.gbg.ids": 3,
    "compareblocks.gui.app": 15,
    "compareblocks.gui.config_forms": 31,
    "compareblocks.gui.import_dialog": 18,
    "compareblocks.gui.pdf_viewer": 21,
    "compareblocks.gui.review_gui": 30,
    "compareblocks.gui.variations_panel": 12,
    "compareblocks.io.pdf_metadata": 6,
    "compareblocks.io.writer": 1,
    "compareblocks.testing.coverage_tracker": 11,
    "compareblocks.testing.engine_validator": 13,
    "compareblocks.testing.performance_tracker": 11
  },
  "by_class": {
    "AnalyticsDashboard": 4,
    "module_level": 49,
    "EnginePerformanceMetrics": 1,
    "EngineAnalytics": 9,
    "AnalyticsExporter": 9,
    "AnalyticsReport": 1,
    "ReportGenerator": 7,
    "ContentAligner": 2,
    "AssociationManager": 5,
    "FormatParser": 2,
    "CSVParser": 2,
    "HTMLParser": 2,
    "JSONParser": 2,
    "MarkdownParser": 2,
    "TextParser": 2,
    "PyMuPDFBlockMatcher": 2,
    "TesseractBlockMatcher": 2,
    "EngineConfiguration": 2,
    "EngineConfigurationManager": 18,
    "FileManager": 4,
    "ImageRegionExtractor": 3,
    "DoclingEngine": 4,
    "DualOutputEngineProcessor": 3,
    "GBGGuidedTesseractEngine": 2,
    "GBGIntegratedEngineProcessor": 2,
    "IntegratedEngineProcessor": 3,
    "KreuzbergEngine": 4,
    "ExtractionEngineManager": 7,
    "PaddleOCREngine": 4,
    "PyMuPDFEngine": 3,
    "TesseractEngine": 4,
    "AnomalyFeatures": 1,
    "ContextFeatures": 1,
    "LengthFeatures": 1,
    "LanguageFeatures": 1,
    "BlockIDGenerator": 3,
    "DebugImageWidget": 7,
    "BECRMainWindow": 6,
    "ParameterWidget": 4,
    "EngineConfigurationForm": 5,
    "PDFOverrideForm": 9,
    "OptimizationProposalWidget": 6,
    "ConfigurationManagerWidget": 7,
    "ValidationWorker": 2,
    "NDJSONPreviewWidget": 3,
    "ImportOptionsWidget": 4,
    "ImportDialog": 9,
    "PDFPageWidget": 10,
    "PDFViewer": 11,
    "ReviewDataManager": 8,
    "ReviewGUI": 22,
    "TextDiffWidget": 2,
    "VariationsTable": 4,
    "VariationsPanel": 6,
    "PDFMetadataExtractor": 4,
    "NDJSONWriter": 1,
    "CoverageTracker": 8,
    "FunctionTestStatus": 1,
    "EngineValidator": 9,
    "PerformanceMetric": 1,
    "PerformanceTracker": 7
  },
  "by_test_file": {
    "tests/unit/test_dashboard.py": 6,
    "tests/unit/test_engine_analytics.py": 12,
    "tests/unit/test_export.py": 11,
    "tests/unit/test_report_generator.py": 10,
    "tests/unit/test_alignment.py": 4,
    "tests/unit/test_manager.py": 17,
    "tests/unit/test_parsers.py": 16,
    "tests/unit/test_associationmupdf_matcher.py": 3,
    "tests/unit/test_tesseract_matcher.py": 2,
    "tests/unit/test_engine_config.py": 20,
    "tests/unit/test_file_manager.py": 4,
    "tests/unit/test_image_extractor.py": 4,
    "tests/unit/test_docling_engine.py": 6,
    "tests/unit/test_dual_output_processor.py": 5,
    "tests/unit/test_gbg_guided_tesseract_engine.py": 2,
    "tests/unit/test_gbg_integrated_processor.py": 3,
    "tests/unit/test_integrated_processor.py": 5,
    "tests/unit/test_kreuzberg_engine.py": 6,
    "tests/unit/test_paddleocr_engine.py": 6,
    "tests/unit/test_enginesmupdf_engine.py": 5,
    "tests/unit/test_tesseract_engine.py": 6,
    "tests/unit/test_anomaly.py": 1,
    "tests/unit/test_context.py": 1,
    "tests/unit/test_core.py": 1,
    "tests/unit/test_language.py": 1,
    "tests/unit/test_ids.py": 3,
    "tests/unit/test_app.py": 15,
    "tests/unit/test_config_forms.py": 31,
    "tests/unit/test_import_dialog.py": 18,
    "tests/unit/test_pdf_viewer.py": 21,
    "tests/unit/test_review_gui.py": 30,
    "tests/unit/test_variations_panel.py": 12,
    "tests/unit/test_pdf_metadata.py": 6,
    "tests/unit/test_writer.py": 1,
    "tests/unit/test_coverage_tracker.py": 11,
    "tests/unit/test_engine_validator.py": 13,
    "tests/unit/test_performance_tracker.py": 11
  },
  "functions": [
    {
      "function_name": "AnalyticsDashboard.__init__",
      "module": "compareblocks.analytics.dashboard",
      "class": "AnalyticsDashboard",
      "description": "Initialize analytics dashboard.",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_dashboard.py",
      "test_description": "Tests AnalyticsDashboard.__init__ functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\analytics\\dashboard.py",
      "line_number": 22
    },
    {
      "function_name": "AnalyticsDashboard.create_performance_dashboard",
      "module": "compareblocks.analytics.dashboard",
      "class": "AnalyticsDashboard",
      "description": "Create a performance dashboard view.",
      "parameters": [
        "self",
        "metrics"
      ],
      "return_type": "Dict[str, Any]",
      "test_file": "tests/unit/test_dashboard.py",
      "test_description": "Tests AnalyticsDashboard.create_performance_dashboard functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\analytics\\dashboard.py",
      "line_number": 27
    },
    {
      "function_name": "AnalyticsDashboard.create_quality_dashboard",
      "module": "compareblocks.analytics.dashboard",
      "class": "AnalyticsDashboard",
      "description": "Create a quality metrics dashboard view.",
      "parameters": [
        "self",
        "variation_scores",
        "consensus_decisions"
      ],
      "return_type": "Dict[str, Any]",
      "test_file": "tests/unit/test_dashboard.py",
      "test_description": "Tests AnalyticsDashboard.create_quality_dashboard functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\analytics\\dashboard.py",
      "line_number": 81
    },
    {
      "function_name": "AnalyticsDashboard.create_optimization_dashboard",
      "module": "compareblocks.analytics.dashboard",
      "class": "AnalyticsDashboard",
      "description": "Create an optimization insights dashboard.",
      "parameters": [
        "self",
        "metrics",
        "recent_reports"
      ],
      "return_type": "Dict[str, Any]",
      "test_file": "tests/unit/test_dashboard.py",
      "test_description": "Tests AnalyticsDashboard.create_optimization_dashboard functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\analytics\\dashboard.py",
      "line_number": 152
    },
    {
      "function_name": "create_performance_dashboard",
      "module": "compareblocks.analytics.dashboard",
      "class": null,
      "description": "Convenience function to create a performance dashboard.",
      "parameters": [
        "metrics"
      ],
      "return_type": "Dict[str, Any]",
      "test_file": "tests/unit/test_dashboard.py",
      "test_description": "Tests create_performance_dashboard functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\analytics\\dashboard.py",
      "line_number": 543
    },
    {
      "function_name": "create_quality_dashboard",
      "module": "compareblocks.analytics.dashboard",
      "class": null,
      "description": "Convenience function to create a quality dashboard.",
      "parameters": [
        "variation_scores",
        "consensus_decisions"
      ],
      "return_type": "Dict[str, Any]",
      "test_file": "tests/unit/test_dashboard.py",
      "test_description": "Tests create_quality_dashboard functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\analytics\\dashboard.py",
      "line_number": 557
    },
    {
      "function_name": "EnginePerformanceMetrics.to_dict",
      "module": "compareblocks.analytics.engine_analytics",
      "class": "EnginePerformanceMetrics",
      "description": "Convert to dictionary format.",
      "parameters": [
        "self"
      ],
      "return_type": "Dict[str, Any]",
      "test_file": "tests/unit/test_engine_analytics.py",
      "test_description": "Tests EnginePerformanceMetrics.to_dict functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\analytics\\engine_analytics.py",
      "line_number": 46
    },
    {
      "function_name": "EngineAnalytics.__init__",
      "module": "compareblocks.analytics.engine_analytics",
      "class": "EngineAnalytics",
      "description": "Initialize engine analytics.",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_engine_analytics.py",
      "test_description": "Tests EngineAnalytics.__init__ functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\analytics\\engine_analytics.py",
      "line_number": 54
    },
    {
      "function_name": "EngineAnalytics.analyze_engine_results",
      "module": "compareblocks.analytics.engine_analytics",
      "class": "EngineAnalytics",
      "description": "Analyze engine extraction results and generate performance metrics.",
      "parameters": [
        "self",
        "engine_results"
      ],
      "return_type": "Dict[str, EnginePerformanceMetrics]",
      "test_file": "tests/unit/test_engine_analytics.py",
      "test_description": "Tests EngineAnalytics.analyze_engine_results functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\analytics\\engine_analytics.py",
      "line_number": 61
    },
    {
      "function_name": "EngineAnalytics.analyze_consensus_decisions",
      "module": "compareblocks.analytics.engine_analytics",
      "class": "EngineAnalytics",
      "description": "Analyze consensus decisions to generate engine performance metrics.",
      "parameters": [
        "self",
        "decisions"
      ],
      "return_type": "Dict[str, EnginePerformanceMetrics]",
      "test_file": "tests/unit/test_engine_analytics.py",
      "test_description": "Tests EngineAnalytics.analyze_consensus_decisions functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\analytics\\engine_analytics.py",
      "line_number": 114
    },
    {
      "function_name": "EngineAnalytics.analyze_variation_scores",
      "module": "compareblocks.analytics.engine_analytics",
      "class": "EngineAnalytics",
      "description": "Analyze variation scores to generate engine performance metrics.",
      "parameters": [
        "self",
        "variation_scores"
      ],
      "return_type": "Dict[str, EnginePerformanceMetrics]",
      "test_file": "tests/unit/test_engine_analytics.py",
      "test_description": "Tests EngineAnalytics.analyze_variation_scores functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\analytics\\engine_analytics.py",
      "line_number": 214
    },
    {
      "function_name": "EngineAnalytics.combine_metrics",
      "module": "compareblocks.analytics.engine_analytics",
      "class": "EngineAnalytics",
      "description": "Combine multiple engine performance metrics dictionaries.",
      "parameters": [
        "self"
      ],
      "return_type": "Dict[str, EnginePerformanceMetrics]",
      "test_file": "tests/unit/test_engine_analytics.py",
      "test_description": "Tests EngineAnalytics.combine_metrics functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\analytics\\engine_analytics.py",
      "line_number": 285
    },
    {
      "function_name": "EngineAnalytics.get_engine_rankings",
      "module": "compareblocks.analytics.engine_analytics",
      "class": "EngineAnalytics",
      "description": "Rank engines by overall performance score.",
      "parameters": [
        "self",
        "metrics"
      ],
      "return_type": "List[Tuple[str, float]]",
      "test_file": "tests/unit/test_engine_analytics.py",
      "test_description": "Tests EngineAnalytics.get_engine_rankings functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\analytics\\engine_analytics.py",
      "line_number": 407
    },
    {
      "function_name": "EngineAnalytics.get_performance_summary",
      "module": "compareblocks.analytics.engine_analytics",
      "class": "EngineAnalytics",
      "description": "Generate a performance summary across all engines.",
      "parameters": [
        "self",
        "metrics"
      ],
      "return_type": "Dict[str, Any]",
      "test_file": "tests/unit/test_engine_analytics.py",
      "test_description": "Tests EngineAnalytics.get_performance_summary functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\analytics\\engine_analytics.py",
      "line_number": 435
    },
    {
      "function_name": "EngineAnalytics.save_metrics",
      "module": "compareblocks.analytics.engine_analytics",
      "class": "EngineAnalytics",
      "description": "Save engine performance metrics to file.",
      "parameters": [
        "self",
        "metrics",
        "output_path"
      ],
      "return_type": "Path",
      "test_file": "tests/unit/test_engine_analytics.py",
      "test_description": "Tests EngineAnalytics.save_metrics functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\analytics\\engine_analytics.py",
      "line_number": 480
    },
    {
      "function_name": "EngineAnalytics.load_metrics",
      "module": "compareblocks.analytics.engine_analytics",
      "class": "EngineAnalytics",
      "description": "Load engine performance metrics from file.",
      "parameters": [
        "self",
        "file_path"
      ],
      "return_type": "Dict[str, EnginePerformanceMetrics]",
      "test_file": "tests/unit/test_engine_analytics.py",
      "test_description": "Tests EngineAnalytics.load_metrics functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\analytics\\engine_analytics.py",
      "line_number": 517
    },
    {
      "function_name": "analyze_engine_performance",
      "module": "compareblocks.analytics.engine_analytics",
      "class": null,
      "description": "Convenience function to analyze engine performance from various data sources.",
      "parameters": [
        "engine_results",
        "consensus_decisions",
        "variation_scores"
      ],
      "return_type": "Dict[str, EnginePerformanceMetrics]",
      "test_file": "tests/unit/test_engine_analytics.py",
      "test_description": "Tests analyze_engine_performance functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\analytics\\engine_analytics.py",
      "line_number": 538
    },
    {
      "function_name": "get_engine_rankings",
      "module": "compareblocks.analytics.engine_analytics",
      "class": null,
      "description": "Convenience function to get engine rankings.",
      "parameters": [
        "metrics"
      ],
      "return_type": "List[Tuple[str, float]]",
      "test_file": "tests/unit/test_engine_analytics.py",
      "test_description": "Tests get_engine_rankings functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\analytics\\engine_analytics.py",
      "line_number": 570
    },
    {
      "function_name": "AnalyticsExporter.__init__",
      "module": "compareblocks.analytics.export",
      "class": "AnalyticsExporter",
      "description": "Initialize analytics exporter.",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_export.py",
      "test_description": "Tests AnalyticsExporter.__init__ functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\analytics\\export.py",
      "line_number": 23
    },
    {
      "function_name": "AnalyticsExporter.export_engine_metrics_json",
      "module": "compareblocks.analytics.export",
      "class": "AnalyticsExporter",
      "description": "Export engine metrics to JSON format.",
      "parameters": [
        "self",
        "metrics",
        "output_path"
      ],
      "return_type": "Path",
      "test_file": "tests/unit/test_export.py",
      "test_description": "Tests AnalyticsExporter.export_engine_metrics_json functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\analytics\\export.py",
      "line_number": 27
    },
    {
      "function_name": "AnalyticsExporter.export_engine_metrics_csv",
      "module": "compareblocks.analytics.export",
      "class": "AnalyticsExporter",
      "description": "Export engine metrics to CSV format.",
      "parameters": [
        "self",
        "metrics",
        "output_path"
      ],
      "return_type": "Path",
      "test_file": "tests/unit/test_export.py",
      "test_description": "Tests AnalyticsExporter.export_engine_metrics_csv functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\analytics\\export.py",
      "line_number": 64
    },
    {
      "function_name": "AnalyticsExporter.export_engine_metrics_ndjson",
      "module": "compareblocks.analytics.export",
      "class": "AnalyticsExporter",
      "description": "Export engine metrics to NDJSON format.",
      "parameters": [
        "self",
        "metrics",
        "output_path"
      ],
      "return_type": "Path",
      "test_file": "tests/unit/test_export.py",
      "test_description": "Tests AnalyticsExporter.export_engine_metrics_ndjson functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\analytics\\export.py",
      "line_number": 138
    },
    {
      "function_name": "AnalyticsExporter.export_analytics_report",
      "module": "compareblocks.analytics.export",
      "class": "AnalyticsExporter",
      "description": "Export analytics report in specified format.",
      "parameters": [
        "self",
        "report",
        "format_type",
        "output_path"
      ],
      "return_type": "Path",
      "test_file": "tests/unit/test_export.py",
      "test_description": "Tests AnalyticsExporter.export_analytics_report functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\analytics\\export.py",
      "line_number": 171
    },
    {
      "function_name": "AnalyticsExporter.export_dashboard_data",
      "module": "compareblocks.analytics.export",
      "class": "AnalyticsExporter",
      "description": "Export dashboard data for external visualization tools.",
      "parameters": [
        "self",
        "dashboard_data",
        "output_path"
      ],
      "return_type": "Path",
      "test_file": "tests/unit/test_export.py",
      "test_description": "Tests AnalyticsExporter.export_dashboard_data functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\analytics\\export.py",
      "line_number": 292
    },
    {
      "function_name": "AnalyticsExporter.export_comparison_data",
      "module": "compareblocks.analytics.export",
      "class": "AnalyticsExporter",
      "description": "Export comparison data for trend analysis.",
      "parameters": [
        "self",
        "comparison_data",
        "output_path"
      ],
      "return_type": "Path",
      "test_file": "tests/unit/test_export.py",
      "test_description": "Tests AnalyticsExporter.export_comparison_data functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\analytics\\export.py",
      "line_number": 326
    },
    {
      "function_name": "AnalyticsExporter.export_batch_metrics",
      "module": "compareblocks.analytics.export",
      "class": "AnalyticsExporter",
      "description": "Export multiple sets of engine metrics for batch analysis.",
      "parameters": [
        "self",
        "metrics_list",
        "output_path"
      ],
      "return_type": "Path",
      "test_file": "tests/unit/test_export.py",
      "test_description": "Tests AnalyticsExporter.export_batch_metrics functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\analytics\\export.py",
      "line_number": 352
    },
    {
      "function_name": "AnalyticsExporter.create_export_summary",
      "module": "compareblocks.analytics.export",
      "class": "AnalyticsExporter",
      "description": "Create a summary of exported files.",
      "parameters": [
        "self",
        "exported_files"
      ],
      "return_type": "Dict[str, Any]",
      "test_file": "tests/unit/test_export.py",
      "test_description": "Tests AnalyticsExporter.create_export_summary functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\analytics\\export.py",
      "line_number": 389
    },
    {
      "function_name": "export_engine_metrics",
      "module": "compareblocks.analytics.export",
      "class": null,
      "description": "Convenience function to export engine metrics.",
      "parameters": [
        "metrics",
        "format_type",
        "output_path"
      ],
      "return_type": "Path",
      "test_file": "tests/unit/test_export.py",
      "test_description": "Tests export_engine_metrics functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\analytics\\export.py",
      "line_number": 418
    },
    {
      "function_name": "export_analytics_report",
      "module": "compareblocks.analytics.export",
      "class": null,
      "description": "Convenience function to export analytics report.",
      "parameters": [
        "report",
        "format_type",
        "output_path"
      ],
      "return_type": "Path",
      "test_file": "tests/unit/test_export.py",
      "test_description": "Tests export_analytics_report functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\analytics\\export.py",
      "line_number": 444
    },
    {
      "function_name": "AnalyticsReport.to_dict",
      "module": "compareblocks.analytics.report_generator",
      "class": "AnalyticsReport",
      "description": "Convert to dictionary format.",
      "parameters": [
        "self"
      ],
      "return_type": "Dict[str, Any]",
      "test_file": "tests/unit/test_report_generator.py",
      "test_description": "Tests AnalyticsReport.to_dict functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\analytics\\report_generator.py",
      "line_number": 37
    },
    {
      "function_name": "ReportGenerator.__init__",
      "module": "compareblocks.analytics.report_generator",
      "class": "ReportGenerator",
      "description": "Initialize report generator.",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_report_generator.py",
      "test_description": "Tests ReportGenerator.__init__ functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\analytics\\report_generator.py",
      "line_number": 51
    },
    {
      "function_name": "ReportGenerator.generate_comprehensive_report",
      "module": "compareblocks.analytics.report_generator",
      "class": "ReportGenerator",
      "description": "Generate a comprehensive analytics report.",
      "parameters": [
        "self",
        "engine_results",
        "consensus_decisions",
        "variation_scores",
        "pdf_path"
      ],
      "return_type": "AnalyticsReport",
      "test_file": "tests/unit/test_report_generator.py",
      "test_description": "Tests ReportGenerator.generate_comprehensive_report functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\analytics\\report_generator.py",
      "line_number": 55
    },
    {
      "function_name": "ReportGenerator.generate_engine_performance_report",
      "module": "compareblocks.analytics.report_generator",
      "class": "ReportGenerator",
      "description": "Generate a report focused on engine performance.",
      "parameters": [
        "self",
        "engine_results"
      ],
      "return_type": "AnalyticsReport",
      "test_file": "tests/unit/test_report_generator.py",
      "test_description": "Tests ReportGenerator.generate_engine_performance_report functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\analytics\\report_generator.py",
      "line_number": 120
    },
    {
      "function_name": "ReportGenerator.generate_decision_analysis_report",
      "module": "compareblocks.analytics.report_generator",
      "class": "ReportGenerator",
      "description": "Generate a report focused on consensus decision analysis.",
      "parameters": [
        "self",
        "consensus_decisions"
      ],
      "return_type": "AnalyticsReport",
      "test_file": "tests/unit/test_report_generator.py",
      "test_description": "Tests ReportGenerator.generate_decision_analysis_report functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\analytics\\report_generator.py",
      "line_number": 176
    },
    {
      "function_name": "ReportGenerator.save_report",
      "module": "compareblocks.analytics.report_generator",
      "class": "ReportGenerator",
      "description": "Save analytics report to file.",
      "parameters": [
        "self",
        "report",
        "output_path"
      ],
      "return_type": "Path",
      "test_file": "tests/unit/test_report_generator.py",
      "test_description": "Tests ReportGenerator.save_report functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\analytics\\report_generator.py",
      "line_number": 412
    },
    {
      "function_name": "ReportGenerator.load_report",
      "module": "compareblocks.analytics.report_generator",
      "class": "ReportGenerator",
      "description": "Load analytics report from file.",
      "parameters": [
        "self",
        "file_path"
      ],
      "return_type": "AnalyticsReport",
      "test_file": "tests/unit/test_report_generator.py",
      "test_description": "Tests ReportGenerator.load_report functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\analytics\\report_generator.py",
      "line_number": 437
    },
    {
      "function_name": "ReportGenerator.generate_comparison_report",
      "module": "compareblocks.analytics.report_generator",
      "class": "ReportGenerator",
      "description": "Generate a comparison report from multiple analytics reports.",
      "parameters": [
        "self",
        "reports"
      ],
      "return_type": "Dict[str, Any]",
      "test_file": "tests/unit/test_report_generator.py",
      "test_description": "Tests ReportGenerator.generate_comparison_report functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\analytics\\report_generator.py",
      "line_number": 459
    },
    {
      "function_name": "generate_analytics_report",
      "module": "compareblocks.analytics.report_generator",
      "class": null,
      "description": "Convenience function to generate a comprehensive analytics report.",
      "parameters": [
        "engine_results",
        "consensus_decisions",
        "variation_scores",
        "pdf_path"
      ],
      "return_type": "AnalyticsReport",
      "test_file": "tests/unit/test_report_generator.py",
      "test_description": "Tests generate_analytics_report functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\analytics\\report_generator.py",
      "line_number": 548
    },
    {
      "function_name": "save_analytics_report",
      "module": "compareblocks.analytics.report_generator",
      "class": null,
      "description": "Convenience function to save an analytics report.",
      "parameters": [
        "report",
        "output_path"
      ],
      "return_type": "Path",
      "test_file": "tests/unit/test_report_generator.py",
      "test_description": "Tests save_analytics_report functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\analytics\\report_generator.py",
      "line_number": 573
    },
    {
      "function_name": "ContentAligner.__init__",
      "module": "compareblocks.association.alignment",
      "class": "ContentAligner",
      "description": "Initialize content aligner.",
      "parameters": [
        "self",
        "similarity_threshold"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_alignment.py",
      "test_description": "Tests ContentAligner.__init__ functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\association\\alignment.py",
      "line_number": 27
    },
    {
      "function_name": "ContentAligner.align_to_blocks",
      "module": "compareblocks.association.alignment",
      "class": "ContentAligner",
      "description": "Align content to blocks using fuzzy matching.",
      "parameters": [
        "self",
        "content",
        "blocks"
      ],
      "return_type": "List[AlignmentResult]",
      "test_file": "tests/unit/test_alignment.py",
      "test_description": "Tests ContentAligner.align_to_blocks functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\association\\alignment.py",
      "line_number": 31
    },
    {
      "function_name": "align_content_to_blocks",
      "module": "compareblocks.association.alignment",
      "class": null,
      "description": "Convenience function for content alignment.",
      "parameters": [
        "content",
        "blocks",
        "threshold"
      ],
      "return_type": "List[AlignmentResult]",
      "test_file": "tests/unit/test_alignment.py",
      "test_description": "Tests align_content_to_blocks functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\association\\alignment.py",
      "line_number": 56
    },
    {
      "function_name": "fuzzy_match_content",
      "module": "compareblocks.association.alignment",
      "class": null,
      "description": "Calculate fuzzy match score between two texts.",
      "parameters": [
        "text1",
        "text2"
      ],
      "return_type": "float",
      "test_file": "tests/unit/test_alignment.py",
      "test_description": "Tests fuzzy_match_content functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\association\\alignment.py",
      "line_number": 63
    },
    {
      "function_name": "AssociationManager.__init__",
      "module": "compareblocks.association.manager",
      "class": "AssociationManager",
      "description": "Initialize association manager.",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_manager.py",
      "test_description": "Tests AssociationManager.__init__ functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\association\\manager.py",
      "line_number": 40
    },
    {
      "function_name": "AssociationManager.load_associations_for_pdf",
      "module": "compareblocks.association.manager",
      "class": "AssociationManager",
      "description": "Load all associations for a PDF file.",
      "parameters": [
        "self",
        "pdf_path"
      ],
      "return_type": "PDFAssociations",
      "test_file": "tests/unit/test_manager.py",
      "test_description": "Tests AssociationManager.load_associations_for_pdf functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\association\\manager.py",
      "line_number": 44
    },
    {
      "function_name": "AssociationManager.get_associations",
      "module": "compareblocks.association.manager",
      "class": "AssociationManager",
      "description": "Get cached associations for a PDF.",
      "parameters": [
        "self",
        "pdf_path"
      ],
      "return_type": "Optional[PDFAssociations]",
      "test_file": "tests/unit/test_manager.py",
      "test_description": "Tests AssociationManager.get_associations functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\association\\manager.py",
      "line_number": 106
    },
    {
      "function_name": "AssociationManager.refresh_associations",
      "module": "compareblocks.association.manager",
      "class": "AssociationManager",
      "description": "Refresh associations for a PDF (reload from disk).",
      "parameters": [
        "self",
        "pdf_path"
      ],
      "return_type": "PDFAssociations",
      "test_file": "tests/unit/test_manager.py",
      "test_description": "Tests AssociationManager.refresh_associations functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\association\\manager.py",
      "line_number": 111
    },
    {
      "function_name": "AssociationManager.get_association_summary",
      "module": "compareblocks.association.manager",
      "class": "AssociationManager",
      "description": "Get summary of associations for a PDF.",
      "parameters": [
        "self",
        "pdf_path"
      ],
      "return_type": "Dict[str, Any]",
      "test_file": "tests/unit/test_manager.py",
      "test_description": "Tests AssociationManager.get_association_summary functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\association\\manager.py",
      "line_number": 118
    },
    {
      "function_name": "load_associations_for_pdf",
      "module": "compareblocks.association.manager",
      "class": null,
      "description": "Convenience function to load associations for a PDF.",
      "parameters": [
        "pdf_path"
      ],
      "return_type": "PDFAssociations",
      "test_file": "tests/unit/test_manager.py",
      "test_description": "Tests load_associations_for_pdf functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\association\\manager.py",
      "line_number": 142
    },
    {
      "function_name": "track_association_metadata",
      "module": "compareblocks.association.manager",
      "class": null,
      "description": "Convenience function to get association metadata.",
      "parameters": [
        "pdf_path"
      ],
      "return_type": "Dict[str, AssociationMetadata]",
      "test_file": "tests/unit/test_manager.py",
      "test_description": "Tests track_association_metadata functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\association\\manager.py",
      "line_number": 148
    },
    {
      "function_name": "FormatParser.parse",
      "module": "compareblocks.association.parsers",
      "class": "FormatParser",
      "description": "Parse content and extract meaningful text.",
      "parameters": [
        "self",
        "content",
        "file_path"
      ],
      "return_type": "ParsedContent",
      "test_file": "tests/unit/test_parsers.py",
      "test_description": "Tests FormatParser.parse functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\association\\parsers.py",
      "line_number": 32
    },
    {
      "function_name": "FormatParser.get_format_type",
      "module": "compareblocks.association.parsers",
      "class": "FormatParser",
      "description": "Return the format type this parser handles.",
      "parameters": [
        "self"
      ],
      "return_type": "str",
      "test_file": "tests/unit/test_parsers.py",
      "test_description": "Tests FormatParser.get_format_type functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\association\\parsers.py",
      "line_number": 37
    },
    {
      "function_name": "CSVParser.parse",
      "module": "compareblocks.association.parsers",
      "class": "CSVParser",
      "description": "Parse CSV content and extract tabular data.",
      "parameters": [
        "self",
        "content",
        "file_path"
      ],
      "return_type": "ParsedContent",
      "test_file": "tests/unit/test_parsers.py",
      "test_description": "Tests CSVParser.parse functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\association\\parsers.py",
      "line_number": 45
    },
    {
      "function_name": "CSVParser.get_format_type",
      "module": "compareblocks.association.parsers",
      "class": "CSVParser",
      "description": "Function description",
      "parameters": [
        "self"
      ],
      "return_type": "str",
      "test_file": "tests/unit/test_parsers.py",
      "test_description": "Tests CSVParser.get_format_type functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\association\\parsers.py",
      "line_number": 102
    },
    {
      "function_name": "HTMLParser.parse",
      "module": "compareblocks.association.parsers",
      "class": "HTMLParser",
      "description": "Parse HTML content and extract meaningful text.",
      "parameters": [
        "self",
        "content",
        "file_path"
      ],
      "return_type": "ParsedContent",
      "test_file": "tests/unit/test_parsers.py",
      "test_description": "Tests HTMLParser.parse functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\association\\parsers.py",
      "line_number": 109
    },
    {
      "function_name": "HTMLParser.get_format_type",
      "module": "compareblocks.association.parsers",
      "class": "HTMLParser",
      "description": "Function description",
      "parameters": [
        "self"
      ],
      "return_type": "str",
      "test_file": "tests/unit/test_parsers.py",
      "test_description": "Tests HTMLParser.get_format_type functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\association\\parsers.py",
      "line_number": 181
    },
    {
      "function_name": "JSONParser.parse",
      "module": "compareblocks.association.parsers",
      "class": "JSONParser",
      "description": "Parse JSON content and extract structured data.",
      "parameters": [
        "self",
        "content",
        "file_path"
      ],
      "return_type": "ParsedContent",
      "test_file": "tests/unit/test_parsers.py",
      "test_description": "Tests JSONParser.parse functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\association\\parsers.py",
      "line_number": 188
    },
    {
      "function_name": "JSONParser.get_format_type",
      "module": "compareblocks.association.parsers",
      "class": "JSONParser",
      "description": "Function description",
      "parameters": [
        "self"
      ],
      "return_type": "str",
      "test_file": "tests/unit/test_parsers.py",
      "test_description": "Tests JSONParser.get_format_type functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\association\\parsers.py",
      "line_number": 275
    },
    {
      "function_name": "MarkdownParser.parse",
      "module": "compareblocks.association.parsers",
      "class": "MarkdownParser",
      "description": "Parse Markdown content and extract structured text.",
      "parameters": [
        "self",
        "content",
        "file_path"
      ],
      "return_type": "ParsedContent",
      "test_file": "tests/unit/test_parsers.py",
      "test_description": "Tests MarkdownParser.parse functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\association\\parsers.py",
      "line_number": 282
    },
    {
      "function_name": "MarkdownParser.get_format_type",
      "module": "compareblocks.association.parsers",
      "class": "MarkdownParser",
      "description": "Function description",
      "parameters": [
        "self"
      ],
      "return_type": "str",
      "test_file": "tests/unit/test_parsers.py",
      "test_description": "Tests MarkdownParser.get_format_type functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\association\\parsers.py",
      "line_number": 349
    },
    {
      "function_name": "TextParser.parse",
      "module": "compareblocks.association.parsers",
      "class": "TextParser",
      "description": "Parse plain text content.",
      "parameters": [
        "self",
        "content",
        "file_path"
      ],
      "return_type": "ParsedContent",
      "test_file": "tests/unit/test_parsers.py",
      "test_description": "Tests TextParser.parse functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\association\\parsers.py",
      "line_number": 356
    },
    {
      "function_name": "TextParser.get_format_type",
      "module": "compareblocks.association.parsers",
      "class": "TextParser",
      "description": "Function description",
      "parameters": [
        "self"
      ],
      "return_type": "str",
      "test_file": "tests/unit/test_parsers.py",
      "test_description": "Tests TextParser.get_format_type functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\association\\parsers.py",
      "line_number": 400
    },
    {
      "function_name": "detect_format",
      "module": "compareblocks.association.parsers",
      "class": null,
      "description": "Detect format from file extension.",
      "parameters": [
        "file_path"
      ],
      "return_type": "str",
      "test_file": "tests/unit/test_parsers.py",
      "test_description": "Tests detect_format functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\association\\parsers.py",
      "line_number": 416
    },
    {
      "function_name": "parse_association_file",
      "module": "compareblocks.association.parsers",
      "class": null,
      "description": "Parse an association file using the appropriate format parser.",
      "parameters": [
        "file_path",
        "content"
      ],
      "return_type": "ParsedContent",
      "test_file": "tests/unit/test_parsers.py",
      "test_description": "Tests parse_association_file functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\association\\parsers.py",
      "line_number": 436
    },
    {
      "function_name": "get_available_parsers",
      "module": "compareblocks.association.parsers",
      "class": null,
      "description": "Get all available parsers.",
      "parameters": [],
      "return_type": "Dict[str, FormatParser]",
      "test_file": "tests/unit/test_parsers.py",
      "test_description": "Tests get_available_parsers functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\association\\parsers.py",
      "line_number": 448
    },
    {
      "function_name": "register_parser",
      "module": "compareblocks.association.parsers",
      "class": null,
      "description": "Register a new parser for a format type.",
      "parameters": [
        "format_type",
        "parser"
      ],
      "return_type": "None",
      "test_file": "tests/unit/test_parsers.py",
      "test_description": "Tests register_parser functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\association\\parsers.py",
      "line_number": 453
    },
    {
      "function_name": "PyMuPDFBlockMatcher.__init__",
      "module": "compareblocks.associationmupdf_matcher",
      "class": "PyMuPDFBlockMatcher",
      "description": "Initialize the PyMuPDF block matcher.",
      "parameters": [
        "self",
        "similarity_threshold"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_associationmupdf_matcher.py",
      "test_description": "Tests PyMuPDFBlockMatcher.__init__ functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\association\\pymupdf_matcher.py",
      "line_number": 32
    },
    {
      "function_name": "PyMuPDFBlockMatcher.match_blocks",
      "module": "compareblocks.associationmupdf_matcher",
      "class": "PyMuPDFBlockMatcher",
      "description": "Match PyMuPDF engine blocks to GBG blocks using multiple strategies.",
      "parameters": [
        "self",
        "gbg_data",
        "engine_data"
      ],
      "return_type": "List[PyMuPDFMatch]",
      "test_file": "tests/unit/test_associationmupdf_matcher.py",
      "test_description": "Tests PyMuPDFBlockMatcher.match_blocks functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\association\\pymupdf_matcher.py",
      "line_number": 36
    },
    {
      "function_name": "match_pymupdf_blocks_to_gbg",
      "module": "compareblocks.associationmupdf_matcher",
      "class": null,
      "description": "Match PyMuPDF engine blocks to GBG blocks.",
      "parameters": [
        "gbg_data",
        "engine_data",
        "similarity_threshold"
      ],
      "return_type": "List[PyMuPDFMatch]",
      "test_file": "tests/unit/test_associationmupdf_matcher.py",
      "test_description": "Tests match_pymupdf_blocks_to_gbg functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\association\\pymupdf_matcher.py",
      "line_number": 1192
    },
    {
      "function_name": "TesseractBlockMatcher.__init__",
      "module": "compareblocks.association.tesseract_matcher",
      "class": "TesseractBlockMatcher",
      "description": "Initialize Tesseract matcher with OCR-specific settings.",
      "parameters": [
        "self",
        "similarity_threshold"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_tesseract_matcher.py",
      "test_description": "Tests TesseractBlockMatcher.__init__ functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\association\\tesseract_matcher.py",
      "line_number": 32
    },
    {
      "function_name": "TesseractBlockMatcher.match_blocks",
      "module": "compareblocks.association.tesseract_matcher",
      "class": "TesseractBlockMatcher",
      "description": "Match Tesseract engine blocks to GBG blocks using OCR-aware strategies.",
      "parameters": [
        "self",
        "gbg_data",
        "engine_data"
      ],
      "return_type": "List[TesseractMatch]",
      "test_file": "tests/unit/test_tesseract_matcher.py",
      "test_description": "Tests TesseractBlockMatcher.match_blocks functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\association\\tesseract_matcher.py",
      "line_number": 60
    },
    {
      "function_name": "EngineConfiguration.to_ndjson_line",
      "module": "compareblocks.config.engine_config",
      "class": "EngineConfiguration",
      "description": "Convert to NDJSON line format.",
      "parameters": [
        "self"
      ],
      "return_type": "str",
      "test_file": "tests/unit/test_engine_config.py",
      "test_description": "Tests EngineConfiguration.to_ndjson_line functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\config\\engine_config.py",
      "line_number": 94
    },
    {
      "function_name": "EngineConfiguration.from_ndjson_line",
      "module": "compareblocks.config.engine_config",
      "class": "EngineConfiguration",
      "description": "Create from NDJSON line.",
      "parameters": [
        "cls",
        "line"
      ],
      "return_type": "'EngineConfiguration'",
      "test_file": "tests/unit/test_engine_config.py",
      "test_description": "Tests EngineConfiguration.from_ndjson_line functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\config\\engine_config.py",
      "line_number": 102
    },
    {
      "function_name": "EngineConfigurationManager.__init__",
      "module": "compareblocks.config.engine_config",
      "class": "EngineConfigurationManager",
      "description": "Initialize configuration manager.",
      "parameters": [
        "self",
        "config_file"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_engine_config.py",
      "test_description": "Tests EngineConfigurationManager.__init__ functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\config\\engine_config.py",
      "line_number": 173
    },
    {
      "function_name": "EngineConfigurationManager.add_engine_configuration",
      "module": "compareblocks.config.engine_config",
      "class": "EngineConfigurationManager",
      "description": "Add a new engine configuration with foreign key reference.",
      "parameters": [
        "self",
        "engine_name",
        "parent_config_id"
      ],
      "return_type": "str",
      "test_file": "tests/unit/test_engine_config.py",
      "test_description": "Tests EngineConfigurationManager.add_engine_configuration functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\config\\engine_config.py",
      "line_number": 212
    },
    {
      "function_name": "EngineConfigurationManager.get_engine_configuration",
      "module": "compareblocks.config.engine_config",
      "class": "EngineConfigurationManager",
      "description": "Get active engine configuration.",
      "parameters": [
        "self",
        "engine_name"
      ],
      "return_type": "Optional[EngineConfiguration]",
      "test_file": "tests/unit/test_engine_config.py",
      "test_description": "Tests EngineConfigurationManager.get_engine_configuration functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\config\\engine_config.py",
      "line_number": 239
    },
    {
      "function_name": "EngineConfigurationManager.add_pdf_override",
      "module": "compareblocks.config.engine_config",
      "class": "EngineConfigurationManager",
      "description": "Add PDF-specific configuration override.",
      "parameters": [
        "self",
        "engine_name",
        "pdf_path",
        "overrides"
      ],
      "return_type": "str",
      "test_file": "tests/unit/test_engine_config.py",
      "test_description": "Tests EngineConfigurationManager.add_pdf_override functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\config\\engine_config.py",
      "line_number": 245
    },
    {
      "function_name": "EngineConfigurationManager.get_effective_configuration",
      "module": "compareblocks.config.engine_config",
      "class": "EngineConfigurationManager",
      "description": "Get effective configuration by merging parent, engine, and PDF-specific settings.",
      "parameters": [
        "self",
        "engine_name",
        "pdf_path"
      ],
      "return_type": "Dict[str, Any]",
      "test_file": "tests/unit/test_engine_config.py",
      "test_description": "Tests EngineConfigurationManager.get_effective_configuration functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\config\\engine_config.py",
      "line_number": 273
    },
    {
      "function_name": "EngineConfigurationManager.get_parameter_status",
      "module": "compareblocks.config.engine_config",
      "class": "EngineConfigurationManager",
      "description": "Get parameter status information for GUI awareness.",
      "parameters": [
        "self",
        "engine_name"
      ],
      "return_type": "Dict[str, Dict[str, Any]]",
      "test_file": "tests/unit/test_engine_config.py",
      "test_description": "Tests EngineConfigurationManager.get_parameter_status functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\config\\engine_config.py",
      "line_number": 295
    },
    {
      "function_name": "EngineConfigurationManager.get_tested_parameters",
      "module": "compareblocks.config.engine_config",
      "class": "EngineConfigurationManager",
      "description": "Get list of tested parameters for an engine.",
      "parameters": [
        "self",
        "engine_name"
      ],
      "return_type": "List[str]",
      "test_file": "tests/unit/test_engine_config.py",
      "test_description": "Tests EngineConfigurationManager.get_tested_parameters functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\config\\engine_config.py",
      "line_number": 327
    },
    {
      "function_name": "EngineConfigurationManager.get_auto_optimize_parameters",
      "module": "compareblocks.config.engine_config",
      "class": "EngineConfigurationManager",
      "description": "Get list of parameters included in auto-optimization.",
      "parameters": [
        "self",
        "engine_name"
      ],
      "return_type": "List[str]",
      "test_file": "tests/unit/test_engine_config.py",
      "test_description": "Tests EngineConfigurationManager.get_auto_optimize_parameters functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\config\\engine_config.py",
      "line_number": 335
    },
    {
      "function_name": "EngineConfigurationManager.get_parameters_by_category",
      "module": "compareblocks.config.engine_config",
      "class": "EngineConfigurationManager",
      "description": "Get parameters grouped by category for GUI organization.",
      "parameters": [
        "self",
        "engine_name"
      ],
      "return_type": "Dict[str, List[str]]",
      "test_file": "tests/unit/test_engine_config.py",
      "test_description": "Tests EngineConfigurationManager.get_parameters_by_category functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\config\\engine_config.py",
      "line_number": 343
    },
    {
      "function_name": "EngineConfigurationManager.validate_parameter_value",
      "module": "compareblocks.config.engine_config",
      "class": "EngineConfigurationManager",
      "description": "Validate a parameter value against its constraints.",
      "parameters": [
        "self",
        "engine_name",
        "param_name",
        "value"
      ],
      "return_type": "tuple[bool, str]",
      "test_file": "tests/unit/test_engine_config.py",
      "test_description": "Tests EngineConfigurationManager.validate_parameter_value functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\config\\engine_config.py",
      "line_number": 358
    },
    {
      "function_name": "EngineConfigurationManager.get_parameter_usage_stats",
      "module": "compareblocks.config.engine_config",
      "class": "EngineConfigurationManager",
      "description": "Get usage statistics for parameters across all PDF overrides.",
      "parameters": [
        "self",
        "engine_name"
      ],
      "return_type": "Dict[str, Dict[str, Any]]",
      "test_file": "tests/unit/test_engine_config.py",
      "test_description": "Tests EngineConfigurationManager.get_parameter_usage_stats functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\config\\engine_config.py",
      "line_number": 408
    },
    {
      "function_name": "EngineConfigurationManager.create_individual_config_files",
      "module": "compareblocks.config.engine_config",
      "class": "EngineConfigurationManager",
      "description": "Create individual configuration files for each engine with foreign key references.",
      "parameters": [
        "self"
      ],
      "return_type": "Dict[str, str]",
      "test_file": "tests/unit/test_engine_config.py",
      "test_description": "Tests EngineConfigurationManager.create_individual_config_files functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\config\\engine_config.py",
      "line_number": 933
    },
    {
      "function_name": "EngineConfigurationManager.approve_optimization_proposal",
      "module": "compareblocks.config.engine_config",
      "class": "EngineConfigurationManager",
      "description": "Approve an optimization proposal and create PDF override.",
      "parameters": [
        "self",
        "proposal_id"
      ],
      "return_type": "str",
      "test_file": "tests/unit/test_engine_config.py",
      "test_description": "Tests EngineConfigurationManager.approve_optimization_proposal functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\config\\engine_config.py",
      "line_number": 1017
    },
    {
      "function_name": "EngineConfigurationManager.create_optimization_proposal",
      "module": "compareblocks.config.engine_config",
      "class": "EngineConfigurationManager",
      "description": "Create an optimization proposal for review.",
      "parameters": [
        "self",
        "engine_name",
        "pdf_path",
        "proposed_settings"
      ],
      "return_type": "str",
      "test_file": "tests/unit/test_engine_config.py",
      "test_description": "Tests EngineConfigurationManager.create_optimization_proposal functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\config\\engine_config.py",
      "line_number": 1062
    },
    {
      "function_name": "EngineConfigurationManager.get_pdf_configuration_history",
      "module": "compareblocks.config.engine_config",
      "class": "EngineConfigurationManager",
      "description": "Get historical configurations for a specific PDF.",
      "parameters": [
        "self",
        "engine_name",
        "pdf_path"
      ],
      "return_type": "List[EngineConfiguration]",
      "test_file": "tests/unit/test_engine_config.py",
      "test_description": "Tests EngineConfigurationManager.get_pdf_configuration_history functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\config\\engine_config.py",
      "line_number": 1087
    },
    {
      "function_name": "EngineConfigurationManager.archive_current_pdf_override",
      "module": "compareblocks.config.engine_config",
      "class": "EngineConfigurationManager",
      "description": "Archive current PDF override as historical setting before creating new one.",
      "parameters": [
        "self",
        "engine_name",
        "pdf_path"
      ],
      "return_type": "str",
      "test_file": "tests/unit/test_engine_config.py",
      "test_description": "Tests EngineConfigurationManager.archive_current_pdf_override functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\config\\engine_config.py",
      "line_number": 1103
    },
    {
      "function_name": "EngineConfigurationManager.get_pending_optimization_proposals",
      "module": "compareblocks.config.engine_config",
      "class": "EngineConfigurationManager",
      "description": "Get all pending optimization proposals.",
      "parameters": [
        "self"
      ],
      "return_type": "List[EngineConfiguration]",
      "test_file": "tests/unit/test_engine_config.py",
      "test_description": "Tests EngineConfigurationManager.get_pending_optimization_proposals functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\config\\engine_config.py",
      "line_number": 1141
    },
    {
      "function_name": "EngineConfigurationManager.get_engine_statistics",
      "module": "compareblocks.config.engine_config",
      "class": "EngineConfigurationManager",
      "description": "Get comprehensive statistics for an engine.",
      "parameters": [
        "self",
        "engine_name"
      ],
      "return_type": "Dict[str, Any]",
      "test_file": "tests/unit/test_engine_config.py",
      "test_description": "Tests EngineConfigurationManager.get_engine_statistics functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\config\\engine_config.py",
      "line_number": 1146
    },
    {
      "function_name": "FileManager.should_ignore_images",
      "module": "compareblocks.config.file_manager",
      "class": "FileManager",
      "description": "Check if image blocks should be ignored in extraction and comparison.",
      "parameters": [
        "self",
        "pdf_path"
      ],
      "return_type": "bool",
      "test_file": "tests/unit/test_file_manager.py",
      "test_description": "Tests FileManager.should_ignore_images functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\config\\file_manager.py",
      "line_number": 210
    },
    {
      "function_name": "FileManager.get_image_placeholder_text",
      "module": "compareblocks.config.file_manager",
      "class": "FileManager",
      "description": "Get the placeholder text used for image blocks.",
      "parameters": [
        "self"
      ],
      "return_type": "str",
      "test_file": "tests/unit/test_file_manager.py",
      "test_description": "Tests FileManager.get_image_placeholder_text functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\config\\file_manager.py",
      "line_number": 228
    },
    {
      "function_name": "FileManager.is_image_block",
      "module": "compareblocks.config.file_manager",
      "class": "FileManager",
      "description": "Check if a block represents an image based on its text content.",
      "parameters": [
        "self",
        "text"
      ],
      "return_type": "bool",
      "test_file": "tests/unit/test_file_manager.py",
      "test_description": "Tests FileManager.is_image_block functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\config\\file_manager.py",
      "line_number": 232
    },
    {
      "function_name": "FileManager.get_image_handling_config",
      "module": "compareblocks.config.file_manager",
      "class": "FileManager",
      "description": "Get the complete image handling configuration.",
      "parameters": [
        "self"
      ],
      "return_type": "Dict[str, Any]",
      "test_file": "tests/unit/test_file_manager.py",
      "test_description": "Tests FileManager.get_image_handling_config functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\config\\file_manager.py",
      "line_number": 248
    },
    {
      "function_name": "ImageRegionExtractor.__init__",
      "module": "compareblocks.debug.image_extractor",
      "class": "ImageRegionExtractor",
      "description": "Initialize the image extractor.",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_image_extractor.py",
      "test_description": "Tests ImageRegionExtractor.__init__ functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\debug\\image_extractor.py",
      "line_number": 22
    },
    {
      "function_name": "ImageRegionExtractor.extract_page_regions",
      "module": "compareblocks.debug.image_extractor",
      "class": "ImageRegionExtractor",
      "description": "Extract image regions for the first few blocks on a page for debugging.",
      "parameters": [
        "self",
        "pdf_path",
        "page_num",
        "gbg_blocks",
        "max_blocks"
      ],
      "return_type": "List[Dict[str, Any]]",
      "test_file": "tests/unit/test_image_extractor.py",
      "test_description": "Tests ImageRegionExtractor.extract_page_regions functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\debug\\image_extractor.py",
      "line_number": 27
    },
    {
      "function_name": "ImageRegionExtractor.create_debug_report",
      "module": "compareblocks.debug.image_extractor",
      "class": "ImageRegionExtractor",
      "description": "Create an HTML debug report showing images and OCR results.",
      "parameters": [
        "self",
        "extracted_regions",
        "tesseract_results"
      ],
      "return_type": "str",
      "test_file": "tests/unit/test_image_extractor.py",
      "test_description": "Tests ImageRegionExtractor.create_debug_report functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\debug\\image_extractor.py",
      "line_number": 181
    },
    {
      "function_name": "extract_debug_images_for_page",
      "module": "compareblocks.debug.image_extractor",
      "class": null,
      "description": "Extract debug images for a specific page.",
      "parameters": [
        "pdf_path",
        "page_num",
        "max_blocks"
      ],
      "return_type": "Dict[str, Any]",
      "test_file": "tests/unit/test_image_extractor.py",
      "test_description": "Tests extract_debug_images_for_page functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\debug\\image_extractor.py",
      "line_number": 292
    },
    {
      "function_name": "DoclingEngine.__init__",
      "module": "compareblocks.engines.docling_engine",
      "class": "DoclingEngine",
      "description": "Initialize Docling engine.",
      "parameters": [
        "self",
        "pipeline",
        "export_format"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_docling_engine.py",
      "test_description": "Tests DoclingEngine.__init__ functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\engines\\docling_engine.py",
      "line_number": 47
    },
    {
      "function_name": "DoclingEngine.is_available",
      "module": "compareblocks.engines.docling_engine",
      "class": "DoclingEngine",
      "description": "Check if Docling is available.",
      "parameters": [
        "self"
      ],
      "return_type": "bool",
      "test_file": "tests/unit/test_docling_engine.py",
      "test_description": "Tests DoclingEngine.is_available functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\engines\\docling_engine.py",
      "line_number": 73
    },
    {
      "function_name": "DoclingEngine.extract_pdf",
      "module": "compareblocks.engines.docling_engine",
      "class": "DoclingEngine",
      "description": "Extract text from PDF using Docling.",
      "parameters": [
        "self",
        "pdf_path"
      ],
      "return_type": "Dict[str, Any]",
      "test_file": "tests/unit/test_docling_engine.py",
      "test_description": "Tests DoclingEngine.extract_pdf functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\engines\\docling_engine.py",
      "line_number": 84
    },
    {
      "function_name": "DoclingEngine.save_extraction",
      "module": "compareblocks.engines.docling_engine",
      "class": "DoclingEngine",
      "description": "Extract and save Docling data.",
      "parameters": [
        "self",
        "pdf_path",
        "output_path"
      ],
      "return_type": "str",
      "test_file": "tests/unit/test_docling_engine.py",
      "test_description": "Tests DoclingEngine.save_extraction functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\engines\\docling_engine.py",
      "line_number": 278
    },
    {
      "function_name": "extract_docling",
      "module": "compareblocks.engines.docling_engine",
      "class": null,
      "description": "Extract text using Docling.",
      "parameters": [
        "pdf_path",
        "pipeline",
        "export_format"
      ],
      "return_type": "Dict[str, Any]",
      "test_file": "tests/unit/test_docling_engine.py",
      "test_description": "Tests extract_docling functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\engines\\docling_engine.py",
      "line_number": 321
    },
    {
      "function_name": "save_docling_extraction",
      "module": "compareblocks.engines.docling_engine",
      "class": null,
      "description": "Extract and save Docling data.",
      "parameters": [
        "pdf_path",
        "output_path",
        "pipeline",
        "export_format"
      ],
      "return_type": "str",
      "test_file": "tests/unit/test_docling_engine.py",
      "test_description": "Tests save_docling_extraction functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\engines\\docling_engine.py",
      "line_number": 329
    },
    {
      "function_name": "DualOutputEngineProcessor.__init__",
      "module": "compareblocks.engines.dual_output_processor",
      "class": "DualOutputEngineProcessor",
      "description": "Initialize the dual-output processor.",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_dual_output_processor.py",
      "test_description": "Tests DualOutputEngineProcessor.__init__ functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\engines\\dual_output_processor.py",
      "line_number": 37
    },
    {
      "function_name": "DualOutputEngineProcessor.process_engine_dual_output",
      "module": "compareblocks.engines.dual_output_processor",
      "class": "DualOutputEngineProcessor",
      "description": "Process PDF with a single engine producing both markdown and JSON outputs.",
      "parameters": [
        "self",
        "engine_name",
        "pdf_path"
      ],
      "return_type": "DualOutputResult",
      "test_file": "tests/unit/test_dual_output_processor.py",
      "test_description": "Tests DualOutputEngineProcessor.process_engine_dual_output functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\engines\\dual_output_processor.py",
      "line_number": 68
    },
    {
      "function_name": "DualOutputEngineProcessor.process_all_engines_dual_output",
      "module": "compareblocks.engines.dual_output_processor",
      "class": "DualOutputEngineProcessor",
      "description": "Process PDF with all available engines producing dual outputs.",
      "parameters": [
        "self",
        "pdf_path"
      ],
      "return_type": "Dict[str, DualOutputResult]",
      "test_file": "tests/unit/test_dual_output_processor.py",
      "test_description": "Tests DualOutputEngineProcessor.process_all_engines_dual_output functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\engines\\dual_output_processor.py",
      "line_number": 501
    },
    {
      "function_name": "process_engine_dual_output",
      "module": "compareblocks.engines.dual_output_processor",
      "class": null,
      "description": "Process single engine with dual output.",
      "parameters": [
        "engine_name",
        "pdf_path"
      ],
      "return_type": "DualOutputResult",
      "test_file": "tests/unit/test_dual_output_processor.py",
      "test_description": "Tests process_engine_dual_output functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\engines\\dual_output_processor.py",
      "line_number": 532
    },
    {
      "function_name": "process_all_engines_dual_output",
      "module": "compareblocks.engines.dual_output_processor",
      "class": null,
      "description": "Process all available engines with dual output.",
      "parameters": [
        "pdf_path"
      ],
      "return_type": "Dict[str, DualOutputResult]",
      "test_file": "tests/unit/test_dual_output_processor.py",
      "test_description": "Tests process_all_engines_dual_output functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\engines\\dual_output_processor.py",
      "line_number": 538
    },
    {
      "function_name": "GBGGuidedTesseractEngine.__init__",
      "module": "compareblocks.engines.gbg_guided_tesseract_engine",
      "class": "GBGGuidedTesseractEngine",
      "description": "Initialize the GBG-guided Tesseract engine.",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_gbg_guided_tesseract_engine.py",
      "test_description": "Tests GBGGuidedTesseractEngine.__init__ functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\engines\\gbg_guided_tesseract_engine.py",
      "line_number": 55
    },
    {
      "function_name": "GBGGuidedTesseractEngine.extract_text_with_gbg_guidance",
      "module": "compareblocks.engines.gbg_guided_tesseract_engine",
      "class": "GBGGuidedTesseractEngine",
      "description": "Extract text using GBG guidance for optimal OCR processing.",
      "parameters": [
        "self",
        "pdf_path",
        "gbg_data"
      ],
      "return_type": "Dict[str, Any]",
      "test_file": "tests/unit/test_gbg_guided_tesseract_engine.py",
      "test_description": "Tests GBGGuidedTesseractEngine.extract_text_with_gbg_guidance functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\engines\\gbg_guided_tesseract_engine.py",
      "line_number": 68
    },
    {
      "function_name": "GBGIntegratedEngineProcessor.__init__",
      "module": "compareblocks.engines.gbg_integrated_processor",
      "class": "GBGIntegratedEngineProcessor",
      "description": "Initialize the GBG-integrated processor.",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_gbg_integrated_processor.py",
      "test_description": "Tests GBGIntegratedEngineProcessor.__init__ functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\engines\\gbg_integrated_processor.py",
      "line_number": 33
    },
    {
      "function_name": "GBGIntegratedEngineProcessor.process_engines_with_gbg_integration",
      "module": "compareblocks.engines.gbg_integrated_processor",
      "class": "GBGIntegratedEngineProcessor",
      "description": "Process all engines and integrate results into GBG analysis container.",
      "parameters": [
        "self",
        "pdf_path"
      ],
      "return_type": "GBGIntegratedResult",
      "test_file": "tests/unit/test_gbg_integrated_processor.py",
      "test_description": "Tests GBGIntegratedEngineProcessor.process_engines_with_gbg_integration functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\engines\\gbg_integrated_processor.py",
      "line_number": 39
    },
    {
      "function_name": "process_engines_with_gbg_integration",
      "module": "compareblocks.engines.gbg_integrated_processor",
      "class": null,
      "description": "Process engines and integrate into GBG analysis.",
      "parameters": [
        "pdf_path"
      ],
      "return_type": "GBGIntegratedResult",
      "test_file": "tests/unit/test_gbg_integrated_processor.py",
      "test_description": "Tests process_engines_with_gbg_integration functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\engines\\gbg_integrated_processor.py",
      "line_number": 546
    },
    {
      "function_name": "IntegratedEngineProcessor.__init__",
      "module": "compareblocks.engines.integrated_processor",
      "class": "IntegratedEngineProcessor",
      "description": "Initialize the integrated processor.",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_integrated_processor.py",
      "test_description": "Tests IntegratedEngineProcessor.__init__ functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\engines\\integrated_processor.py",
      "line_number": 47
    },
    {
      "function_name": "IntegratedEngineProcessor.process_pdf_integrated",
      "module": "compareblocks.engines.integrated_processor",
      "class": "IntegratedEngineProcessor",
      "description": "Process PDF with integrated approach: PyMuPDF first, then align other engines.",
      "parameters": [
        "self",
        "pdf_path"
      ],
      "return_type": "IntegratedResult",
      "test_file": "tests/unit/test_integrated_processor.py",
      "test_description": "Tests IntegratedEngineProcessor.process_pdf_integrated functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\engines\\integrated_processor.py",
      "line_number": 75
    },
    {
      "function_name": "IntegratedEngineProcessor.save_integrated_results",
      "module": "compareblocks.engines.integrated_processor",
      "class": "IntegratedEngineProcessor",
      "description": "Save integrated processing results.",
      "parameters": [
        "self",
        "result",
        "output_path"
      ],
      "return_type": "str",
      "test_file": "tests/unit/test_integrated_processor.py",
      "test_description": "Tests IntegratedEngineProcessor.save_integrated_results functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\engines\\integrated_processor.py",
      "line_number": 321
    },
    {
      "function_name": "process_pdf_with_integrated_engines",
      "module": "compareblocks.engines.integrated_processor",
      "class": null,
      "description": "Process PDF with integrated engine approach.",
      "parameters": [
        "pdf_path"
      ],
      "return_type": "IntegratedResult",
      "test_file": "tests/unit/test_integrated_processor.py",
      "test_description": "Tests process_pdf_with_integrated_engines functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\engines\\integrated_processor.py",
      "line_number": 370
    },
    {
      "function_name": "save_integrated_engine_processing",
      "module": "compareblocks.engines.integrated_processor",
      "class": null,
      "description": "Process and save integrated engine results.",
      "parameters": [
        "pdf_path",
        "output_path"
      ],
      "return_type": "str",
      "test_file": "tests/unit/test_integrated_processor.py",
      "test_description": "Tests save_integrated_engine_processing functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\engines\\integrated_processor.py",
      "line_number": 376
    },
    {
      "function_name": "KreuzbergEngine.__init__",
      "module": "compareblocks.engines.kreuzberg_engine",
      "class": "KreuzbergEngine",
      "description": "Initialize Kreuzberg engine.",
      "parameters": [
        "self",
        "ocr_backend",
        "output_format"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_kreuzberg_engine.py",
      "test_description": "Tests KreuzbergEngine.__init__ functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\engines\\kreuzberg_engine.py",
      "line_number": 43
    },
    {
      "function_name": "KreuzbergEngine.is_available",
      "module": "compareblocks.engines.kreuzberg_engine",
      "class": "KreuzbergEngine",
      "description": "Check if Kreuzberg is available.",
      "parameters": [
        "self"
      ],
      "return_type": "bool",
      "test_file": "tests/unit/test_kreuzberg_engine.py",
      "test_description": "Tests KreuzbergEngine.is_available functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\engines\\kreuzberg_engine.py",
      "line_number": 58
    },
    {
      "function_name": "KreuzbergEngine.extract_pdf",
      "module": "compareblocks.engines.kreuzberg_engine",
      "class": "KreuzbergEngine",
      "description": "Extract text from PDF using Kreuzberg.",
      "parameters": [
        "self",
        "pdf_path"
      ],
      "return_type": "Dict[str, Any]",
      "test_file": "tests/unit/test_kreuzberg_engine.py",
      "test_description": "Tests KreuzbergEngine.extract_pdf functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\engines\\kreuzberg_engine.py",
      "line_number": 62
    },
    {
      "function_name": "KreuzbergEngine.save_extraction",
      "module": "compareblocks.engines.kreuzberg_engine",
      "class": "KreuzbergEngine",
      "description": "Extract and save Kreuzberg data.",
      "parameters": [
        "self",
        "pdf_path",
        "output_path"
      ],
      "return_type": "str",
      "test_file": "tests/unit/test_kreuzberg_engine.py",
      "test_description": "Tests KreuzbergEngine.save_extraction functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\engines\\kreuzberg_engine.py",
      "line_number": 210
    },
    {
      "function_name": "extract_kreuzberg",
      "module": "compareblocks.engines.kreuzberg_engine",
      "class": null,
      "description": "Extract text using Kreuzberg.",
      "parameters": [
        "pdf_path",
        "ocr_backend",
        "output_format"
      ],
      "return_type": "Dict[str, Any]",
      "test_file": "tests/unit/test_kreuzberg_engine.py",
      "test_description": "Tests extract_kreuzberg functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\engines\\kreuzberg_engine.py",
      "line_number": 253
    },
    {
      "function_name": "save_kreuzberg_extraction",
      "module": "compareblocks.engines.kreuzberg_engine",
      "class": null,
      "description": "Extract and save Kreuzberg data.",
      "parameters": [
        "pdf_path",
        "output_path",
        "ocr_backend",
        "output_format"
      ],
      "return_type": "str",
      "test_file": "tests/unit/test_kreuzberg_engine.py",
      "test_description": "Tests save_kreuzberg_extraction functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\engines\\kreuzberg_engine.py",
      "line_number": 261
    },
    {
      "function_name": "ExtractionEngineManager.__init__",
      "module": "compareblocks.engines.manager",
      "class": "ExtractionEngineManager",
      "description": "Initialize the engine manager.",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_manager.py",
      "test_description": "Tests ExtractionEngineManager.__init__ functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\engines\\manager.py",
      "line_number": 39
    },
    {
      "function_name": "ExtractionEngineManager.get_available_engines",
      "module": "compareblocks.engines.manager",
      "class": "ExtractionEngineManager",
      "description": "Get list of available engine names.",
      "parameters": [
        "self"
      ],
      "return_type": "List[str]",
      "test_file": "tests/unit/test_manager.py",
      "test_description": "Tests ExtractionEngineManager.get_available_engines functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\engines\\manager.py",
      "line_number": 84
    },
    {
      "function_name": "ExtractionEngineManager.extract_with_engine",
      "module": "compareblocks.engines.manager",
      "class": "ExtractionEngineManager",
      "description": "Extract text using a specific engine.",
      "parameters": [
        "self",
        "engine_name",
        "pdf_path"
      ],
      "return_type": "EngineResult",
      "test_file": "tests/unit/test_manager.py",
      "test_description": "Tests ExtractionEngineManager.extract_with_engine functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\engines\\manager.py",
      "line_number": 88
    },
    {
      "function_name": "ExtractionEngineManager.extract_with_all_engines",
      "module": "compareblocks.engines.manager",
      "class": "ExtractionEngineManager",
      "description": "Extract text using all available engines.",
      "parameters": [
        "self",
        "pdf_path",
        "parallel"
      ],
      "return_type": "Dict[str, EngineResult]",
      "test_file": "tests/unit/test_manager.py",
      "test_description": "Tests ExtractionEngineManager.extract_with_all_engines functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\engines\\manager.py",
      "line_number": 163
    },
    {
      "function_name": "ExtractionEngineManager.extract_with_engines",
      "module": "compareblocks.engines.manager",
      "class": "ExtractionEngineManager",
      "description": "Extract text using specified engines.",
      "parameters": [
        "self",
        "engine_names",
        "pdf_path",
        "parallel"
      ],
      "return_type": "Dict[str, EngineResult]",
      "test_file": "tests/unit/test_manager.py",
      "test_description": "Tests ExtractionEngineManager.extract_with_engines functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\engines\\manager.py",
      "line_number": 228
    },
    {
      "function_name": "ExtractionEngineManager.create_extraction_summary",
      "module": "compareblocks.engines.manager",
      "class": "ExtractionEngineManager",
      "description": "Create a summary of all extraction results.",
      "parameters": [
        "self",
        "results",
        "pdf_path"
      ],
      "return_type": "Dict[str, Any]",
      "test_file": "tests/unit/test_manager.py",
      "test_description": "Tests ExtractionEngineManager.create_extraction_summary functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\engines\\manager.py",
      "line_number": 294
    },
    {
      "function_name": "ExtractionEngineManager.save_extraction_summary",
      "module": "compareblocks.engines.manager",
      "class": "ExtractionEngineManager",
      "description": "Save extraction summary to file.",
      "parameters": [
        "self",
        "results",
        "pdf_path",
        "output_path"
      ],
      "return_type": "str",
      "test_file": "tests/unit/test_manager.py",
      "test_description": "Tests ExtractionEngineManager.save_extraction_summary functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\engines\\manager.py",
      "line_number": 349
    },
    {
      "function_name": "extract_with_all_engines",
      "module": "compareblocks.engines.manager",
      "class": null,
      "description": "Extract text using all available engines.",
      "parameters": [
        "pdf_path",
        "parallel"
      ],
      "return_type": "Dict[str, EngineResult]",
      "test_file": "tests/unit/test_manager.py",
      "test_description": "Tests extract_with_all_engines functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\engines\\manager.py",
      "line_number": 386
    },
    {
      "function_name": "extract_with_engines",
      "module": "compareblocks.engines.manager",
      "class": null,
      "description": "Extract text using specified engines.",
      "parameters": [
        "engine_names",
        "pdf_path",
        "parallel"
      ],
      "return_type": "Dict[str, EngineResult]",
      "test_file": "tests/unit/test_manager.py",
      "test_description": "Tests extract_with_engines functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\engines\\manager.py",
      "line_number": 392
    },
    {
      "function_name": "get_available_engines",
      "module": "compareblocks.engines.manager",
      "class": null,
      "description": "Get list of available extraction engines.",
      "parameters": [],
      "return_type": "List[str]",
      "test_file": "tests/unit/test_manager.py",
      "test_description": "Tests get_available_engines functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\engines\\manager.py",
      "line_number": 399
    },
    {
      "function_name": "PaddleOCREngine.__init__",
      "module": "compareblocks.engines.paddleocr_engine",
      "class": "PaddleOCREngine",
      "description": "Initialize PaddleOCR engine.",
      "parameters": [
        "self",
        "lang",
        "use_gpu"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_paddleocr_engine.py",
      "test_description": "Tests PaddleOCREngine.__init__ functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\engines\\paddleocr_engine.py",
      "line_number": 48
    },
    {
      "function_name": "PaddleOCREngine.is_available",
      "module": "compareblocks.engines.paddleocr_engine",
      "class": "PaddleOCREngine",
      "description": "Check if PaddleOCR is available.",
      "parameters": [
        "self"
      ],
      "return_type": "bool",
      "test_file": "tests/unit/test_paddleocr_engine.py",
      "test_description": "Tests PaddleOCREngine.is_available functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\engines\\paddleocr_engine.py",
      "line_number": 79
    },
    {
      "function_name": "PaddleOCREngine.extract_pdf",
      "module": "compareblocks.engines.paddleocr_engine",
      "class": "PaddleOCREngine",
      "description": "Extract text from PDF using PaddleOCR.",
      "parameters": [
        "self",
        "pdf_path"
      ],
      "return_type": "Dict[str, Any]",
      "test_file": "tests/unit/test_paddleocr_engine.py",
      "test_description": "Tests PaddleOCREngine.extract_pdf functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\engines\\paddleocr_engine.py",
      "line_number": 90
    },
    {
      "function_name": "PaddleOCREngine.save_extraction",
      "module": "compareblocks.engines.paddleocr_engine",
      "class": "PaddleOCREngine",
      "description": "Extract and save PaddleOCR data.",
      "parameters": [
        "self",
        "pdf_path",
        "output_path"
      ],
      "return_type": "str",
      "test_file": "tests/unit/test_paddleocr_engine.py",
      "test_description": "Tests PaddleOCREngine.save_extraction functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\engines\\paddleocr_engine.py",
      "line_number": 296
    },
    {
      "function_name": "extract_paddleocr",
      "module": "compareblocks.engines.paddleocr_engine",
      "class": null,
      "description": "Extract text using PaddleOCR.",
      "parameters": [
        "pdf_path",
        "lang",
        "use_gpu"
      ],
      "return_type": "Dict[str, Any]",
      "test_file": "tests/unit/test_paddleocr_engine.py",
      "test_description": "Tests extract_paddleocr functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\engines\\paddleocr_engine.py",
      "line_number": 339
    },
    {
      "function_name": "save_paddleocr_extraction",
      "module": "compareblocks.engines.paddleocr_engine",
      "class": null,
      "description": "Extract and save PaddleOCR data.",
      "parameters": [
        "pdf_path",
        "output_path",
        "lang",
        "use_gpu"
      ],
      "return_type": "str",
      "test_file": "tests/unit/test_paddleocr_engine.py",
      "test_description": "Tests save_paddleocr_extraction functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\engines\\paddleocr_engine.py",
      "line_number": 346
    },
    {
      "function_name": "PyMuPDFEngine.__init__",
      "module": "compareblocks.enginesmupdf_engine",
      "class": "PyMuPDFEngine",
      "description": "Initialize PyMuPDF engine.",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_enginesmupdf_engine.py",
      "test_description": "Tests PyMuPDFEngine.__init__ functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\engines\\pymupdf_engine.py",
      "line_number": 42
    },
    {
      "function_name": "PyMuPDFEngine.extract_pdf",
      "module": "compareblocks.enginesmupdf_engine",
      "class": "PyMuPDFEngine",
      "description": "Extract raw PyMuPDF data from PDF.",
      "parameters": [
        "self",
        "pdf_path"
      ],
      "return_type": "Dict[str, Any]",
      "test_file": "tests/unit/test_enginesmupdf_engine.py",
      "test_description": "Tests PyMuPDFEngine.extract_pdf functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\engines\\pymupdf_engine.py",
      "line_number": 46
    },
    {
      "function_name": "PyMuPDFEngine.save_extraction",
      "module": "compareblocks.enginesmupdf_engine",
      "class": "PyMuPDFEngine",
      "description": "Extract and save raw PyMuPDF data.",
      "parameters": [
        "self",
        "pdf_path",
        "output_path"
      ],
      "return_type": "str",
      "test_file": "tests/unit/test_enginesmupdf_engine.py",
      "test_description": "Tests PyMuPDFEngine.save_extraction functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\engines\\pymupdf_engine.py",
      "line_number": 211
    },
    {
      "function_name": "extract_raw_pymupdf",
      "module": "compareblocks.enginesmupdf_engine",
      "class": null,
      "description": "Extract raw PyMuPDF data from PDF.",
      "parameters": [
        "pdf_path"
      ],
      "return_type": "Dict[str, Any]",
      "test_file": "tests/unit/test_enginesmupdf_engine.py",
      "test_description": "Tests extract_raw_pymupdf functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\engines\\pymupdf_engine.py",
      "line_number": 249
    },
    {
      "function_name": "save_raw_pymupdf_extraction",
      "module": "compareblocks.enginesmupdf_engine",
      "class": null,
      "description": "Extract and save raw PyMuPDF data.",
      "parameters": [
        "pdf_path",
        "output_path"
      ],
      "return_type": "str",
      "test_file": "tests/unit/test_enginesmupdf_engine.py",
      "test_description": "Tests save_raw_pymupdf_extraction functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\engines\\pymupdf_engine.py",
      "line_number": 255
    },
    {
      "function_name": "TesseractEngine.__init__",
      "module": "compareblocks.engines.tesseract_engine",
      "class": "TesseractEngine",
      "description": "Initialize Tesseract engine.",
      "parameters": [
        "self",
        "dpi",
        "lang"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_tesseract_engine.py",
      "test_description": "Tests TesseractEngine.__init__ functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\engines\\tesseract_engine.py",
      "line_number": 49
    },
    {
      "function_name": "TesseractEngine.is_available",
      "module": "compareblocks.engines.tesseract_engine",
      "class": "TesseractEngine",
      "description": "Check if Tesseract is available.",
      "parameters": [
        "self"
      ],
      "return_type": "bool",
      "test_file": "tests/unit/test_tesseract_engine.py",
      "test_description": "Tests TesseractEngine.is_available functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\engines\\tesseract_engine.py",
      "line_number": 64
    },
    {
      "function_name": "TesseractEngine.extract_pdf",
      "module": "compareblocks.engines.tesseract_engine",
      "class": "TesseractEngine",
      "description": "Extract text from PDF using Tesseract OCR.",
      "parameters": [
        "self",
        "pdf_path"
      ],
      "return_type": "Dict[str, Any]",
      "test_file": "tests/unit/test_tesseract_engine.py",
      "test_description": "Tests TesseractEngine.extract_pdf functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\engines\\tesseract_engine.py",
      "line_number": 77
    },
    {
      "function_name": "TesseractEngine.save_extraction",
      "module": "compareblocks.engines.tesseract_engine",
      "class": "TesseractEngine",
      "description": "Extract and save Tesseract OCR data.",
      "parameters": [
        "self",
        "pdf_path",
        "output_path"
      ],
      "return_type": "str",
      "test_file": "tests/unit/test_tesseract_engine.py",
      "test_description": "Tests TesseractEngine.save_extraction functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\engines\\tesseract_engine.py",
      "line_number": 305
    },
    {
      "function_name": "extract_tesseract_ocr",
      "module": "compareblocks.engines.tesseract_engine",
      "class": null,
      "description": "Extract text using Tesseract OCR.",
      "parameters": [
        "pdf_path",
        "dpi",
        "lang"
      ],
      "return_type": "Dict[str, Any]",
      "test_file": "tests/unit/test_tesseract_engine.py",
      "test_description": "Tests extract_tesseract_ocr functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\engines\\tesseract_engine.py",
      "line_number": 352
    },
    {
      "function_name": "save_tesseract_extraction",
      "module": "compareblocks.engines.tesseract_engine",
      "class": null,
      "description": "Extract and save Tesseract OCR data.",
      "parameters": [
        "pdf_path",
        "output_path",
        "dpi",
        "lang"
      ],
      "return_type": "str",
      "test_file": "tests/unit/test_tesseract_engine.py",
      "test_description": "Tests save_tesseract_extraction functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\engines\\tesseract_engine.py",
      "line_number": 359
    },
    {
      "function_name": "AnomalyFeatures.to_dict",
      "module": "compareblocks.features.anomaly",
      "class": "AnomalyFeatures",
      "description": "Convert features to dictionary format.",
      "parameters": [
        "self"
      ],
      "return_type": "Dict[str, Any]",
      "test_file": "tests/unit/test_anomaly.py",
      "test_description": "Tests AnomalyFeatures.to_dict functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\features\\anomaly.py",
      "line_number": 26
    },
    {
      "function_name": "ContextFeatures.to_dict",
      "module": "compareblocks.features.context",
      "class": "ContextFeatures",
      "description": "Convert features to dictionary format.",
      "parameters": [
        "self"
      ],
      "return_type": "Dict[str, Any]",
      "test_file": "tests/unit/test_context.py",
      "test_description": "Tests ContextFeatures.to_dict functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\features\\context.py",
      "line_number": 24
    },
    {
      "function_name": "LengthFeatures.to_dict",
      "module": "compareblocks.features.core",
      "class": "LengthFeatures",
      "description": "Convert features to dictionary format.",
      "parameters": [
        "self"
      ],
      "return_type": "Dict[str, Any]",
      "test_file": "tests/unit/test_core.py",
      "test_description": "Tests LengthFeatures.to_dict functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\features\\core.py",
      "line_number": 22
    },
    {
      "function_name": "LanguageFeatures.to_dict",
      "module": "compareblocks.features.language",
      "class": "LanguageFeatures",
      "description": "Convert features to dictionary format.",
      "parameters": [
        "self"
      ],
      "return_type": "Dict[str, Any]",
      "test_file": "tests/unit/test_language.py",
      "test_description": "Tests LanguageFeatures.to_dict functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\features\\language.py",
      "line_number": 25
    },
    {
      "function_name": "BlockIDGenerator.generate_block_id",
      "module": "compareblocks.gbg.ids",
      "class": "BlockIDGenerator",
      "description": "Generate a stable block ID using hash of page number and normalized coordinates.",
      "parameters": [
        "page",
        "bbox",
        "page_width",
        "page_height"
      ],
      "return_type": "str",
      "test_file": "tests/unit/test_ids.py",
      "test_description": "Tests BlockIDGenerator.generate_block_id functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gbg\\ids.py",
      "line_number": 16
    },
    {
      "function_name": "BlockIDGenerator.validate_block_id",
      "module": "compareblocks.gbg.ids",
      "class": "BlockIDGenerator",
      "description": "Validate that a block ID follows the expected format.",
      "parameters": [
        "block_id"
      ],
      "return_type": "bool",
      "test_file": "tests/unit/test_ids.py",
      "test_description": "Tests BlockIDGenerator.validate_block_id functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gbg\\ids.py",
      "line_number": 49
    },
    {
      "function_name": "BlockIDGenerator.extract_coordinates_from_id_string",
      "module": "compareblocks.gbg.ids",
      "class": "BlockIDGenerator",
      "description": "Extract page and normalized coordinates from the ID string (for debugging).",
      "parameters": [
        "id_string"
      ],
      "return_type": "tuple[int, float, float, float, float]",
      "test_file": "tests/unit/test_ids.py",
      "test_description": "Tests BlockIDGenerator.extract_coordinates_from_id_string functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gbg\\ids.py",
      "line_number": 77
    },
    {
      "function_name": "DebugImageWidget.__init__",
      "module": "compareblocks.gui.app",
      "class": "DebugImageWidget",
      "description": "Function description",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_app.py",
      "test_description": "Tests DebugImageWidget.__init__ functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\app.py",
      "line_number": 31
    },
    {
      "function_name": "DebugImageWidget.setup_ui",
      "module": "compareblocks.gui.app",
      "class": "DebugImageWidget",
      "description": "Setup the debug image UI.",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_app.py",
      "test_description": "Tests DebugImageWidget.setup_ui functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\app.py",
      "line_number": 36
    },
    {
      "function_name": "DebugImageWidget.extract_debug_images",
      "module": "compareblocks.gui.app",
      "class": "DebugImageWidget",
      "description": "Extract debug images for the selected page.",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_app.py",
      "test_description": "Tests DebugImageWidget.extract_debug_images functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\app.py",
      "line_number": 81
    },
    {
      "function_name": "DebugImageWidget.display_debug_results",
      "module": "compareblocks.gui.app",
      "class": "DebugImageWidget",
      "description": "Display the debug results in the UI.",
      "parameters": [
        "self",
        "result"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_app.py",
      "test_description": "Tests DebugImageWidget.display_debug_results functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\app.py",
      "line_number": 111
    },
    {
      "function_name": "DebugImageWidget.load_tesseract_results",
      "module": "compareblocks.gui.app",
      "class": "DebugImageWidget",
      "description": "Load Tesseract results for the page.",
      "parameters": [
        "self",
        "page_num"
      ],
      "return_type": "List[Dict[str, Any]]",
      "test_file": "tests/unit/test_app.py",
      "test_description": "Tests DebugImageWidget.load_tesseract_results functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\app.py",
      "line_number": 131
    },
    {
      "function_name": "DebugImageWidget.create_block_widget",
      "module": "compareblocks.gui.app",
      "class": "DebugImageWidget",
      "description": "Create a widget for displaying a single block's debug information.",
      "parameters": [
        "self",
        "region",
        "tesseract_results",
        "block_index"
      ],
      "return_type": "QWidget",
      "test_file": "tests/unit/test_app.py",
      "test_description": "Tests DebugImageWidget.create_block_widget functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\app.py",
      "line_number": 145
    },
    {
      "function_name": "DebugImageWidget.create_image_label",
      "module": "compareblocks.gui.app",
      "class": "DebugImageWidget",
      "description": "Create a label widget for displaying an image.",
      "parameters": [
        "self",
        "image_path",
        "title",
        "max_size"
      ],
      "return_type": "QWidget",
      "test_file": "tests/unit/test_app.py",
      "test_description": "Tests DebugImageWidget.create_image_label functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\app.py",
      "line_number": 227
    },
    {
      "function_name": "BECRMainWindow.__init__",
      "module": "compareblocks.gui.app",
      "class": "BECRMainWindow",
      "description": "Function description",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_app.py",
      "test_description": "Tests BECRMainWindow.__init__ functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\app.py",
      "line_number": 263
    },
    {
      "function_name": "BECRMainWindow.setup_ui",
      "module": "compareblocks.gui.app",
      "class": "BECRMainWindow",
      "description": "Setup the main UI.",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_app.py",
      "test_description": "Tests BECRMainWindow.setup_ui functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\app.py",
      "line_number": 271
    },
    {
      "function_name": "BECRMainWindow.setup_menus",
      "module": "compareblocks.gui.app",
      "class": "BECRMainWindow",
      "description": "Setup application menus.",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_app.py",
      "test_description": "Tests BECRMainWindow.setup_menus functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\app.py",
      "line_number": 303
    },
    {
      "function_name": "BECRMainWindow.create_individual_config_files",
      "module": "compareblocks.gui.app",
      "class": "BECRMainWindow",
      "description": "Create individual configuration files for each engine.",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_app.py",
      "test_description": "Tests BECRMainWindow.create_individual_config_files functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\app.py",
      "line_number": 330
    },
    {
      "function_name": "BECRMainWindow.show_engine_statistics",
      "module": "compareblocks.gui.app",
      "class": "BECRMainWindow",
      "description": "Show comprehensive engine statistics.",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_app.py",
      "test_description": "Tests BECRMainWindow.show_engine_statistics functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\app.py",
      "line_number": 343
    },
    {
      "function_name": "BECRMainWindow.add_pdf_configuration",
      "module": "compareblocks.gui.app",
      "class": "BECRMainWindow",
      "description": "Add PDF-specific configuration for an engine.",
      "parameters": [
        "self",
        "engine_name"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_app.py",
      "test_description": "Tests BECRMainWindow.add_pdf_configuration functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\app.py",
      "line_number": 383
    },
    {
      "function_name": "run_gui_mode",
      "module": "compareblocks.gui.app",
      "class": null,
      "description": "Run the GUI application.",
      "parameters": [],
      "return_type": "int",
      "test_file": "tests/unit/test_app.py",
      "test_description": "Tests run_gui_mode functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\app.py",
      "line_number": 443
    },
    {
      "function_name": "run_cli_mode",
      "module": "compareblocks.gui.app",
      "class": null,
      "description": "Run the CLI version of the application.",
      "parameters": [],
      "return_type": "int",
      "test_file": "tests/unit/test_app.py",
      "test_description": "Tests run_cli_mode functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\app.py",
      "line_number": 460
    },
    {
      "function_name": "ParameterWidget.__init__",
      "module": "compareblocks.gui.config_forms",
      "class": "ParameterWidget",
      "description": "Function description",
      "parameters": [
        "self",
        "parameter",
        "current_value"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_config_forms.py",
      "test_description": "Tests ParameterWidget.__init__ functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\config_forms.py",
      "line_number": 41
    },
    {
      "function_name": "ParameterWidget.setup_ui",
      "module": "compareblocks.gui.config_forms",
      "class": "ParameterWidget",
      "description": "Setup the parameter editing UI.",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_config_forms.py",
      "test_description": "Tests ParameterWidget.setup_ui functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\config_forms.py",
      "line_number": 47
    },
    {
      "function_name": "ParameterWidget.set_value",
      "module": "compareblocks.gui.config_forms",
      "class": "ParameterWidget",
      "description": "Set the current value of the parameter.",
      "parameters": [
        "self",
        "value"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_config_forms.py",
      "test_description": "Tests ParameterWidget.set_value functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\config_forms.py",
      "line_number": 92
    },
    {
      "function_name": "ParameterWidget.get_value",
      "module": "compareblocks.gui.config_forms",
      "class": "ParameterWidget",
      "description": "Get the current value of the parameter.",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_config_forms.py",
      "test_description": "Tests ParameterWidget.get_value functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\config_forms.py",
      "line_number": 106
    },
    {
      "function_name": "EngineConfigurationForm.__init__",
      "module": "compareblocks.gui.config_forms",
      "class": "EngineConfigurationForm",
      "description": "Function description",
      "parameters": [
        "self",
        "config_manager",
        "engine_name"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_config_forms.py",
      "test_description": "Tests EngineConfigurationForm.__init__ functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\config_forms.py",
      "line_number": 140
    },
    {
      "function_name": "EngineConfigurationForm.setup_ui",
      "module": "compareblocks.gui.config_forms",
      "class": "EngineConfigurationForm",
      "description": "Setup the configuration form UI.",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_config_forms.py",
      "test_description": "Tests EngineConfigurationForm.setup_ui functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\config_forms.py",
      "line_number": 149
    },
    {
      "function_name": "EngineConfigurationForm.load_configuration",
      "module": "compareblocks.gui.config_forms",
      "class": "EngineConfigurationForm",
      "description": "Load current configuration for the engine.",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_config_forms.py",
      "test_description": "Tests EngineConfigurationForm.load_configuration functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\config_forms.py",
      "line_number": 179
    },
    {
      "function_name": "EngineConfigurationForm.reset_to_defaults",
      "module": "compareblocks.gui.config_forms",
      "class": "EngineConfigurationForm",
      "description": "Reset all parameters to default values.",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_config_forms.py",
      "test_description": "Tests EngineConfigurationForm.reset_to_defaults functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\config_forms.py",
      "line_number": 201
    },
    {
      "function_name": "EngineConfigurationForm.apply_changes",
      "module": "compareblocks.gui.config_forms",
      "class": "EngineConfigurationForm",
      "description": "Apply configuration changes.",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_config_forms.py",
      "test_description": "Tests EngineConfigurationForm.apply_changes functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\config_forms.py",
      "line_number": 214
    },
    {
      "function_name": "PDFOverrideForm.__init__",
      "module": "compareblocks.gui.config_forms",
      "class": "PDFOverrideForm",
      "description": "Function description",
      "parameters": [
        "self",
        "config_manager",
        "engine_name",
        "pdf_path"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_config_forms.py",
      "test_description": "Tests PDFOverrideForm.__init__ functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\config_forms.py",
      "line_number": 225
    },
    {
      "function_name": "PDFOverrideForm.setup_ui",
      "module": "compareblocks.gui.config_forms",
      "class": "PDFOverrideForm",
      "description": "Setup the PDF override form UI.",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_config_forms.py",
      "test_description": "Tests PDFOverrideForm.setup_ui functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\config_forms.py",
      "line_number": 234
    },
    {
      "function_name": "PDFOverrideForm.load_current_overrides",
      "module": "compareblocks.gui.config_forms",
      "class": "PDFOverrideForm",
      "description": "Load current PDF-specific overrides.",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_config_forms.py",
      "test_description": "Tests PDFOverrideForm.load_current_overrides functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\config_forms.py",
      "line_number": 276
    },
    {
      "function_name": "PDFOverrideForm.add_override_parameter",
      "module": "compareblocks.gui.config_forms",
      "class": "PDFOverrideForm",
      "description": "Add a new override parameter.",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_config_forms.py",
      "test_description": "Tests PDFOverrideForm.add_override_parameter functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\config_forms.py",
      "line_number": 292
    },
    {
      "function_name": "PDFOverrideForm.add_override_widget",
      "module": "compareblocks.gui.config_forms",
      "class": "PDFOverrideForm",
      "description": "Add widget for override parameter.",
      "parameters": [
        "self",
        "param_name",
        "value"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_config_forms.py",
      "test_description": "Tests PDFOverrideForm.add_override_widget functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\config_forms.py",
      "line_number": 330
    },
    {
      "function_name": "PDFOverrideForm.remove_override_widget",
      "module": "compareblocks.gui.config_forms",
      "class": "PDFOverrideForm",
      "description": "Remove override parameter widget.",
      "parameters": [
        "self",
        "param_name"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_config_forms.py",
      "test_description": "Tests PDFOverrideForm.remove_override_widget functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\config_forms.py",
      "line_number": 375
    },
    {
      "function_name": "PDFOverrideForm.get_override_values",
      "module": "compareblocks.gui.config_forms",
      "class": "PDFOverrideForm",
      "description": "Get current override values from widgets.",
      "parameters": [
        "self"
      ],
      "return_type": "Dict[str, Any]",
      "test_file": "tests/unit/test_config_forms.py",
      "test_description": "Tests PDFOverrideForm.get_override_values functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\config_forms.py",
      "line_number": 382
    },
    {
      "function_name": "PDFOverrideForm.save_overrides",
      "module": "compareblocks.gui.config_forms",
      "class": "PDFOverrideForm",
      "description": "Save PDF-specific overrides.",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_config_forms.py",
      "test_description": "Tests PDFOverrideForm.save_overrides functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\config_forms.py",
      "line_number": 412
    },
    {
      "function_name": "PDFOverrideForm.update_effective_config_display",
      "module": "compareblocks.gui.config_forms",
      "class": "PDFOverrideForm",
      "description": "Update the effective configuration display.",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_config_forms.py",
      "test_description": "Tests PDFOverrideForm.update_effective_config_display functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\config_forms.py",
      "line_number": 429
    },
    {
      "function_name": "OptimizationProposalWidget.__init__",
      "module": "compareblocks.gui.config_forms",
      "class": "OptimizationProposalWidget",
      "description": "Function description",
      "parameters": [
        "self",
        "config_manager"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_config_forms.py",
      "test_description": "Tests OptimizationProposalWidget.__init__ functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\config_forms.py",
      "line_number": 442
    },
    {
      "function_name": "OptimizationProposalWidget.setup_ui",
      "module": "compareblocks.gui.config_forms",
      "class": "OptimizationProposalWidget",
      "description": "Setup the optimization proposal UI.",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_config_forms.py",
      "test_description": "Tests OptimizationProposalWidget.setup_ui functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\config_forms.py",
      "line_number": 447
    },
    {
      "function_name": "OptimizationProposalWidget.load_proposals",
      "module": "compareblocks.gui.config_forms",
      "class": "OptimizationProposalWidget",
      "description": "Load optimization proposals from configuration.",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_config_forms.py",
      "test_description": "Tests OptimizationProposalWidget.load_proposals functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\config_forms.py",
      "line_number": 471
    },
    {
      "function_name": "OptimizationProposalWidget.approve_proposal",
      "module": "compareblocks.gui.config_forms",
      "class": "OptimizationProposalWidget",
      "description": "Approve an optimization proposal.",
      "parameters": [
        "self",
        "proposal_id"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_config_forms.py",
      "test_description": "Tests OptimizationProposalWidget.approve_proposal functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\config_forms.py",
      "line_number": 525
    },
    {
      "function_name": "OptimizationProposalWidget.reject_proposal",
      "module": "compareblocks.gui.config_forms",
      "class": "OptimizationProposalWidget",
      "description": "Reject an optimization proposal.",
      "parameters": [
        "self",
        "proposal_id"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_config_forms.py",
      "test_description": "Tests OptimizationProposalWidget.reject_proposal functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\config_forms.py",
      "line_number": 535
    },
    {
      "function_name": "OptimizationProposalWidget.show_proposal_details",
      "module": "compareblocks.gui.config_forms",
      "class": "OptimizationProposalWidget",
      "description": "Show detailed information about a proposal.",
      "parameters": [
        "self",
        "proposal"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_config_forms.py",
      "test_description": "Tests OptimizationProposalWidget.show_proposal_details functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\config_forms.py",
      "line_number": 546
    },
    {
      "function_name": "ConfigurationManagerWidget.__init__",
      "module": "compareblocks.gui.config_forms",
      "class": "ConfigurationManagerWidget",
      "description": "Function description",
      "parameters": [
        "self",
        "config_manager"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_config_forms.py",
      "test_description": "Tests ConfigurationManagerWidget.__init__ functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\config_forms.py",
      "line_number": 585
    },
    {
      "function_name": "ConfigurationManagerWidget.setup_ui",
      "module": "compareblocks.gui.config_forms",
      "class": "ConfigurationManagerWidget",
      "description": "Setup the main configuration management UI.",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_config_forms.py",
      "test_description": "Tests ConfigurationManagerWidget.setup_ui functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\config_forms.py",
      "line_number": 590
    },
    {
      "function_name": "ConfigurationManagerWidget.add_pdf_override_tab",
      "module": "compareblocks.gui.config_forms",
      "class": "ConfigurationManagerWidget",
      "description": "Add a tab for PDF-specific overrides.",
      "parameters": [
        "self",
        "engine_name",
        "pdf_path"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_config_forms.py",
      "test_description": "Tests ConfigurationManagerWidget.add_pdf_override_tab functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\config_forms.py",
      "line_number": 611
    },
    {
      "function_name": "ConfigurationManagerWidget.on_configuration_changed",
      "module": "compareblocks.gui.config_forms",
      "class": "ConfigurationManagerWidget",
      "description": "Handle configuration changes.",
      "parameters": [
        "self",
        "engine_name",
        "settings"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_config_forms.py",
      "test_description": "Tests ConfigurationManagerWidget.on_configuration_changed functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\config_forms.py",
      "line_number": 628
    },
    {
      "function_name": "ConfigurationManagerWidget.on_override_created",
      "module": "compareblocks.gui.config_forms",
      "class": "ConfigurationManagerWidget",
      "description": "Handle PDF override creation.",
      "parameters": [
        "self",
        "engine_name",
        "pdf_path",
        "overrides"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_config_forms.py",
      "test_description": "Tests ConfigurationManagerWidget.on_override_created functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\config_forms.py",
      "line_number": 634
    },
    {
      "function_name": "ConfigurationManagerWidget.on_proposal_approved",
      "module": "compareblocks.gui.config_forms",
      "class": "ConfigurationManagerWidget",
      "description": "Handle proposal approval.",
      "parameters": [
        "self",
        "proposal_id"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_config_forms.py",
      "test_description": "Tests ConfigurationManagerWidget.on_proposal_approved functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\config_forms.py",
      "line_number": 638
    },
    {
      "function_name": "ConfigurationManagerWidget.on_proposal_rejected",
      "module": "compareblocks.gui.config_forms",
      "class": "ConfigurationManagerWidget",
      "description": "Handle proposal rejection.",
      "parameters": [
        "self",
        "proposal_id"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_config_forms.py",
      "test_description": "Tests ConfigurationManagerWidget.on_proposal_rejected functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\config_forms.py",
      "line_number": 642
    },
    {
      "function_name": "ValidationWorker.__init__",
      "module": "compareblocks.gui.import_dialog",
      "class": "ValidationWorker",
      "description": "Function description",
      "parameters": [
        "self",
        "file_path"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_import_dialog.py",
      "test_description": "Tests ValidationWorker.__init__ functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\import_dialog.py",
      "line_number": 30
    },
    {
      "function_name": "ValidationWorker.run",
      "module": "compareblocks.gui.import_dialog",
      "class": "ValidationWorker",
      "description": "Run validation in background thread.",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_import_dialog.py",
      "test_description": "Tests ValidationWorker.run functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\import_dialog.py",
      "line_number": 35
    },
    {
      "function_name": "NDJSONPreviewWidget.__init__",
      "module": "compareblocks.gui.import_dialog",
      "class": "NDJSONPreviewWidget",
      "description": "Function description",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_import_dialog.py",
      "test_description": "Tests NDJSONPreviewWidget.__init__ functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\import_dialog.py",
      "line_number": 80
    },
    {
      "function_name": "NDJSONPreviewWidget.setup_ui",
      "module": "compareblocks.gui.import_dialog",
      "class": "NDJSONPreviewWidget",
      "description": "Setup the preview UI.",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_import_dialog.py",
      "test_description": "Tests NDJSONPreviewWidget.setup_ui functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\import_dialog.py",
      "line_number": 85
    },
    {
      "function_name": "NDJSONPreviewWidget.set_records",
      "module": "compareblocks.gui.import_dialog",
      "class": "NDJSONPreviewWidget",
      "description": "Set the records to preview.",
      "parameters": [
        "self",
        "records"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_import_dialog.py",
      "test_description": "Tests NDJSONPreviewWidget.set_records functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\import_dialog.py",
      "line_number": 107
    },
    {
      "function_name": "ImportOptionsWidget.__init__",
      "module": "compareblocks.gui.import_dialog",
      "class": "ImportOptionsWidget",
      "description": "Function description",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_import_dialog.py",
      "test_description": "Tests ImportOptionsWidget.__init__ functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\import_dialog.py",
      "line_number": 161
    },
    {
      "function_name": "ImportOptionsWidget.setup_ui",
      "module": "compareblocks.gui.import_dialog",
      "class": "ImportOptionsWidget",
      "description": "Setup the import options UI.",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_import_dialog.py",
      "test_description": "Tests ImportOptionsWidget.setup_ui functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\import_dialog.py",
      "line_number": 165
    },
    {
      "function_name": "ImportOptionsWidget.get_import_options",
      "module": "compareblocks.gui.import_dialog",
      "class": "ImportOptionsWidget",
      "description": "Get the current import options.",
      "parameters": [
        "self"
      ],
      "return_type": "Dict[str, Any]",
      "test_file": "tests/unit/test_import_dialog.py",
      "test_description": "Tests ImportOptionsWidget.get_import_options functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\import_dialog.py",
      "line_number": 222
    },
    {
      "function_name": "ImportOptionsWidget.set_available_engines",
      "module": "compareblocks.gui.import_dialog",
      "class": "ImportOptionsWidget",
      "description": "Set the available engines for filtering.",
      "parameters": [
        "self",
        "engines"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_import_dialog.py",
      "test_description": "Tests ImportOptionsWidget.set_available_engines functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\import_dialog.py",
      "line_number": 234
    },
    {
      "function_name": "ImportDialog.__init__",
      "module": "compareblocks.gui.import_dialog",
      "class": "ImportDialog",
      "description": "Function description",
      "parameters": [
        "self",
        "parent"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_import_dialog.py",
      "test_description": "Tests ImportDialog.__init__ functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\import_dialog.py",
      "line_number": 254
    },
    {
      "function_name": "ImportDialog.setup_ui",
      "module": "compareblocks.gui.import_dialog",
      "class": "ImportDialog",
      "description": "Setup the import dialog UI.",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_import_dialog.py",
      "test_description": "Tests ImportDialog.setup_ui functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\import_dialog.py",
      "line_number": 266
    },
    {
      "function_name": "ImportDialog.browse_file",
      "module": "compareblocks.gui.import_dialog",
      "class": "ImportDialog",
      "description": "Browse for NDJSON file.",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_import_dialog.py",
      "test_description": "Tests ImportDialog.browse_file functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\import_dialog.py",
      "line_number": 330
    },
    {
      "function_name": "ImportDialog.validate_file",
      "module": "compareblocks.gui.import_dialog",
      "class": "ImportDialog",
      "description": "Validate the selected NDJSON file.",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_import_dialog.py",
      "test_description": "Tests ImportDialog.validate_file functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\import_dialog.py",
      "line_number": 348
    },
    {
      "function_name": "ImportDialog.on_progress_update",
      "module": "compareblocks.gui.import_dialog",
      "class": "ImportDialog",
      "description": "Handle validation progress updates.",
      "parameters": [
        "self",
        "progress",
        "status"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_import_dialog.py",
      "test_description": "Tests ImportDialog.on_progress_update functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\import_dialog.py",
      "line_number": 367
    },
    {
      "function_name": "ImportDialog.on_validation_complete",
      "module": "compareblocks.gui.import_dialog",
      "class": "ImportDialog",
      "description": "Handle validation completion.",
      "parameters": [
        "self",
        "success",
        "message",
        "records"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_import_dialog.py",
      "test_description": "Tests ImportDialog.on_validation_complete functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\import_dialog.py",
      "line_number": 372
    },
    {
      "function_name": "ImportDialog.import_variations",
      "module": "compareblocks.gui.import_dialog",
      "class": "ImportDialog",
      "description": "Import the validated variations.",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_import_dialog.py",
      "test_description": "Tests ImportDialog.import_variations functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\import_dialog.py",
      "line_number": 396
    },
    {
      "function_name": "ImportDialog.apply_import_filters",
      "module": "compareblocks.gui.import_dialog",
      "class": "ImportDialog",
      "description": "Apply import filters to records.",
      "parameters": [
        "self",
        "records",
        "options"
      ],
      "return_type": "List[Dict[str, Any]]",
      "test_file": "tests/unit/test_import_dialog.py",
      "test_description": "Tests ImportDialog.apply_import_filters functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\import_dialog.py",
      "line_number": 424
    },
    {
      "function_name": "ImportDialog.handle_duplicates",
      "module": "compareblocks.gui.import_dialog",
      "class": "ImportDialog",
      "description": "Handle duplicate records based on strategy.",
      "parameters": [
        "self",
        "records",
        "handling"
      ],
      "return_type": "List[Dict[str, Any]]",
      "test_file": "tests/unit/test_import_dialog.py",
      "test_description": "Tests ImportDialog.handle_duplicates functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\import_dialog.py",
      "line_number": 453
    },
    {
      "function_name": "PDFPageWidget.__init__",
      "module": "compareblocks.gui.pdf_viewer",
      "class": "PDFPageWidget",
      "description": "Function description",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_pdf_viewer.py",
      "test_description": "Tests PDFPageWidget.__init__ functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\pdf_viewer.py",
      "line_number": 38
    },
    {
      "function_name": "PDFPageWidget.load_pdf",
      "module": "compareblocks.gui.pdf_viewer",
      "class": "PDFPageWidget",
      "description": "Load a PDF document.",
      "parameters": [
        "self",
        "pdf_path"
      ],
      "return_type": "bool",
      "test_file": "tests/unit/test_pdf_viewer.py",
      "test_description": "Tests PDFPageWidget.load_pdf functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\pdf_viewer.py",
      "line_number": 59
    },
    {
      "function_name": "PDFPageWidget.set_page",
      "module": "compareblocks.gui.pdf_viewer",
      "class": "PDFPageWidget",
      "description": "Set the current page to display.",
      "parameters": [
        "self",
        "page_num"
      ],
      "return_type": "bool",
      "test_file": "tests/unit/test_pdf_viewer.py",
      "test_description": "Tests PDFPageWidget.set_page functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\pdf_viewer.py",
      "line_number": 71
    },
    {
      "function_name": "PDFPageWidget.set_zoom",
      "module": "compareblocks.gui.pdf_viewer",
      "class": "PDFPageWidget",
      "description": "Set the zoom factor and re-render.",
      "parameters": [
        "self",
        "zoom_factor"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_pdf_viewer.py",
      "test_description": "Tests PDFPageWidget.set_zoom functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\pdf_viewer.py",
      "line_number": 84
    },
    {
      "function_name": "PDFPageWidget.set_block_highlights",
      "module": "compareblocks.gui.pdf_viewer",
      "class": "PDFPageWidget",
      "description": "Set the blocks to highlight on the page.",
      "parameters": [
        "self",
        "highlights"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_pdf_viewer.py",
      "test_description": "Tests PDFPageWidget.set_block_highlights functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\pdf_viewer.py",
      "line_number": 90
    },
    {
      "function_name": "PDFPageWidget.select_block",
      "module": "compareblocks.gui.pdf_viewer",
      "class": "PDFPageWidget",
      "description": "Select a specific block for highlighting.",
      "parameters": [
        "self",
        "block_id"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_pdf_viewer.py",
      "test_description": "Tests PDFPageWidget.select_block functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\pdf_viewer.py",
      "line_number": 96
    },
    {
      "function_name": "PDFPageWidget.mousePressEvent",
      "module": "compareblocks.gui.pdf_viewer",
      "class": "PDFPageWidget",
      "description": "Handle mouse press events for block selection and panning.",
      "parameters": [
        "self",
        "event"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_pdf_viewer.py",
      "test_description": "Tests PDFPageWidget.mousePressEvent functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\pdf_viewer.py",
      "line_number": 168
    },
    {
      "function_name": "PDFPageWidget.mouseMoveEvent",
      "module": "compareblocks.gui.pdf_viewer",
      "class": "PDFPageWidget",
      "description": "Handle mouse move events for panning.",
      "parameters": [
        "self",
        "event"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_pdf_viewer.py",
      "test_description": "Tests PDFPageWidget.mouseMoveEvent functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\pdf_viewer.py",
      "line_number": 183
    },
    {
      "function_name": "PDFPageWidget.mouseReleaseEvent",
      "module": "compareblocks.gui.pdf_viewer",
      "class": "PDFPageWidget",
      "description": "Handle mouse release events.",
      "parameters": [
        "self",
        "event"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_pdf_viewer.py",
      "test_description": "Tests PDFPageWidget.mouseReleaseEvent functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\pdf_viewer.py",
      "line_number": 196
    },
    {
      "function_name": "PDFPageWidget.wheelEvent",
      "module": "compareblocks.gui.pdf_viewer",
      "class": "PDFPageWidget",
      "description": "Handle wheel events for zooming.",
      "parameters": [
        "self",
        "event"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_pdf_viewer.py",
      "test_description": "Tests PDFPageWidget.wheelEvent functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\pdf_viewer.py",
      "line_number": 204
    },
    {
      "function_name": "PDFViewer.__init__",
      "module": "compareblocks.gui.pdf_viewer",
      "class": "PDFViewer",
      "description": "Function description",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_pdf_viewer.py",
      "test_description": "Tests PDFViewer.__init__ functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\pdf_viewer.py",
      "line_number": 241
    },
    {
      "function_name": "PDFViewer.setup_ui",
      "module": "compareblocks.gui.pdf_viewer",
      "class": "PDFViewer",
      "description": "Setup the PDF viewer UI.",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_pdf_viewer.py",
      "test_description": "Tests PDFViewer.setup_ui functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\pdf_viewer.py",
      "line_number": 250
    },
    {
      "function_name": "PDFViewer.load_pdf",
      "module": "compareblocks.gui.pdf_viewer",
      "class": "PDFViewer",
      "description": "Load a PDF file.",
      "parameters": [
        "self",
        "pdf_path"
      ],
      "return_type": "bool",
      "test_file": "tests/unit/test_pdf_viewer.py",
      "test_description": "Tests PDFViewer.load_pdf functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\pdf_viewer.py",
      "line_number": 307
    },
    {
      "function_name": "PDFViewer.go_to_page",
      "module": "compareblocks.gui.pdf_viewer",
      "class": "PDFViewer",
      "description": "Go to a specific page (1-based).",
      "parameters": [
        "self",
        "page_num"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_pdf_viewer.py",
      "test_description": "Tests PDFViewer.go_to_page functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\pdf_viewer.py",
      "line_number": 328
    },
    {
      "function_name": "PDFViewer.previous_page",
      "module": "compareblocks.gui.pdf_viewer",
      "class": "PDFViewer",
      "description": "Go to the previous page.",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_pdf_viewer.py",
      "test_description": "Tests PDFViewer.previous_page functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\pdf_viewer.py",
      "line_number": 344
    },
    {
      "function_name": "PDFViewer.next_page",
      "module": "compareblocks.gui.pdf_viewer",
      "class": "PDFViewer",
      "description": "Go to the next page.",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_pdf_viewer.py",
      "test_description": "Tests PDFViewer.next_page functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\pdf_viewer.py",
      "line_number": 349
    },
    {
      "function_name": "PDFViewer.set_zoom_percent",
      "module": "compareblocks.gui.pdf_viewer",
      "class": "PDFViewer",
      "description": "Set zoom as percentage.",
      "parameters": [
        "self",
        "percent"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_pdf_viewer.py",
      "test_description": "Tests PDFViewer.set_zoom_percent functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\pdf_viewer.py",
      "line_number": 354
    },
    {
      "function_name": "PDFViewer.fit_width",
      "module": "compareblocks.gui.pdf_viewer",
      "class": "PDFViewer",
      "description": "Fit the page width to the viewer.",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_pdf_viewer.py",
      "test_description": "Tests PDFViewer.fit_width functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\pdf_viewer.py",
      "line_number": 360
    },
    {
      "function_name": "PDFViewer.set_block_highlights",
      "module": "compareblocks.gui.pdf_viewer",
      "class": "PDFViewer",
      "description": "Set blocks to highlight on the current page.",
      "parameters": [
        "self",
        "highlights"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_pdf_viewer.py",
      "test_description": "Tests PDFViewer.set_block_highlights functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\pdf_viewer.py",
      "line_number": 376
    },
    {
      "function_name": "PDFViewer.select_block",
      "module": "compareblocks.gui.pdf_viewer",
      "class": "PDFViewer",
      "description": "Select a specific block.",
      "parameters": [
        "self",
        "block_id"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_pdf_viewer.py",
      "test_description": "Tests PDFViewer.select_block functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\pdf_viewer.py",
      "line_number": 380
    },
    {
      "function_name": "PDFViewer.set_controls_enabled",
      "module": "compareblocks.gui.pdf_viewer",
      "class": "PDFViewer",
      "description": "Enable or disable navigation controls.",
      "parameters": [
        "self",
        "enabled"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_pdf_viewer.py",
      "test_description": "Tests PDFViewer.set_controls_enabled functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\pdf_viewer.py",
      "line_number": 384
    },
    {
      "function_name": "ReviewDataManager.__init__",
      "module": "compareblocks.gui.review_gui",
      "class": "ReviewDataManager",
      "description": "Function description",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_review_gui.py",
      "test_description": "Tests ReviewDataManager.__init__ functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\review_gui.py",
      "line_number": 35
    },
    {
      "function_name": "ReviewDataManager.load_pdf",
      "module": "compareblocks.gui.review_gui",
      "class": "ReviewDataManager",
      "description": "Load a PDF and generate GBG analysis.",
      "parameters": [
        "self",
        "pdf_path"
      ],
      "return_type": "bool",
      "test_file": "tests/unit/test_review_gui.py",
      "test_description": "Tests ReviewDataManager.load_pdf functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\review_gui.py",
      "line_number": 48
    },
    {
      "function_name": "ReviewDataManager.add_external_variations",
      "module": "compareblocks.gui.review_gui",
      "class": "ReviewDataManager",
      "description": "Add external variations from NDJSON import.",
      "parameters": [
        "self",
        "variations"
      ],
      "return_type": "int",
      "test_file": "tests/unit/test_review_gui.py",
      "test_description": "Tests ReviewDataManager.add_external_variations functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\review_gui.py",
      "line_number": 100
    },
    {
      "function_name": "ReviewDataManager.get_page_blocks",
      "module": "compareblocks.gui.review_gui",
      "class": "ReviewDataManager",
      "description": "Get all blocks for a specific page.",
      "parameters": [
        "self",
        "page_num"
      ],
      "return_type": "List[Tuple[str, BoundingBox]]",
      "test_file": "tests/unit/test_review_gui.py",
      "test_description": "Tests ReviewDataManager.get_page_blocks functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\review_gui.py",
      "line_number": 186
    },
    {
      "function_name": "ReviewDataManager.get_block_variations",
      "module": "compareblocks.gui.review_gui",
      "class": "ReviewDataManager",
      "description": "Get variation display data for a block.",
      "parameters": [
        "self",
        "block_id"
      ],
      "return_type": "List[VariationDisplayData]",
      "test_file": "tests/unit/test_review_gui.py",
      "test_description": "Tests ReviewDataManager.get_block_variations functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\review_gui.py",
      "line_number": 197
    },
    {
      "function_name": "ReviewDataManager.set_consensus_decision",
      "module": "compareblocks.gui.review_gui",
      "class": "ReviewDataManager",
      "description": "Set the consensus decision for a block.",
      "parameters": [
        "self",
        "block_id",
        "variation_id"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_review_gui.py",
      "test_description": "Tests ReviewDataManager.set_consensus_decision functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\review_gui.py",
      "line_number": 260
    },
    {
      "function_name": "ReviewDataManager.set_manual_correction",
      "module": "compareblocks.gui.review_gui",
      "class": "ReviewDataManager",
      "description": "Set a manual correction for a block.",
      "parameters": [
        "self",
        "block_id",
        "corrected_text"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_review_gui.py",
      "test_description": "Tests ReviewDataManager.set_manual_correction functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\review_gui.py",
      "line_number": 264
    },
    {
      "function_name": "ReviewDataManager.export_consensus",
      "module": "compareblocks.gui.review_gui",
      "class": "ReviewDataManager",
      "description": "Export consensus decisions to NDJSON.",
      "parameters": [
        "self",
        "output_path"
      ],
      "return_type": "bool",
      "test_file": "tests/unit/test_review_gui.py",
      "test_description": "Tests ReviewDataManager.export_consensus functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\review_gui.py",
      "line_number": 272
    },
    {
      "function_name": "ReviewGUI.__init__",
      "module": "compareblocks.gui.review_gui",
      "class": "ReviewGUI",
      "description": "Function description",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_review_gui.py",
      "test_description": "Tests ReviewGUI.__init__ functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\review_gui.py",
      "line_number": 329
    },
    {
      "function_name": "ReviewGUI.setup_ui",
      "module": "compareblocks.gui.review_gui",
      "class": "ReviewGUI",
      "description": "Setup the main UI.",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_review_gui.py",
      "test_description": "Tests ReviewGUI.setup_ui functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\review_gui.py",
      "line_number": 348
    },
    {
      "function_name": "ReviewGUI.setup_menus",
      "module": "compareblocks.gui.review_gui",
      "class": "ReviewGUI",
      "description": "Setup application menus.",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_review_gui.py",
      "test_description": "Tests ReviewGUI.setup_menus functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\review_gui.py",
      "line_number": 411
    },
    {
      "function_name": "ReviewGUI.setup_status_bar",
      "module": "compareblocks.gui.review_gui",
      "class": "ReviewGUI",
      "description": "Setup the status bar.",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_review_gui.py",
      "test_description": "Tests ReviewGUI.setup_status_bar functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\review_gui.py",
      "line_number": 452
    },
    {
      "function_name": "ReviewGUI.connect_signals",
      "module": "compareblocks.gui.review_gui",
      "class": "ReviewGUI",
      "description": "Connect UI signals.",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_review_gui.py",
      "test_description": "Tests ReviewGUI.connect_signals functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\review_gui.py",
      "line_number": 470
    },
    {
      "function_name": "ReviewGUI.open_pdf",
      "module": "compareblocks.gui.review_gui",
      "class": "ReviewGUI",
      "description": "Open a PDF file.",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_review_gui.py",
      "test_description": "Tests ReviewGUI.open_pdf functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\review_gui.py",
      "line_number": 481
    },
    {
      "function_name": "ReviewGUI.load_pdf",
      "module": "compareblocks.gui.review_gui",
      "class": "ReviewGUI",
      "description": "Load a PDF file.",
      "parameters": [
        "self",
        "pdf_path"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_review_gui.py",
      "test_description": "Tests ReviewGUI.load_pdf functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\review_gui.py",
      "line_number": 490
    },
    {
      "function_name": "ReviewGUI.import_variations",
      "module": "compareblocks.gui.review_gui",
      "class": "ReviewGUI",
      "description": "Import external variations.",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_review_gui.py",
      "test_description": "Tests ReviewGUI.import_variations functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\review_gui.py",
      "line_number": 520
    },
    {
      "function_name": "ReviewGUI.on_import_requested",
      "module": "compareblocks.gui.review_gui",
      "class": "ReviewGUI",
      "description": "Handle import request.",
      "parameters": [
        "self",
        "file_path",
        "options",
        "records"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_review_gui.py",
      "test_description": "Tests ReviewGUI.on_import_requested functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\review_gui.py",
      "line_number": 526
    },
    {
      "function_name": "ReviewGUI.export_consensus",
      "module": "compareblocks.gui.review_gui",
      "class": "ReviewGUI",
      "description": "Export consensus decisions.",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_review_gui.py",
      "test_description": "Tests ReviewGUI.export_consensus functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\review_gui.py",
      "line_number": 544
    },
    {
      "function_name": "ReviewGUI.on_page_changed",
      "module": "compareblocks.gui.review_gui",
      "class": "ReviewGUI",
      "description": "Handle page change.",
      "parameters": [
        "self",
        "page_num"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_review_gui.py",
      "test_description": "Tests ReviewGUI.on_page_changed functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\review_gui.py",
      "line_number": 560
    },
    {
      "function_name": "ReviewGUI.update_page_highlights",
      "module": "compareblocks.gui.review_gui",
      "class": "ReviewGUI",
      "description": "Update block highlights for the current page.",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_review_gui.py",
      "test_description": "Tests ReviewGUI.update_page_highlights functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\review_gui.py",
      "line_number": 565
    },
    {
      "function_name": "ReviewGUI.should_show_block",
      "module": "compareblocks.gui.review_gui",
      "class": "ReviewGUI",
      "description": "Check if block should be shown based on filters.",
      "parameters": [
        "self",
        "block_id",
        "variations"
      ],
      "return_type": "bool",
      "test_file": "tests/unit/test_review_gui.py",
      "test_description": "Tests ReviewGUI.should_show_block functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\review_gui.py",
      "line_number": 599
    },
    {
      "function_name": "ReviewGUI.apply_block_filters",
      "module": "compareblocks.gui.review_gui",
      "class": "ReviewGUI",
      "description": "Apply block filters and update display.",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_review_gui.py",
      "test_description": "Tests ReviewGUI.apply_block_filters functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\review_gui.py",
      "line_number": 614
    },
    {
      "function_name": "ReviewGUI.on_block_selected",
      "module": "compareblocks.gui.review_gui",
      "class": "ReviewGUI",
      "description": "Handle block selection.",
      "parameters": [
        "self",
        "block_id"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_review_gui.py",
      "test_description": "Tests ReviewGUI.on_block_selected functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\review_gui.py",
      "line_number": 618
    },
    {
      "function_name": "ReviewGUI.on_variation_selected",
      "module": "compareblocks.gui.review_gui",
      "class": "ReviewGUI",
      "description": "Handle variation selection.",
      "parameters": [
        "self",
        "variation_id"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_review_gui.py",
      "test_description": "Tests ReviewGUI.on_variation_selected functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\review_gui.py",
      "line_number": 633
    },
    {
      "function_name": "ReviewGUI.on_consensus_changed",
      "module": "compareblocks.gui.review_gui",
      "class": "ReviewGUI",
      "description": "Handle consensus decision change.",
      "parameters": [
        "self",
        "variation_id"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_review_gui.py",
      "test_description": "Tests ReviewGUI.on_consensus_changed functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\review_gui.py",
      "line_number": 637
    },
    {
      "function_name": "ReviewGUI.on_manual_correction",
      "module": "compareblocks.gui.review_gui",
      "class": "ReviewGUI",
      "description": "Handle manual correction.",
      "parameters": [
        "self",
        "block_id",
        "corrected_text"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_review_gui.py",
      "test_description": "Tests ReviewGUI.on_manual_correction functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\review_gui.py",
      "line_number": 643
    },
    {
      "function_name": "ReviewGUI.previous_block",
      "module": "compareblocks.gui.review_gui",
      "class": "ReviewGUI",
      "description": "Navigate to previous block with variations.",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_review_gui.py",
      "test_description": "Tests ReviewGUI.previous_block functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\review_gui.py",
      "line_number": 652
    },
    {
      "function_name": "ReviewGUI.next_block",
      "module": "compareblocks.gui.review_gui",
      "class": "ReviewGUI",
      "description": "Navigate to next block with variations.",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_review_gui.py",
      "test_description": "Tests ReviewGUI.next_block functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\review_gui.py",
      "line_number": 657
    },
    {
      "function_name": "ReviewGUI.recalculate_surrounding_blocks",
      "module": "compareblocks.gui.review_gui",
      "class": "ReviewGUI",
      "description": "Recalculate surrounding blocks after changes.",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_review_gui.py",
      "test_description": "Tests ReviewGUI.recalculate_surrounding_blocks functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\review_gui.py",
      "line_number": 662
    },
    {
      "function_name": "ReviewGUI.preview_changes",
      "module": "compareblocks.gui.review_gui",
      "class": "ReviewGUI",
      "description": "Preview changes from one file to another.",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_review_gui.py",
      "test_description": "Tests ReviewGUI.preview_changes functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\review_gui.py",
      "line_number": 672
    },
    {
      "function_name": "TextDiffWidget.__init__",
      "module": "compareblocks.gui.variations_panel",
      "class": "TextDiffWidget",
      "description": "Function description",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_variations_panel.py",
      "test_description": "Tests TextDiffWidget.__init__ functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\variations_panel.py",
      "line_number": 43
    },
    {
      "function_name": "TextDiffWidget.set_diff_text",
      "module": "compareblocks.gui.variations_panel",
      "class": "TextDiffWidget",
      "description": "Set text with diff highlighting against reference.",
      "parameters": [
        "self",
        "text",
        "reference_text"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_variations_panel.py",
      "test_description": "Tests TextDiffWidget.set_diff_text functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\variations_panel.py",
      "line_number": 49
    },
    {
      "function_name": "VariationsTable.__init__",
      "module": "compareblocks.gui.variations_panel",
      "class": "VariationsTable",
      "description": "Function description",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_variations_panel.py",
      "test_description": "Tests VariationsTable.__init__ functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\variations_panel.py",
      "line_number": 116
    },
    {
      "function_name": "VariationsTable.setup_table",
      "module": "compareblocks.gui.variations_panel",
      "class": "VariationsTable",
      "description": "Setup the variations table.",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_variations_panel.py",
      "test_description": "Tests VariationsTable.setup_table functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\variations_panel.py",
      "line_number": 121
    },
    {
      "function_name": "VariationsTable.set_variations",
      "module": "compareblocks.gui.variations_panel",
      "class": "VariationsTable",
      "description": "Set the variations to display.",
      "parameters": [
        "self",
        "variations"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_variations_panel.py",
      "test_description": "Tests VariationsTable.set_variations functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\variations_panel.py",
      "line_number": 152
    },
    {
      "function_name": "VariationsTable.highlight_consensus",
      "module": "compareblocks.gui.variations_panel",
      "class": "VariationsTable",
      "description": "Highlight the consensus variation.",
      "parameters": [
        "self",
        "variation_id"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_variations_panel.py",
      "test_description": "Tests VariationsTable.highlight_consensus functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\variations_panel.py",
      "line_number": 214
    },
    {
      "function_name": "VariationsPanel.__init__",
      "module": "compareblocks.gui.variations_panel",
      "class": "VariationsPanel",
      "description": "Function description",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_variations_panel.py",
      "test_description": "Tests VariationsPanel.__init__ functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\variations_panel.py",
      "line_number": 230
    },
    {
      "function_name": "VariationsPanel.setup_ui",
      "module": "compareblocks.gui.variations_panel",
      "class": "VariationsPanel",
      "description": "Setup the variations panel UI.",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_variations_panel.py",
      "test_description": "Tests VariationsPanel.setup_ui functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\variations_panel.py",
      "line_number": 239
    },
    {
      "function_name": "VariationsPanel.set_block_variations",
      "module": "compareblocks.gui.variations_panel",
      "class": "VariationsPanel",
      "description": "Set the variations for a specific block.",
      "parameters": [
        "self",
        "block_id",
        "variations"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_variations_panel.py",
      "test_description": "Tests VariationsPanel.set_block_variations functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\variations_panel.py",
      "line_number": 316
    },
    {
      "function_name": "VariationsPanel.select_variation",
      "module": "compareblocks.gui.variations_panel",
      "class": "VariationsPanel",
      "description": "Select a specific variation for detailed view.",
      "parameters": [
        "self",
        "variation_id"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_variations_panel.py",
      "test_description": "Tests VariationsPanel.select_variation functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\variations_panel.py",
      "line_number": 335
    },
    {
      "function_name": "VariationsPanel.set_consensus_variation",
      "module": "compareblocks.gui.variations_panel",
      "class": "VariationsPanel",
      "description": "Set the consensus variation.",
      "parameters": [
        "self",
        "variation_id"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_variations_panel.py",
      "test_description": "Tests VariationsPanel.set_consensus_variation functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\variations_panel.py",
      "line_number": 356
    },
    {
      "function_name": "VariationsPanel.set_controls_enabled",
      "module": "compareblocks.gui.variations_panel",
      "class": "VariationsPanel",
      "description": "Enable or disable panel controls.",
      "parameters": [
        "self",
        "enabled"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_variations_panel.py",
      "test_description": "Tests VariationsPanel.set_controls_enabled functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\gui\\variations_panel.py",
      "line_number": 490
    },
    {
      "function_name": "PDFMetadataExtractor.__init__",
      "module": "compareblocks.io.pdf_metadata",
      "class": "PDFMetadataExtractor",
      "description": "Initialize the PDF metadata extractor.",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_pdf_metadata.py",
      "test_description": "Tests PDFMetadataExtractor.__init__ functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\io\\pdf_metadata.py",
      "line_number": 17
    },
    {
      "function_name": "PDFMetadataExtractor.extract_pdf_metadata",
      "module": "compareblocks.io.pdf_metadata",
      "class": "PDFMetadataExtractor",
      "description": "Extract comprehensive PDF metadata with proper filename normalization.",
      "parameters": [
        "self",
        "pdf_path"
      ],
      "return_type": "Dict[str, Any]",
      "test_file": "tests/unit/test_pdf_metadata.py",
      "test_description": "Tests PDFMetadataExtractor.extract_pdf_metadata functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\io\\pdf_metadata.py",
      "line_number": 21
    },
    {
      "function_name": "PDFMetadataExtractor.get_display_name",
      "module": "compareblocks.io.pdf_metadata",
      "class": "PDFMetadataExtractor",
      "description": "Get a clean display name for the PDF.",
      "parameters": [
        "self",
        "pdf_path"
      ],
      "return_type": "str",
      "test_file": "tests/unit/test_pdf_metadata.py",
      "test_description": "Tests PDFMetadataExtractor.get_display_name functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\io\\pdf_metadata.py",
      "line_number": 121
    },
    {
      "function_name": "PDFMetadataExtractor.create_root_pdf_json",
      "module": "compareblocks.io.pdf_metadata",
      "class": "PDFMetadataExtractor",
      "description": "Create comprehensive root PDF JSON with proper metadata.",
      "parameters": [
        "self",
        "pdf_path",
        "associated_files"
      ],
      "return_type": "Dict[str, Any]",
      "test_file": "tests/unit/test_pdf_metadata.py",
      "test_description": "Tests PDFMetadataExtractor.create_root_pdf_json functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\io\\pdf_metadata.py",
      "line_number": 142
    },
    {
      "function_name": "extract_pdf_metadata",
      "module": "compareblocks.io.pdf_metadata",
      "class": null,
      "description": "Extract PDF metadata using the PDFMetadataExtractor.",
      "parameters": [
        "pdf_path"
      ],
      "return_type": "Dict[str, Any]",
      "test_file": "tests/unit/test_pdf_metadata.py",
      "test_description": "Tests extract_pdf_metadata functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\io\\pdf_metadata.py",
      "line_number": 193
    },
    {
      "function_name": "create_root_pdf_json",
      "module": "compareblocks.io.pdf_metadata",
      "class": null,
      "description": "Create root PDF JSON using the PDFMetadataExtractor.",
      "parameters": [
        "pdf_path",
        "associated_files"
      ],
      "return_type": "Dict[str, Any]",
      "test_file": "tests/unit/test_pdf_metadata.py",
      "test_description": "Tests create_root_pdf_json functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\io\\pdf_metadata.py",
      "line_number": 199
    },
    {
      "function_name": "NDJSONWriter.write_consensus_records",
      "module": "compareblocks.io.writer",
      "class": "NDJSONWriter",
      "description": "Write consensus records to NDJSON file.",
      "parameters": [
        "self",
        "records",
        "file_path"
      ],
      "return_type": "None",
      "test_file": "tests/unit/test_writer.py",
      "test_description": "Tests NDJSONWriter.write_consensus_records functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\io\\writer.py",
      "line_number": 92
    },
    {
      "function_name": "CoverageTracker.__init__",
      "module": "compareblocks.testing.coverage_tracker",
      "class": "CoverageTracker",
      "description": "Initialize coverage tracker.",
      "parameters": [
        "self",
        "db_path"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_coverage_tracker.py",
      "test_description": "Tests CoverageTracker.__init__ functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\testing\\coverage_tracker.py",
      "line_number": 62
    },
    {
      "function_name": "CoverageTracker.record_parameter_test",
      "module": "compareblocks.testing.coverage_tracker",
      "class": "CoverageTracker",
      "description": "Record a parameter test result.",
      "parameters": [
        "self",
        "record"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_coverage_tracker.py",
      "test_description": "Tests CoverageTracker.record_parameter_test functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\testing\\coverage_tracker.py",
      "line_number": 134
    },
    {
      "function_name": "CoverageTracker.record_file_type_test",
      "module": "compareblocks.testing.coverage_tracker",
      "class": "CoverageTracker",
      "description": "Record a file type test result.",
      "parameters": [
        "self",
        "record"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_coverage_tracker.py",
      "test_description": "Tests CoverageTracker.record_file_type_test functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\testing\\coverage_tracker.py",
      "line_number": 167
    },
    {
      "function_name": "CoverageTracker.get_parameter_coverage",
      "module": "compareblocks.testing.coverage_tracker",
      "class": "CoverageTracker",
      "description": "Get parameter coverage for a specific function.",
      "parameters": [
        "self",
        "engine_name",
        "function_name"
      ],
      "return_type": "Dict[str, Any]",
      "test_file": "tests/unit/test_coverage_tracker.py",
      "test_description": "Tests CoverageTracker.get_parameter_coverage functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\testing\\coverage_tracker.py",
      "line_number": 243
    },
    {
      "function_name": "CoverageTracker.get_file_type_coverage",
      "module": "compareblocks.testing.coverage_tracker",
      "class": "CoverageTracker",
      "description": "Get file type coverage for an engine.",
      "parameters": [
        "self",
        "engine_name"
      ],
      "return_type": "Dict[str, Any]",
      "test_file": "tests/unit/test_coverage_tracker.py",
      "test_description": "Tests CoverageTracker.get_file_type_coverage functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\testing\\coverage_tracker.py",
      "line_number": 294
    },
    {
      "function_name": "CoverageTracker.identify_coverage_gaps",
      "module": "compareblocks.testing.coverage_tracker",
      "class": "CoverageTracker",
      "description": "Identify coverage gaps for an engine.",
      "parameters": [
        "self",
        "engine_name"
      ],
      "return_type": "List[CoverageGap]",
      "test_file": "tests/unit/test_coverage_tracker.py",
      "test_description": "Tests CoverageTracker.identify_coverage_gaps functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\testing\\coverage_tracker.py",
      "line_number": 341
    },
    {
      "function_name": "CoverageTracker.generate_coverage_report",
      "module": "compareblocks.testing.coverage_tracker",
      "class": "CoverageTracker",
      "description": "Generate comprehensive coverage report.",
      "parameters": [
        "self",
        "engine_name"
      ],
      "return_type": "Dict[str, Any]",
      "test_file": "tests/unit/test_coverage_tracker.py",
      "test_description": "Tests CoverageTracker.generate_coverage_report functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\testing\\coverage_tracker.py",
      "line_number": 418
    },
    {
      "function_name": "CoverageTracker.export_coverage_data",
      "module": "compareblocks.testing.coverage_tracker",
      "class": "CoverageTracker",
      "description": "Export coverage data to JSON file.",
      "parameters": [
        "self",
        "output_path"
      ],
      "return_type": "str",
      "test_file": "tests/unit/test_coverage_tracker.py",
      "test_description": "Tests CoverageTracker.export_coverage_data functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\testing\\coverage_tracker.py",
      "line_number": 524
    },
    {
      "function_name": "track_parameter_test",
      "module": "compareblocks.testing.coverage_tracker",
      "class": null,
      "description": "Track a parameter test result.",
      "parameters": [
        "engine_name",
        "function_name",
        "parameter_set",
        "test_success",
        "execution_time",
        "pdf_file",
        "test_output_size",
        "error_message"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_coverage_tracker.py",
      "test_description": "Tests track_parameter_test functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\testing\\coverage_tracker.py",
      "line_number": 569
    },
    {
      "function_name": "track_file_type_test",
      "module": "compareblocks.testing.coverage_tracker",
      "class": null,
      "description": "Track a file type test result.",
      "parameters": [
        "engine_name",
        "file_type",
        "file_path",
        "test_success",
        "extraction_time",
        "output_quality_score",
        "error_message"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_coverage_tracker.py",
      "test_description": "Tests track_file_type_test functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\testing\\coverage_tracker.py",
      "line_number": 591
    },
    {
      "function_name": "generate_coverage_report",
      "module": "compareblocks.testing.coverage_tracker",
      "class": null,
      "description": "Generate coverage report for engines.",
      "parameters": [
        "engine_name"
      ],
      "return_type": "Dict[str, Any]",
      "test_file": "tests/unit/test_coverage_tracker.py",
      "test_description": "Tests generate_coverage_report functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\testing\\coverage_tracker.py",
      "line_number": 612
    },
    {
      "function_name": "FunctionTestStatus.__post_init__",
      "module": "compareblocks.testing.engine_validator",
      "class": "FunctionTestStatus",
      "description": "Function description",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_engine_validator.py",
      "test_description": "Tests FunctionTestStatus.__post_init__ functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\testing\\engine_validator.py",
      "line_number": 39
    },
    {
      "function_name": "EngineValidator.__init__",
      "module": "compareblocks.testing.engine_validator",
      "class": "EngineValidator",
      "description": "Initialize engine validator.",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_engine_validator.py",
      "test_description": "Tests EngineValidator.__init__ functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\testing\\engine_validator.py",
      "line_number": 61
    },
    {
      "function_name": "EngineValidator.discover_engine_functions",
      "module": "compareblocks.testing.engine_validator",
      "class": "EngineValidator",
      "description": "Discover all functions in an engine.",
      "parameters": [
        "self",
        "engine_name"
      ],
      "return_type": "List[Tuple[str, str]]",
      "test_file": "tests/unit/test_engine_validator.py",
      "test_description": "Tests EngineValidator.discover_engine_functions functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\testing\\engine_validator.py",
      "line_number": 75
    },
    {
      "function_name": "EngineValidator.find_test_files",
      "module": "compareblocks.testing.engine_validator",
      "class": "EngineValidator",
      "description": "Find all test files in the test directory.",
      "parameters": [
        "self"
      ],
      "return_type": "List[Path]",
      "test_file": "tests/unit/test_engine_validator.py",
      "test_description": "Tests EngineValidator.find_test_files functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\testing\\engine_validator.py",
      "line_number": 118
    },
    {
      "function_name": "EngineValidator.analyze_test_file",
      "module": "compareblocks.testing.engine_validator",
      "class": "EngineValidator",
      "description": "Analyze a test file to find tested functions.",
      "parameters": [
        "self",
        "test_file"
      ],
      "return_type": "Dict[str, List[str]]",
      "test_file": "tests/unit/test_engine_validator.py",
      "test_description": "Tests EngineValidator.analyze_test_file functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\testing\\engine_validator.py",
      "line_number": 129
    },
    {
      "function_name": "EngineValidator.validate_engine_coverage",
      "module": "compareblocks.testing.engine_validator",
      "class": "EngineValidator",
      "description": "Validate test coverage for a specific engine.",
      "parameters": [
        "self",
        "engine_name"
      ],
      "return_type": "EngineTestCoverage",
      "test_file": "tests/unit/test_engine_validator.py",
      "test_description": "Tests EngineValidator.validate_engine_coverage functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\testing\\engine_validator.py",
      "line_number": 184
    },
    {
      "function_name": "EngineValidator.validate_all_engines",
      "module": "compareblocks.testing.engine_validator",
      "class": "EngineValidator",
      "description": "Validate test coverage for all engines.",
      "parameters": [
        "self"
      ],
      "return_type": "Dict[str, EngineTestCoverage]",
      "test_file": "tests/unit/test_engine_validator.py",
      "test_description": "Tests EngineValidator.validate_all_engines functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\testing\\engine_validator.py",
      "line_number": 261
    },
    {
      "function_name": "EngineValidator.run_engine_function_tests",
      "module": "compareblocks.testing.engine_validator",
      "class": "EngineValidator",
      "description": "Run actual tests for engine functions with real PDF.",
      "parameters": [
        "self",
        "engine_name",
        "pdf_path"
      ],
      "return_type": "Dict[str, Any]",
      "test_file": "tests/unit/test_engine_validator.py",
      "test_description": "Tests EngineValidator.run_engine_function_tests functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\testing\\engine_validator.py",
      "line_number": 296
    },
    {
      "function_name": "EngineValidator.generate_coverage_report",
      "module": "compareblocks.testing.engine_validator",
      "class": "EngineValidator",
      "description": "Generate comprehensive coverage report.",
      "parameters": [
        "self",
        "coverage_results"
      ],
      "return_type": "str",
      "test_file": "tests/unit/test_engine_validator.py",
      "test_description": "Tests EngineValidator.generate_coverage_report functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\testing\\engine_validator.py",
      "line_number": 441
    },
    {
      "function_name": "EngineValidator.run_comprehensive_validation",
      "module": "compareblocks.testing.engine_validator",
      "class": "EngineValidator",
      "description": "Run comprehensive validation of all engines.",
      "parameters": [
        "self",
        "pdf_path"
      ],
      "return_type": "str",
      "test_file": "tests/unit/test_engine_validator.py",
      "test_description": "Tests EngineValidator.run_comprehensive_validation functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\testing\\engine_validator.py",
      "line_number": 502
    },
    {
      "function_name": "validate_engine_coverage",
      "module": "compareblocks.testing.engine_validator",
      "class": null,
      "description": "Validate test coverage for a specific engine.",
      "parameters": [
        "engine_name"
      ],
      "return_type": "EngineTestCoverage",
      "test_file": "tests/unit/test_engine_validator.py",
      "test_description": "Tests validate_engine_coverage functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\testing\\engine_validator.py",
      "line_number": 621
    },
    {
      "function_name": "validate_all_engines",
      "module": "compareblocks.testing.engine_validator",
      "class": null,
      "description": "Validate test coverage for all engines.",
      "parameters": [],
      "return_type": "Dict[str, EngineTestCoverage]",
      "test_file": "tests/unit/test_engine_validator.py",
      "test_description": "Tests validate_all_engines functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\testing\\engine_validator.py",
      "line_number": 627
    },
    {
      "function_name": "run_comprehensive_engine_validation",
      "module": "compareblocks.testing.engine_validator",
      "class": null,
      "description": "Run comprehensive validation of all engines.",
      "parameters": [
        "pdf_path"
      ],
      "return_type": "str",
      "test_file": "tests/unit/test_engine_validator.py",
      "test_description": "Tests run_comprehensive_engine_validation functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\testing\\engine_validator.py",
      "line_number": 633
    },
    {
      "function_name": "PerformanceMetric.__post_init__",
      "module": "compareblocks.testing.performance_tracker",
      "class": "PerformanceMetric",
      "description": "Function description",
      "parameters": [
        "self"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_performance_tracker.py",
      "test_description": "Tests PerformanceMetric.__post_init__ functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\testing\\performance_tracker.py",
      "line_number": 37
    },
    {
      "function_name": "PerformanceTracker.__init__",
      "module": "compareblocks.testing.performance_tracker",
      "class": "PerformanceTracker",
      "description": "Initialize performance tracker.",
      "parameters": [
        "self",
        "db_path"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_performance_tracker.py",
      "test_description": "Tests PerformanceTracker.__init__ functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\testing\\performance_tracker.py",
      "line_number": 75
    },
    {
      "function_name": "PerformanceTracker.record_performance_metric",
      "module": "compareblocks.testing.performance_tracker",
      "class": "PerformanceTracker",
      "description": "Record a performance metric.",
      "parameters": [
        "self",
        "metric"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_performance_tracker.py",
      "test_description": "Tests PerformanceTracker.record_performance_metric functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\testing\\performance_tracker.py",
      "line_number": 156
    },
    {
      "function_name": "PerformanceTracker.calculate_benchmarks",
      "module": "compareblocks.testing.performance_tracker",
      "class": "PerformanceTracker",
      "description": "Calculate performance benchmarks for an engine function.",
      "parameters": [
        "self",
        "engine_name",
        "function_name",
        "days_back"
      ],
      "return_type": "Optional[PerformanceBenchmark]",
      "test_file": "tests/unit/test_performance_tracker.py",
      "test_description": "Tests PerformanceTracker.calculate_benchmarks functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\testing\\performance_tracker.py",
      "line_number": 189
    },
    {
      "function_name": "PerformanceTracker.identify_optimization_opportunities",
      "module": "compareblocks.testing.performance_tracker",
      "class": "PerformanceTracker",
      "description": "Identify performance optimization opportunities.",
      "parameters": [
        "self",
        "engine_name"
      ],
      "return_type": "List[OptimizationOpportunity]",
      "test_file": "tests/unit/test_performance_tracker.py",
      "test_description": "Tests PerformanceTracker.identify_optimization_opportunities functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\testing\\performance_tracker.py",
      "line_number": 279
    },
    {
      "function_name": "PerformanceTracker.get_performance_comparison",
      "module": "compareblocks.testing.performance_tracker",
      "class": "PerformanceTracker",
      "description": "Compare performance across multiple engines for a function.",
      "parameters": [
        "self",
        "engine_names",
        "function_name"
      ],
      "return_type": "Dict[str, Any]",
      "test_file": "tests/unit/test_performance_tracker.py",
      "test_description": "Tests PerformanceTracker.get_performance_comparison functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\testing\\performance_tracker.py",
      "line_number": 398
    },
    {
      "function_name": "PerformanceTracker.generate_performance_report",
      "module": "compareblocks.testing.performance_tracker",
      "class": "PerformanceTracker",
      "description": "Generate comprehensive performance report.",
      "parameters": [
        "self",
        "engine_name",
        "days_back"
      ],
      "return_type": "Dict[str, Any]",
      "test_file": "tests/unit/test_performance_tracker.py",
      "test_description": "Tests PerformanceTracker.generate_performance_report functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\testing\\performance_tracker.py",
      "line_number": 445
    },
    {
      "function_name": "PerformanceTracker.export_performance_data",
      "module": "compareblocks.testing.performance_tracker",
      "class": "PerformanceTracker",
      "description": "Export performance data to JSON file.",
      "parameters": [
        "self",
        "output_path"
      ],
      "return_type": "str",
      "test_file": "tests/unit/test_performance_tracker.py",
      "test_description": "Tests PerformanceTracker.export_performance_data functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\testing\\performance_tracker.py",
      "line_number": 521
    },
    {
      "function_name": "record_performance",
      "module": "compareblocks.testing.performance_tracker",
      "class": null,
      "description": "Record a performance metric.",
      "parameters": [
        "engine_name",
        "function_name",
        "pdf_file",
        "pdf_size_mb",
        "pdf_pages",
        "execution_time",
        "success",
        "memory_usage_mb",
        "cpu_usage_percent",
        "output_size_bytes",
        "error_message"
      ],
      "return_type": "Any",
      "test_file": "tests/unit/test_performance_tracker.py",
      "test_description": "Tests record_performance functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\testing\\performance_tracker.py",
      "line_number": 563
    },
    {
      "function_name": "generate_performance_report",
      "module": "compareblocks.testing.performance_tracker",
      "class": null,
      "description": "Generate performance report for engines.",
      "parameters": [
        "engine_name"
      ],
      "return_type": "Dict[str, Any]",
      "test_file": "tests/unit/test_performance_tracker.py",
      "test_description": "Tests generate_performance_report functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\testing\\performance_tracker.py",
      "line_number": 588
    },
    {
      "function_name": "compare_engine_performance",
      "module": "compareblocks.testing.performance_tracker",
      "class": null,
      "description": "Compare performance across engines for a function.",
      "parameters": [
        "engine_names",
        "function_name"
      ],
      "return_type": "Dict[str, Any]",
      "test_file": "tests/unit/test_performance_tracker.py",
      "test_description": "Tests compare_engine_performance functionality",
      "field_attributes": {},
      "side_effects": [],
      "dependencies": [],
      "source_file": "src\\compareblocks\\testing\\performance_tracker.py",
      "line_number": 594
    }
  ]
}